import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListAdmin } from "../../../structures/ITodoListAdmin";

/**
 * Registers a new administrator in the todo_list_admins table.
 *
 * This endpoint registers a new administrator account by creating a record in
 * the todo_list_admins table. Email uniqueness is enforced by the @@unique
 * constraint. The password_hash field must contain a securely hashed password.
 * Optional fields, such as name and avatar_uri, may be set by the admin upon
 * creation. The status field controls active/inactive state. Upon successful
 * join, an authentication token (JWT) is issued that includes privileges from
 * the privilege_level and status fields. Security ensures emails cannot be
 * enumerated, and only valid registration requests are accepted. If
 * registration fails due to constraint violation (e.g., email reuse), the
 * operation returns a business-level error with no sensitive detail.
 *
 * This endpoint is public-facing, and account creation is allowed until
 * registration policies change. Further admin authentication uses the
 * credentials established here. Password reset and privilege escalation require
 * additional operations. All admin-centric onboarding flows reference this join
 * endpoint for initial registration.
 *
 * @param props.connection
 * @param props.body Details for creating a new administrator account.
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/join
 * @accessor api.functional.auth.admin.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** Details for creating a new administrator account. */
    body: ITodoListAdmin.IJoin;
  };
  export type Body = ITodoListAdmin.IJoin;
  export type Response = ITodoListAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/join";
  export const random = (): ITodoListAdmin.IAuthorized =>
    typia.random<ITodoListAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticates admin credentials for todo_list_admins. Issues JWT tokens if
 * valid.
 *
 * Authenticates administrator credentials (email, password) against records in
 * the todo_list_admins table. Requires the email field to match an existing
 * administrator and the password to validate against the password_hash using a
 * secure comparison. Successful login issues JWT access and refresh tokens,
 * with claims constructed from the id, email, privilege_level, and status
 * fields. Only admin accounts with status indicating active are permitted to
 * login. If login fails due to incorrect credentials, inactive status, or
 * account lockout, a safe generic error is returned. Rate limits and lockout
 * policy may be enforced to prevent brute force attacks.
 *
 * This operation is foundational for all secure administrative actions.
 * Follow-up actions such as password reset, 2FA, or session management are
 * supported in dedicated endpoints. Logging is used for all admin
 * authentication events to ensure traceability.
 *
 * @param props.connection
 * @param props.body Administrator login credentials (email & password).
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/login
 * @accessor api.functional.auth.admin.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Administrator login credentials (email & password). */
    body: ITodoListAdmin.ILogin;
  };
  export type Body = ITodoListAdmin.ILogin;
  export type Response = ITodoListAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/login";
  export const random = (): ITodoListAdmin.IAuthorized =>
    typia.random<ITodoListAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refreshes administrator JWT tokens if current credentials are valid
 * (todo_list_admins).
 *
 * Enables token refresh for an authenticated administrator using a valid
 * refresh token. Validates the admin’s identity and session by verifying the
 * refresh token and the current state of the corresponding admin record in
 * todo_list_admins. Uses the deleted_at and status fields to determine
 * eligibility for refresh—accounts marked deleted, locked, or disabled cannot
 * refresh tokens. New JWT tokens, with claims that reflect the up-to-date
 * privilege_level and status, are issued to maintain secure admin session
 * continuity. Audit logs are updated for refresh activity. Errors are returned
 * for any token or status issue.
 *
 * @param props.connection
 * @param props.body Administrator refresh token credentials.
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/refresh
 * @accessor api.functional.auth.admin.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Administrator refresh token credentials. */
    body: ITodoListAdmin.IRefresh;
  };
  export type Body = ITodoListAdmin.IRefresh;
  export type Response = ITodoListAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/refresh";
  export const random = (): ITodoListAdmin.IAuthorized =>
    typia.random<ITodoListAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
