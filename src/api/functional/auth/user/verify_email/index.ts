import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListUser } from "../../../../structures/ITodoListUser";

/**
 * Verify new user email post-registration in todo_list_users (sets
 * is_email_verified to true for authentication enablement).
 *
 * This endpoint verifies ownership of a user's email address post-registration,
 * operating on the todo_list_users table. Upon successful submission of a valid
 * token and user identification (id), the field 'is_email_verified' is set to
 * true, unlocking authentication and full service access for the user. This
 * operation rejects attempts for already-verified accounts, deleted users
 * ('deleted_at' not null), or invalid/expired verification tokens, returning
 * error details as per business policy.
 *
 * The email verification process is required by business authentication rules
 * and supports compliance with common account lifecycle management practices.
 * Timestamps are updated accordingly in 'updated_at' for the user record. The
 * endpoint produces change audit logs for traceability but does not issue
 * tokens; users must subsequently login/refresh using other endpoints. This
 * operation is critical for onboarding/anti-abuse and may be required after
 * email changes or account migration scenarios.
 *
 * @param props.connection
 * @param props.body User email verification request, typically includes user ID
 *   and a verification token.
 * @path /auth/user/verify-email
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function verifyEmail(
  connection: IConnection,
  props: verifyEmail.Props,
): Promise<verifyEmail.Response> {
  return true === connection.simulate
    ? verifyEmail.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...verifyEmail.METADATA,
          path: verifyEmail.path(),
          status: null,
        },
        props.body,
      );
}
export namespace verifyEmail {
  export type Props = {
    /**
     * User email verification request, typically includes user ID and a
     * verification token.
     */
    body: ITodoListUser.IVerifyEmail;
  };
  export type Body = ITodoListUser.IVerifyEmail;
  export type Response = ITodoListUser.IVerifyEmailResult;

  export const METADATA = {
    method: "POST",
    path: "/auth/user/verify-email",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/user/verify-email";
  export const random = (): ITodoListUser.IVerifyEmailResult =>
    typia.random<ITodoListUser.IVerifyEmailResult>();
  export const simulate = (
    connection: IConnection,
    props: verifyEmail.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: verifyEmail.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
