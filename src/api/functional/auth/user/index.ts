import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListUser } from "../../../structures/ITodoListUser";

/**
 * Register a new user in the 'todo_list_users' table and receive JWT tokens for
 * session start.
 *
 * This operation enables public registration of a new user for the minimal Todo
 * application. It creates a record in the 'todo_list_users' table with the
 * provided email and hashed password. Both 'created_at' and 'updated_at' are
 * set with the account creation timestamp (UTC ISO 8601).
 *
 * All fields referenced (email, password_hash, created_at, updated_at) must be
 * present and valid as per schema. The operation verifies email uniqueness and
 * generates tokens upon successful join. The password is securely hashed as
 * defined in the 'password_hash' column (never in plain text).
 *
 * No privilege is granted beyond ordinary user (cannot access any other data).
 * Account registration issues a user JWT token pair without any admin
 * capability, precisely in line with minimalism principles for account
 * management.
 *
 * Security practices require email uniqueness, password strength validation,
 * secure token generation, and all onboarded fields are directly mapped to
 * schema fields with no extension. This operation must be called only by
 * unauthenticated/public clients.
 *
 * This operation is always the first in the authentication flow, followed by
 * login for future accesses or refresh for renewing tokens. It is related to
 * the 'login' and 'refresh' operations for a complete authentication
 * lifecycle.
 *
 * @param props.connection
 * @param props.body User registration information for 'todo_list_users' (email,
 *   password)
 * @setHeader token.access Authorization
 *
 * @path /auth/user/join
 * @accessor api.functional.auth.user.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** User registration information for 'todo_list_users' (email, password) */
    body: ITodoListUser.IJoin;
  };
  export type Body = ITodoListUser.IJoin;
  export type Response = ITodoListUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/user/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/user/join";
  export const random = (): ITodoListUser.IAuthorized =>
    typia.random<ITodoListUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate a user in 'todo_list_users' with email/password and issue new
 * JWT tokens.
 *
 * This operation authenticates users of the minimal Todo app by validating
 * their provided email and password. It queries only 'todo_list_users', using
 * fields 'email' and 'password_hash', and—upon successful credential
 * match—issues new JWT tokens for access and refresh, following the strict
 * security requirements.
 *
 * Login updates the 'updated_at' field to log last login activity. No extra
 * account or role information is returned; the authentication response includes
 * only required fields.
 *
 * Security is ensured by: never revealing actual password or failure specifics,
 * hashing all credentials, and rejecting all logins lacking valid
 * schema-matching records. Each login attempt is isolated to the user account
 * referenced by email.
 *
 * The login process is the second step in end-user authentication workflows,
 * after registration. Token refresh and logout are handled by additional
 * endpoints. This operation is not accessible for admin or guest roles—it is
 * only for member users as defined by the schema.
 *
 * @param props.connection
 * @param props.body Login information (email and password) per
 *   'todo_list_users' schema.
 * @setHeader token.access Authorization
 *
 * @path /auth/user/login
 * @accessor api.functional.auth.user.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Login information (email and password) per 'todo_list_users' schema. */
    body: ITodoListUser.ILogin;
  };
  export type Body = ITodoListUser.ILogin;
  export type Response = ITodoListUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/user/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/user/login";
  export const random = (): ITodoListUser.IAuthorized =>
    typia.random<ITodoListUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT tokens for a user in 'todo_list_users', updating the session
 * securely.
 *
 * This endpoint allows authenticated users to renew their session by submitting
 * a valid JWT refresh token. It references the 'todo_list_users' table for
 * token validation and—if valid—generates new access and refresh tokens. The
 * 'updated_at' field is updated to reflect token renewal.
 *
 * No additional details are altered in the user record. Security is managed by
 * fully verifying the refresh token, rejecting invalid or expired tokens, and
 * exposing no extra account data.
 *
 * All token operations are strictly mapped to real schema fields, and the
 * response returns the minimal necessary authorized DTO with no extra
 * information. This operation is essential for maintaining user login
 * persistence under JWT strategies. Only available to users with valid refresh
 * tokens issued by the system.
 *
 * The refresh endpoint completes the authentication cycle in coordination with
 * registration and login. Failure to provide a valid refresh token results in
 * an authentication error with no account data disclosed.
 *
 * @param props.connection
 * @param props.body Refresh token for renewing authentication in
 *   'todo_list_users'.
 * @setHeader token.access Authorization
 *
 * @path /auth/user/refresh
 * @accessor api.functional.auth.user.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token for renewing authentication in 'todo_list_users'. */
    body: ITodoListUser.IRefresh;
  };
  export type Body = ITodoListUser.IRefresh;
  export type Response = ITodoListUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/user/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/user/refresh";
  export const random = (): ITodoListUser.IAuthorized =>
    typia.random<ITodoListUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
