import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListUser } from "../../../../structures/ITodoListUser";

/**
 * Complete password reset for 'user' (validate and consume reset token, set new
 * password, revoke all sessions).
 *
 * This endpoint finalizes the password reset process for a user by accepting
 * the reset token, new password, and relevant user ID. The token must be valid
 * and match an entry in 'todo_list_password_reset_tokens', not be expired
 * ('expires_at' future), and not already used ('used_at' null). The targeted
 * user must be active (soft-deleted status checked against 'deleted_at') and is
 * required to match both the token and user email. Upon successful completion,
 * the user's password is changed with a secure, salted hash stored in
 * 'password_hash', the 'updated_at' time is refreshed, the reset token is
 * marked 'used', and all outstanding session tokens in
 * 'todo_list_auth_sessions' are revoked for security. Auditing information is
 * retained. No JWT or session tokens are issued in this operation; users must
 * authenticate through login/refresh to continue access.
 *
 * @param props.connection
 * @param props.body Password reset confirmation payload (reset token, user ID,
 *   new password).
 * @path /auth/user/reset-password
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function resetPassword(
  connection: IConnection,
  props: resetPassword.Props,
): Promise<resetPassword.Response> {
  return true === connection.simulate
    ? resetPassword.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...resetPassword.METADATA,
          path: resetPassword.path(),
          status: null,
        },
        props.body,
      );
}
export namespace resetPassword {
  export type Props = {
    /**
     * Password reset confirmation payload (reset token, user ID, new
     * password).
     */
    body: ITodoListUser.IResetPassword;
  };
  export type Body = ITodoListUser.IResetPassword;
  export type Response = ITodoListUser.IResetPasswordResult;

  export const METADATA = {
    method: "POST",
    path: "/auth/user/reset-password",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/user/reset-password";
  export const random = (): ITodoListUser.IResetPasswordResult =>
    typia.random<ITodoListUser.IResetPasswordResult>();
  export const simulate = (
    connection: IConnection,
    props: resetPassword.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: resetPassword.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
