import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListUser } from "../../../../structures/ITodoListUser";

/**
 * Request password reset for a 'user' via email (creates/reset token in
 * todo_list_password_reset_tokens table).
 *
 * This endpoint initiates a password reset flow for accounts in
 * 'todo_list_users'. It accepts an email address, validates existence (without
 * revealing lookup results for privacy), and generates a secure, single-use
 * password reset token persisted to 'todo_list_password_reset_tokens'. If the
 * user account is soft-deleted ('deleted_at' is not null), no token is issued.
 * The reset token is emailed to the user with a limited expiry time per
 * business rules, and no sensitive token data is ever returned in the API
 * response. Rate limiting and audit logging protect against abuse and enable
 * compliance monitoring.
 *
 * No authentication is needed for this operation. Receipt of this reset token
 * by the user (via email) is required for subsequent execution of the password
 * reset. Operation is fully compliant with business security policy, ensuring
 * no information about email existence is leaked to the caller. Password is
 * only changed upon valid completion of the separate reset/confirm endpoint.
 *
 * @param props.connection
 * @param props.body Password reset request containing the user's email address.
 * @path /auth/user/request-password-reset
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function requestPasswordReset(
  connection: IConnection,
  props: requestPasswordReset.Props,
): Promise<requestPasswordReset.Response> {
  return true === connection.simulate
    ? requestPasswordReset.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...requestPasswordReset.METADATA,
          path: requestPasswordReset.path(),
          status: null,
        },
        props.body,
      );
}
export namespace requestPasswordReset {
  export type Props = {
    /** Password reset request containing the user's email address. */
    body: ITodoListUser.IRequestPasswordReset;
  };
  export type Body = ITodoListUser.IRequestPasswordReset;
  export type Response = ITodoListUser.IRequestPasswordResetResult;

  export const METADATA = {
    method: "POST",
    path: "/auth/user/request-password-reset",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/user/request-password-reset";
  export const random = (): ITodoListUser.IRequestPasswordResetResult =>
    typia.random<ITodoListUser.IRequestPasswordResetResult>();
  export const simulate = (
    connection: IConnection,
    props: requestPasswordReset.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: requestPasswordReset.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
