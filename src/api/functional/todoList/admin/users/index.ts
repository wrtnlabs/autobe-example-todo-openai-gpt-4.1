import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListUser } from "../../../../structures/ITodoListUser";
import { IPageITodoListUser } from "../../../../structures/IPageITodoListUser";

/**
 * List all registered users with paging and search (admin only).
 *
 * Retrieve a paginated and optionally filtered list of all registered user
 * accounts in the minimal Todo List application. This endpoint allows
 * administrators to search by email and supports pagination for large numbers
 * of users, leveraging the todo_list_users table as defined in the schema.
 *
 * The endpoint enforces access restrictions: only authenticated administrators
 * can use this operation. Regular users are forbidden from accessing this API.
 * Results include all standard fields (user id, email, timestamps) but do not
 * contain password hashes or other sensitive information.
 *
 * Common use cases include system administration, maintenance, and audit
 * reviews by privileged staff. Related endpoints manage creation, update, or
 * deletion of users and their associated data.
 *
 * @param props.connection
 * @param props.body Request parameters for user search, including email filter
 *   and pagination controls
 * @path /todoList/admin/users
 * @accessor api.functional.todoList.admin.users.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Request parameters for user search, including email filter and
     * pagination controls
     */
    body: ITodoListUser.IRequest;
  };
  export type Body = ITodoListUser.IRequest;
  export type Response = IPageITodoListUser.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/todoList/admin/users",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoList/admin/users";
  export const random = (): IPageITodoListUser.ISummary =>
    typia.random<IPageITodoListUser.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details for a specific user account (admin only).
 *
 * Retrieve full information about a single user registered in the minimal Todo
 * List application, using the provided userId as a lookup. This endpoint
 * accesses the todo_list_users table and is intended strictly for
 * administrative use, enforcing security via authentication and role checks.
 *
 * Returned data includes the user's id, email, account creation and update
 * timestamps, and does not include password hashes. Only administrators can
 * access this endpoint for any userId; regular users may not use this
 * endpoint.
 *
 * This API complements other endpoints for user creation, update, and deletion,
 * allowing administrators to inspect account-specific data as needed for
 * auditing or maintenance.
 *
 * @param props.connection
 * @param props.userId Unique identifier for the user to be retrieved
 * @path /todoList/admin/users/:userId
 * @accessor api.functional.todoList.admin.users.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the user to be retrieved */
    userId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoListUser;

  export const METADATA = {
    method: "GET",
    path: "/todoList/admin/users/:userId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/admin/users/${encodeURIComponent(props.userId ?? "null")}`;
  export const random = (): ITodoListUser => typia.random<ITodoListUser>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific user's information by ID (admin only).
 *
 * Update the properties (e.g., email, password hash) of a registered user in
 * the minimal Todo List app, targeting the user account identified by userId.
 * This operation modifies the todo_list_users table, enforcing all business
 * rules for uniqueness, permissions, and field validation.
 *
 * Only administrators may perform this operation, and all field updates must
 * comply with data constraints: unique, properly formatted email; hashed
 * password; and required timestamps. Upon successful update, updated_at is set
 * to the current timestamp. Sensitive operations are logged for audit
 * purposes.
 *
 * This API is designed for rare administrative corrections, security responses,
 * or manual account management; regular users cannot update other user records
 * via this endpoint.
 *
 * @param props.connection
 * @param props.userId Unique identifier of the user to be updated
 * @param props.body Object containing updatable user fields (such as email or
 *   password hash)
 * @path /todoList/admin/users/:userId
 * @accessor api.functional.todoList.admin.users.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the user to be updated */
    userId: string & tags.Format<"uuid">;

    /**
     * Object containing updatable user fields (such as email or password
     * hash)
     */
    body: ITodoListUser.IUpdate;
  };
  export type Body = ITodoListUser.IUpdate;
  export type Response = ITodoListUser;

  export const METADATA = {
    method: "PUT",
    path: "/todoList/admin/users/:userId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoList/admin/users/${encodeURIComponent(props.userId ?? "null")}`;
  export const random = (): ITodoListUser => typia.random<ITodoListUser>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a user and cascade-remove all their todos (admin only).
 *
 * Permanently remove a user account, including all owned todo tasks, from the
 * system. This operation acts on the todo_list_users table, using the provided
 * userId as the target. It enforces security, allowing only authenticated
 * administrators to invoke it. The delete is physically executed (hard delete),
 * severing all related data rather than simply flagging records as deleted.
 *
 * Upon successful completion, the user account and all todos connected through
 * the foreign key to todo_list_todos are erased. This supports privacy mandates
 * and prevents orphaned or leaked records. No response body is returned if
 * successful; errors are signaled with appropriate codes and messages in case
 * of permission, referential, or internal failures.
 *
 * This endpoint is to be used by administrators in the rare case of account
 * removal due to user request, policy violation, or data privacy obligations.
 * Irrecoverable data loss is a consequence, so extra audit logging or
 * confirmation mechanisms should be employed by clients.
 *
 * @param props.connection
 * @param props.userId Unique identifier of the user to be deleted
 * @path /todoList/admin/users/:userId
 * @accessor api.functional.todoList.admin.users.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the user to be deleted */
    userId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/todoList/admin/users/:userId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/admin/users/${encodeURIComponent(props.userId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
