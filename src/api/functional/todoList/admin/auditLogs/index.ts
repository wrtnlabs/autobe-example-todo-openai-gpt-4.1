import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListAuditLog } from "../../../../structures/ITodoListAuditLog";
import { IPageITodoListAuditLog } from "../../../../structures/IPageITodoListAuditLog";

/**
 * Retrieve a filtered, paginated list of audit log entries from
 * todo_list_audit_logs (admin only).
 *
 * The audit log list endpoint provides administrative users with advanced
 * search capabilities for monitoring privileged actions on user todos. Admins
 * can filter logs by action type (view or delete), target user or todo,
 * responsible admin, time range, or rationale content. The endpoint supports
 * pagination to efficiently browse large audit trails and includes sorting by
 * timestamp or other relevant fields.
 *
 * Log records returned by this operation include full audit details—admin
 * identity, user and todo IDs, action performed, rationale, and
 * timestamp—enabling forensic analysis and compliance auditing. The response
 * structure aligns with the todo_list_audit_logs schema, ensuring accurate
 * mapping of data fields.
 *
 * Security is paramount: only users with the admin role are authorized to use
 * this endpoint. All access is itself subject to audit logging as required by
 * organizational policy. No unauthorized user data is returned to non-admins.
 * System-enforced rate limiting and sensitive data protection apply.
 *
 * Failure scenarios include improper use by non-admins or invalid filter
 * criteria; informative error messages are returned to guide corrective
 * action.
 *
 * @param props.connection
 * @param props.body Request parameters for audit log filtering, including
 *   pagination and search options.
 * @path /todoList/admin/auditLogs
 * @accessor api.functional.todoList.admin.auditLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Request parameters for audit log filtering, including pagination and
     * search options.
     */
    body: ITodoListAuditLog.IRequest;
  };
  export type Body = ITodoListAuditLog.IRequest;
  export type Response = IPageITodoListAuditLog.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/todoList/admin/auditLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoList/admin/auditLogs";
  export const random = (): IPageITodoListAuditLog.ISummary =>
    typia.random<IPageITodoListAuditLog.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of a specific audit log entry from todo_list_audit_logs
 * (admin only).
 *
 * This endpoint allows an admin to view a single, complete audit log entry
 * identified by its UUID in the todo_list_audit_logs table. The returned
 * details provide full visibility into the original admin action (view or
 * delete) upon a user's todo, including all metadata required for compliance,
 * root cause analysis, or resolving operational issues.
 *
 * The operation enforces that only users with the admin role have access.
 * Attempts to view a nonexistent or unauthorized audit log record result in an
 * error with an informative business-level message. Each access to a detailed
 * audit record may itself be logged for traceability, supporting the system's
 * comprehensive oversight requirements.
 *
 * Returned data includes referencing fields for admin, affected user, todo ID,
 * action type, rationale, and audit timestamp, with structure faithfully
 * matching the todo_list_audit_logs schema.
 *
 * @param props.connection
 * @param props.auditLogId The unique identifier (UUID) of the audit log entry
 *   to retrieve.
 * @path /todoList/admin/auditLogs/:auditLogId
 * @accessor api.functional.todoList.admin.auditLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier (UUID) of the audit log entry to retrieve. */
    auditLogId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoListAuditLog;

  export const METADATA = {
    method: "GET",
    path: "/todoList/admin/auditLogs/:auditLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/admin/auditLogs/${encodeURIComponent(props.auditLogId ?? "null")}`;
  export const random = (): ITodoListAuditLog =>
    typia.random<ITodoListAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("auditLogId")(() => typia.assert(props.auditLogId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
