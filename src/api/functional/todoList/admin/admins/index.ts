import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListAdmin } from "../../../../structures/ITodoListAdmin";
import { IPageITodoListAdmin } from "../../../../structures/IPageITodoListAdmin";

/**
 * Search and retrieve a paginated list of administrator accounts from
 * todo_list_admins.
 *
 * This API operation returns a filtered and paginated list of administrator
 * accounts registered in the system. It operates over the todo_list_admins
 * table, providing system-wide visibility for superusers and allowing easy
 * search, filtering, and sorting based on email or the account creation date.
 *
 * Authorization is strictly required: only users with the admin role may access
 * this endpoint, as regular users are never permitted to view or manage
 * administrator information. The returned data excludes sensitive fields such
 * as password hashes, focusing only on operational metadata.
 *
 * The operation is essential for maintenance, emergency support, and security
 * audits. It is typically paired with endpoints for viewing the details of a
 * specific administrator or for performing create, update, or delete actions.
 * Error scenarios include forbidden access for non-admins, validation failures
 * on filter parameters, and unexpected server errors.
 *
 * @param props.connection
 * @param props.body Filtering and pagination criteria for listing
 *   administrators.
 * @path /todoList/admin/admins
 * @accessor api.functional.todoList.admin.admins.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filtering and pagination criteria for listing administrators. */
    body: ITodoListAdmin.IRequest;
  };
  export type Body = ITodoListAdmin.IRequest;
  export type Response = IPageITodoListAdmin.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/todoList/admin/admins",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoList/admin/admins";
  export const random = (): IPageITodoListAdmin.ISummary =>
    typia.random<IPageITodoListAdmin.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information for a specific administrator by adminId from
 * todo_list_admins.
 *
 * This API operation provides authorized admin users with the full metadata
 * profile of a particular administrator account, uniquely identified by adminId
 * in the todo_list_admins table. It is used for viewing core attributes such as
 * email, timestamps, and other audit-relevant fields, while ensuring that
 * password hashes and other sensitive data remain undisclosed.
 *
 * Access to this endpoint is restricted strictly to users with admin
 * privileges. Security and privacy are enforced at the endpoint and service
 * layer. The information supplied helps with system maintenance, user audits,
 * or when troubleshooting admin privileges and actions.
 *
 * Related operations include listing all admins and enabling update or delete
 * actions by adminId. Error responses include forbidden access for non-admins,
 * not found for missing adminId, and resource access violations for
 * unauthorized requests.
 *
 * @param props.connection
 * @param props.adminId The unique identifier (UUID) of the administrator to
 *   retrieve.
 * @path /todoList/admin/admins/:adminId
 * @accessor api.functional.todoList.admin.admins.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier (UUID) of the administrator to retrieve. */
    adminId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoListAdmin;

  export const METADATA = {
    method: "GET",
    path: "/todoList/admin/admins/:adminId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/admin/admins/${encodeURIComponent(props.adminId ?? "null")}`;
  export const random = (): ITodoListAdmin => typia.random<ITodoListAdmin>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminId")(() => typia.assert(props.adminId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update administrator profile details for a target admin, identified by
 * adminId.
 *
 * This API endpoint allows authorized admin users to update an administrator
 * record in the todo_list_admins table, selected by the adminId parameter.
 * Supported fields for update typically include the admin's email address and a
 * new password hash, as well as tracking changes in the updated_at timestamp
 * for audit.
 *
 * Strict access controls are in effect: only users with admin privileges may
 * invoke this operation. Changing adminId is not permitted; all updates are
 * constrained to permitted fields. The response supplies the new metadata
 * profile after updating.
 *
 * Related endpoints include detail retrieval, list, and delete actions. Errors
 * include forbidden for non-admins, not found for invalid adminId, and
 * validation errors on input data.
 *
 * @param props.connection
 * @param props.adminId The unique identifier (UUID) of the administrator to
 *   update.
 * @param props.body New metadata for the administrator, such as email or
 *   password hash, to apply to the target adminId.
 * @path /todoList/admin/admins/:adminId
 * @accessor api.functional.todoList.admin.admins.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique identifier (UUID) of the administrator to update. */
    adminId: string & tags.Format<"uuid">;

    /**
     * New metadata for the administrator, such as email or password hash,
     * to apply to the target adminId.
     */
    body: ITodoListAdmin.IUpdate;
  };
  export type Body = ITodoListAdmin.IUpdate;
  export type Response = ITodoListAdmin;

  export const METADATA = {
    method: "PUT",
    path: "/todoList/admin/admins/:adminId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoList/admin/admins/${encodeURIComponent(props.adminId ?? "null")}`;
  export const random = (): ITodoListAdmin => typia.random<ITodoListAdmin>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminId")(() => typia.assert(props.adminId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a specific administrator account, identified by adminId (hard delete)
 * from todo_list_admins.
 *
 * This API operation allows an authorized admin to permanently remove an
 * administrator account from the todo_list_admins table, selecting the record
 * by adminId. The deletion is irreversible: the record is physically removed,
 * along with the associated email and password data. As there is no deleted_at
 * or similar soft delete flag in the schema, this is a hard delete operation.
 *
 * Access is strictly limited to admin users, and this action should only be
 * performed with care, typically when an admin is leaving the organization or
 * privileges must be revoked. The operation will log the deletion for audit
 * purposes and enforce all necessary security checks.
 *
 * Potential errors include forbidden access for non-admins, not found for
 * invalid adminId, and resource conflicts (e.g., if last remaining admin;
 * business logic must ensure at least one admin remains).
 *
 * @param props.connection
 * @param props.adminId The unique identifier (UUID) of the administrator to
 *   delete.
 * @path /todoList/admin/admins/:adminId
 * @accessor api.functional.todoList.admin.admins.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique identifier (UUID) of the administrator to delete. */
    adminId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/todoList/admin/admins/:adminId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/admin/admins/${encodeURIComponent(props.adminId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("adminId")(() => typia.assert(props.adminId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
