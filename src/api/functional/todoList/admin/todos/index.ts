import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListTodo } from "../../../../structures/ITodoListTodo";
import { IPageITodoListTodo } from "../../../../structures/IPageITodoListTodo";

/**
 * Create a new Todo item for the current authenticated user.
 *
 * Create a new Todo item for the authenticated user. The title field is
 * mandatory, must be trimmed, non-empty, and no longer than 100 characters. On
 * creation, the item is marked incomplete, and all timestamps (creation,
 * update) are set to the current time. Ownership association is automatic,
 * ensuring users cannot create Todos for others; admin users can also create
 * Todos for their own admin account.
 *
 * Any business-rule or validation violations, such as duplicate titles (if such
 * logic is enforced in application), title length issues, or whitespace-only
 * titles, are reported with clear error messages. Only fields defined in the
 * minimal schema (id, title, is_completed, timestamps, user ownership) are
 * processed. The operation does not support setting completed or deleted fields
 * upon creation; these fields are managed by update endpoints or internal
 * logic.
 *
 * @param props.connection
 * @param props.body Data required for creating a new Todo item: minimal, only
 *   title required.
 * @path /todoList/admin/todos
 * @accessor api.functional.todoList.admin.todos.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Data required for creating a new Todo item: minimal, only title
     * required.
     */
    body: ITodoListTodo.ICreate;
  };
  export type Body = ITodoListTodo.ICreate;
  export type Response = ITodoListTodo;

  export const METADATA = {
    method: "POST",
    path: "/todoList/admin/todos",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoList/admin/todos";
  export const random = (): ITodoListTodo => typia.random<ITodoListTodo>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and retrieve a filtered, paginated list of Todo items.
 *
 * Retrieve a filtered, paginated list of Todo items using advanced search
 * capabilities. This operation is available to authenticated users wishing to
 * view their own todos, or to administrators wishing to view all users' todos.
 * The returned data is sorted in reverse-chronological order by creation date,
 * as described in the requirements.
 *
 * Authorization and role validation are enforced so that standard users can
 * access only their own todos, while admins can access the entire dataset. Text
 * search for task titles and filtering by completion status are included based
 * on application-level logic. Validation ensures users may not access data
 * outside their permission scope.
 *
 * Results are paginated for efficiency and may be further sorted or filtered as
 * required by client use cases. The type definitions for both the request and
 * response DTOs are based directly on the minimal todo_list_todos schema
 * structure, including PK, title, completion status, timestamps, and ownership
 * references (for admin views).
 *
 * @param props.connection
 * @param props.body Filter, search, and pagination options for retrieving Todo
 *   items.
 * @path /todoList/admin/todos
 * @accessor api.functional.todoList.admin.todos.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filter, search, and pagination options for retrieving Todo items. */
    body: ITodoListTodo.IRequest;
  };
  export type Body = ITodoListTodo.IRequest;
  export type Response = IPageITodoListTodo.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/todoList/admin/todos",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoList/admin/todos";
  export const random = (): IPageITodoListTodo.ISummary =>
    typia.random<IPageITodoListTodo.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve the details of a specific Todo item by ID.
 *
 * Retrieve the details of a specific Todo item given its unique identifier.
 * This operation enforces security by confirming that the requester is either
 * the owner of the Todo (standard user) or has administrative privileges. The
 * detailed response includes all relevant schema fields: id, belonged user id,
 * title, completion status, creation timestamp, last updated timestamp,
 * completion timestamp, and deleted timestamp (for soft-deleted items).
 *
 * If the Todo is not found or the requesting user lacks permission, the system
 * returns an appropriate error. This function is essential to enable clients to
 * display or further manipulate a single Todo item in detail. Any fields not
 * present in the minimal schema are excluded from the response.
 *
 * @param props.connection
 * @param props.todoId Unique identifier for the target Todo item.
 * @path /todoList/admin/todos/:todoId
 * @accessor api.functional.todoList.admin.todos.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the target Todo item. */
    todoId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoListTodo;

  export const METADATA = {
    method: "GET",
    path: "/todoList/admin/todos/:todoId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/admin/todos/${encodeURIComponent(props.todoId ?? "null")}`;
  export const random = (): ITodoListTodo => typia.random<ITodoListTodo>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoId")(() => typia.assert(props.todoId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a specific Todo itemâ€™s title or completion status.
 *
 * Update the details of an existing Todo item, as specified by its UUID. The
 * operation enforces strict validation for title updates: the title must be
 * non-empty, without leading or trailing whitespace, and within the
 * 100-character schema constraint. The operation supports updating the
 * is_completed flag, managing the completed_at timestamp accordingly: if a Todo
 * is marked complete, completed_at is set; if marked as incomplete,
 * completed_at is cleared.
 *
 * Only users who own the Todo can update it, except for admin users who may
 * update any item. All changes are subject to full field validation as
 * specified in the business rules. The updated Todo is returned in the
 * response. If permission is denied, or if the item does not exist, the
 * operation returns a clear error.
 *
 * @param props.connection
 * @param props.todoId Unique identifier for the Todo item to update.
 * @param props.body New values for the Todo's fields: title and/or completion
 *   status.
 * @path /todoList/admin/todos/:todoId
 * @accessor api.functional.todoList.admin.todos.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the Todo item to update. */
    todoId: string & tags.Format<"uuid">;

    /** New values for the Todo's fields: title and/or completion status. */
    body: ITodoListTodo.IUpdate;
  };
  export type Body = ITodoListTodo.IUpdate;
  export type Response = ITodoListTodo;

  export const METADATA = {
    method: "PUT",
    path: "/todoList/admin/todos/:todoId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoList/admin/todos/${encodeURIComponent(props.todoId ?? "null")}`;
  export const random = (): ITodoListTodo => typia.random<ITodoListTodo>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoId")(() => typia.assert(props.todoId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a Todo task from the todo_list_todos table by its ID.
 *
 * This API operation deletes a specific Todo task from the todo_list_todos
 * table. Only authenticated users can invoke this endpoint, and business logic
 * must ensure either that the requester is the owner of the todo or has admin
 * privileges. If the user is not the owner and is not an administrator, the
 * operation is denied.
 *
 * The operation takes the todoId as a path parameter. The todoId must be a
 * valid UUID corresponding to an existing Todo task. If no such Todo exists,
 * the service should return an error or not-found status. Upon successful
 * deletion, the Todo task is permanently removed from the database and cannot
 * be recovered via standard means. The operation does not return a response
 * body; a successful status code confirms deletion.
 *
 * The todo_list_todos table defines the association between Todo tasks and
 * users. Owning users are identified by the todo_list_user_id foreign key. The
 * deleted_at column exists for potential future extensibility regarding soft
 * deletes, but this operation performs a true hard delete, erasing both data
 * and all related links. Admin users may invoke this operation on any todo, and
 * all permission management should be implemented in business/service logic.
 *
 * @param props.connection
 * @param props.todoId Unique identifier of the Todo task to be deleted (UUID
 *   format).
 * @path /todoList/admin/todos/:todoId
 * @accessor api.functional.todoList.admin.todos.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the Todo task to be deleted (UUID format). */
    todoId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/todoList/admin/todos/:todoId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/admin/todos/${encodeURIComponent(props.todoId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoId")(() => typia.assert(props.todoId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
