import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListTodos } from "../../../../structures/ITodoListTodos";
import { IPageITodoListTodos } from "../../../../structures/IPageITodoListTodos";

/**
 * Create a new todo item for the authenticated user in the todo_list_todos
 * table.
 *
 * Allows an authenticated user to create a new todo, setting ownership via
 * their user account (todo_list_user.id). The operation inserts into the
 * todo_list_todos table, requiring a non-empty title (max 255 chars,
 * whitespace-trimmed), optional description (max 2000 chars), and optional
 * due_date (must be today or future, ISO 8601 UTC; past dates are rejected).
 * is_completed defaults to false if unspecified. All other fields (created_at,
 * updated_at) are set automatically by the system.
 *
 * Security and privacy are enforced: users can only create todos for
 * themselves. The system responds with validation errors for missing/invalid
 * title, field lengths, or improper due dates. Returns the full created todo
 * item, including system-generated fields such as id and timestamps.
 *
 * @param props.connection
 * @param props.body Fields required to create a new todo item, enforcing
 *   business validation logic.
 * @path /todoList/user/todos
 * @accessor api.functional.todoList.user.todos.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Fields required to create a new todo item, enforcing business
     * validation logic.
     */
    body: ITodoListTodos.ICreate;
  };
  export type Body = ITodoListTodos.ICreate;
  export type Response = ITodoListTodos;

  export const METADATA = {
    method: "POST",
    path: "/todoList/user/todos",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoList/user/todos";
  export const random = (): ITodoListTodos => typia.random<ITodoListTodos>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search, filter, and paginate todo items for the authenticated user (or admin
 * for all users) from the todo_list_todos table.
 *
 * This operation returns a filtered, sorted, and paginated list of todo items
 * owned by the authenticated user or by any user if the requesting account has
 * 'admin' privileges. It corresponds to the todo_list_todos table in the Prisma
 * schema and supports searching by title/description, filtering by completion
 * status (is_completed), due date, and custom sorting.
 *
 * Security is enforced such that regular users see only their own todos, while
 * admins may view all todos in the system. Pagination defaults to 20 items per
 * page with an upper limit of 100. Sorting by created_at (default), due_date,
 * and is_completed is supported.
 *
 * Request validation includes checking correct data types for filters and
 * ranges (e.g., valid ISO 8601 for due_date). Only fields returned by the
 * Prisma schema are included. Response contains todo item summary fields
 * suitable for listing and identification. Related detail endpoints can be used
 * to fetch full todo data as needed.
 *
 * @param props.connection
 * @param props.body Filtering, search, sorting, and pagination parameters for
 *   listing todo items.
 * @path /todoList/user/todos
 * @accessor api.functional.todoList.user.todos.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filtering, search, sorting, and pagination parameters for listing
     * todo items.
     */
    body: ITodoListTodos.IRequest;
  };
  export type Body = ITodoListTodos.IRequest;
  export type Response = IPageITodoListTodos.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/todoList/user/todos",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoList/user/todos";
  export const random = (): IPageITodoListTodos.ISummary =>
    typia.random<IPageITodoListTodos.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single todo item by identifier (for owner or admin) from the
 * todo_list_todos table.
 *
 * This operation fetches the complete details of a specific todo item,
 * identified via its unique todoId (UUID primary key, per the Prisma schema).
 * Ownership and permission checks are enforced: regular users may access only
 * their own todos, while admins are authorized to view any todo.
 *
 * Returned fields include: id, todo_list_user_id (owner's id), title,
 * description, due_date, is_completed, created_at, updated_at, and
 * completed_at, all as defined in the todo_list_todos Prisma table. This
 * operation is used in tandem with the list, update, and delete endpoints.
 * Errors occur if the todo does not exist or the user lacks access rights.
 *
 * Security best practices require explicit validation of the todoId and
 * enforcement of privacy boundaries. This endpoint does not expose sensitive
 * user information beyond the todo's owner reference.
 *
 * @param props.connection
 * @param props.todoId The unique identifier of the todo item to retrieve (UUID,
 *   per todo_list_todos Prisma schema).
 * @path /todoList/user/todos/:todoId
 * @accessor api.functional.todoList.user.todos.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * The unique identifier of the todo item to retrieve (UUID, per
     * todo_list_todos Prisma schema).
     */
    todoId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoListTodos;

  export const METADATA = {
    method: "GET",
    path: "/todoList/user/todos/:todoId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/user/todos/${encodeURIComponent(props.todoId ?? "null")}`;
  export const random = (): ITodoListTodos => typia.random<ITodoListTodos>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoId")(() => typia.assert(props.todoId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a todo item by identifier (allowed to owner or admin) from the
 * todo_list_todos table.
 *
 * Updates a specific todo item (by todoId/UUID) with new values for title,
 * description, due_date, or is_completed. Applies field-level validation rules:
 * title required (max 255 chars, trimmed), description (optional, max 2000
 * chars), due_date (optional, today/future only, ISO 8601 UTC), and
 * is_completed (boolean). Business logic ensures only the owner or an admin can
 * update the item.
 *
 * On successful update, the operation writes to the todo_list_todos table,
 * updates the updated_at timestamp, and sets or clears completed_at according
 * to the completion status. Returns the full updated todo item. Attempts to
 * edit non-owned or non-existent items result in permission or not found
 * errors.
 *
 * @param props.connection
 * @param props.todoId The unique identifier of the todo item to update (UUID,
 *   as defined in todo_list_todos).
 * @param props.body Field updates for the target todo item, enforcing
 *   validation and business rules.
 * @path /todoList/user/todos/:todoId
 * @accessor api.functional.todoList.user.todos.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * The unique identifier of the todo item to update (UUID, as defined in
     * todo_list_todos).
     */
    todoId: string & tags.Format<"uuid">;

    /**
     * Field updates for the target todo item, enforcing validation and
     * business rules.
     */
    body: ITodoListTodos.IUpdate;
  };
  export type Body = ITodoListTodos.IUpdate;
  export type Response = ITodoListTodos;

  export const METADATA = {
    method: "PUT",
    path: "/todoList/user/todos/:todoId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/todoList/user/todos/${encodeURIComponent(props.todoId ?? "null")}`;
  export const random = (): ITodoListTodos => typia.random<ITodoListTodos>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoId")(() => typia.assert(props.todoId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a todo item by identifier from the todo_list_todos table
 * (owner or admin only).
 *
 * Removes a todo item from the todo_list_todos table based on the specified
 * todoId (UUID). Strict permission checks are enforced: only the item's owner
 * or admin can delete. This is a hard delete; the record is physically removed
 * from the database with no soft-delete or recovery mechanism in the schema or
 * business rules. Attempts to delete non-existent or non-owned todos result in
 * not found or permission errors.
 *
 * On successful deletion, a confirmation response is provided. All business and
 * schema constraints are enforced, including cascade rules for related data if
 * applicable. The system never exposes sensitive user data in the response.
 *
 * @param props.connection
 * @param props.todoId Unique identifier of the todo to be deleted (UUID,
 *   referencing the todo_list_todos primary key).
 * @path /todoList/user/todos/:todoId
 * @accessor api.functional.todoList.user.todos.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * Unique identifier of the todo to be deleted (UUID, referencing the
     * todo_list_todos primary key).
     */
    todoId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/todoList/user/todos/:todoId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/user/todos/${encodeURIComponent(props.todoId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("todoId")(() => typia.assert(props.todoId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
