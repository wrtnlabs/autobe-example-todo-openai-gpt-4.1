import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListDeletedTodoLog } from "../../../../../structures/ITodoListDeletedTodoLog";
import { IPageITodoListDeletedTodoLog } from "../../../../../structures/IPageITodoListDeletedTodoLog";

/**
 * Paginated, filtered list of the user's deleted todos within audit retention
 * window.
 *
 * This operation retrieves a paginated list of deleted todos for the currently
 * authenticated user from the todo_list_deleted_todo_logs table. It allows
 * users to review deleted todos for self-auditing or potential recovery actions
 * within the allowed 30-day audit window after deletion. Each log entry
 * preserves a snapshot of business-relevant information at deletion time
 * (title, description, due date, completion status, etc.).
 *
 * All results are strictly scoped to the requesting user as enforced by the
 * todo_list_user_id foreign key. The operation supports advanced search,
 * time-range filtering (e.g., recently deleted items), and sorting by deletion
 * date or original creation time. For privacy and compliance, only the
 * authenticated user's deleted todos are visible, and records older than the
 * retention period are automatically purged from results. Errors are returned
 * if invalid filters are supplied or pagination is out of bounds.
 *
 * This API ensures compliance with business rules regarding user auditability,
 * strict ownership isolation, and secure history browsing. Related API
 * operations include restoration (if supported), permanent erasure after
 * retention, and normal todo list retrieval for active items.
 *
 * @param props.connection
 * @param props.body Search, filter, and pagination criteria for retrieving
 *   deleted todos.
 * @path /todoList/user/todos/deleted
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search, filter, and pagination criteria for retrieving deleted todos. */
    body: ITodoListDeletedTodoLog.IRequest;
  };
  export type Body = ITodoListDeletedTodoLog.IRequest;
  export type Response = IPageITodoListDeletedTodoLog;

  export const METADATA = {
    method: "PATCH",
    path: "/todoList/user/todos/deleted",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoList/user/todos/deleted";
  export const random = (): IPageITodoListDeletedTodoLog =>
    typia.random<IPageITodoListDeletedTodoLog>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single deleted todo record by ID for the authenticated user.
 *
 * Fetch a single deleted todo log from todo_list_deleted_todo_logs based on the
 * specified deletedTodoLogId path parameter. The returned record contains all
 * relevant business fields as preserved at the time of deletion (title,
 * description, status, timestamps, etc.), supporting user-facing audit and
 * history capabilities.
 *
 * Access control is enforced by checking that the log belongs to the currently
 * authenticated user. If the deletedTodoLogId is not found, access is outside
 * the audit retention window, or the user does not own the log, a not-found
 * error is returned. This endpoint is intended for audit history review,
 * compliance support, or detailed inspection by users of previously deleted
 * items.
 *
 * @param props.connection
 * @param props.deletedTodoLogId Unique identifier of the deleted todo log to
 *   return.
 * @path /todoList/user/todos/deleted/:deletedTodoLogId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the deleted todo log to return. */
    deletedTodoLogId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoListDeletedTodoLog;

  export const METADATA = {
    method: "GET",
    path: "/todoList/user/todos/deleted/:deletedTodoLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/user/todos/deleted/${encodeURIComponent(props.deletedTodoLogId ?? "null")}`;
  export const random = (): ITodoListDeletedTodoLog =>
    typia.random<ITodoListDeletedTodoLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("deletedTodoLogId")(() =>
        typia.assert(props.deletedTodoLogId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
