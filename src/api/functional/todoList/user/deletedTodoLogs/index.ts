import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { ITodoListDeletedTodoLog } from "../../../../structures/ITodoListDeletedTodoLog";
import { IPageITodoListDeletedTodoLog } from "../../../../structures/IPageITodoListDeletedTodoLog";

/**
 * Search and browse user's deleted todo logs with pagination and advanced
 * filters.
 *
 * This operation retrieves a paginated and optionally filtered set of deleted
 * todo audit logs from the todo_list_deleted_todo_logs model for the
 * authenticated user. Business rules enforce that only the requesting user's
 * deleted todos (linked by todo_list_user_id) are visible. Filters may include
 * title, deletion date range, completion status, and other business-relevant
 * fields. Pagination and sorting are supported as per the general audit log
 * browsing needs.
 *
 * Users can utilize this endpoint to audit, review, or validate previous
 * deletion actions, ensuring compliance with transparency and privacy business
 * requirements. Only deleted items still within the system-defined retention
 * window are returned, and attempts to query outside this scope yield empty
 * results. Related operations include retrieving an individual deleted log and
 * normal todo list queries for currently active items.
 *
 * @param props.connection
 * @param props.body Search and pagination options for browsing deleted todo
 *   logs.
 * @path /todoList/user/deletedTodoLogs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and pagination options for browsing deleted todo logs. */
    body: ITodoListDeletedTodoLog.IRequest;
  };
  export type Body = ITodoListDeletedTodoLog.IRequest;
  export type Response = IPageITodoListDeletedTodoLog;

  export const METADATA = {
    method: "PATCH",
    path: "/todoList/user/deletedTodoLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/todoList/user/deletedTodoLogs";
  export const random = (): IPageITodoListDeletedTodoLog =>
    typia.random<IPageITodoListDeletedTodoLog>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed info for a deleted todo log by its ID, scoped to the current
 * user.
 *
 * Retrieve a single deleted todo log by the specified deletedTodoLogId from the
 * todo_list_deleted_todo_logs model. The operation ensures that the returned
 * audit log entry belongs to the currently authenticated user and is within the
 * allowed retention window for deleted item records.
 *
 * The returned object contains all snapshot fields as of deletion, enabling
 * detailed user history reviews and facilitating audit transparency. An error
 * is returned if the resource is not found, access is denied, or the log has
 * been purged due to expiration (after the retention period). Use this
 * operation for viewing detailed deleted todo data, not for active todo
 * management.
 *
 * @param props.connection
 * @param props.deletedTodoLogId The unique identifier of the deleted todo log
 *   record to retrieve.
 * @path /todoList/user/deletedTodoLogs/:deletedTodoLogId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier of the deleted todo log record to retrieve. */
    deletedTodoLogId: string & tags.Format<"uuid">;
  };
  export type Response = ITodoListDeletedTodoLog;

  export const METADATA = {
    method: "GET",
    path: "/todoList/user/deletedTodoLogs/:deletedTodoLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/todoList/user/deletedTodoLogs/${encodeURIComponent(props.deletedTodoLogId ?? "null")}`;
  export const random = (): ITodoListDeletedTodoLog =>
    typia.random<ITodoListDeletedTodoLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("deletedTodoLogId")(() =>
        typia.assert(props.deletedTodoLogId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
