import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Represents a registered user in the minimal Todo List application. Maps
 * directly to the 'todo_list_users' Prisma table. Contains core user account
 * data for display, administration, or identification in downstream
 * operations.
 *
 * Sensitive data, such as password hashes, are strictly excluded. Only business
 * logic and audit-relevant fields (id, email, timestamps) are exposed. Intended
 * for use in account views for both administrators and users themselves.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoListUser = {
  /**
   * Unique user identifier (UUID, version 4, generated at registration).
   * Corresponds to the 'id' primary key in the 'todo_list_users' table.
   * Read-only; never user supplied.
   */
  id: string & tags.Format<"uuid">;

  /**
   * User's unique email address for login and identification. Enforced unique
   * at the database level in 'todo_list_users'. Required at registration;
   * must remain unique in updates.
   */
  email: string;

  /**
   * Timestamp when the user account was created (ISO 8601 UTC). Set
   * automatically at registration.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of last update to the user account (ISO 8601 UTC). Set
   * automatically when account metadata changes. Used for audit and
   * concurrency purposes.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ITodoListUser {
  /**
   * Request body for registering a new end user account in the minimal Todo
   * app.
   *
   * This schema represents only the inputs necessary for user onboarding:
   * unique email and plaintext password. No optional or extra fields are
   * permitted, strictly maintaining minimalism. Format and uniqueness
   * validations are handled server-side during registration. The password
   * will be stored as a hash after initial handling; never returned or stored
   * in plain text.
   */
  export type IJoin = {
    /**
     * User's unique email address for registration and authentication.
     *
     * This field corresponds to the 'email' column in the 'todo_list_users'
     * table of the minimal Todo app's database. Email addresses must be
     * unique, properly formatted, and trimmed of any leading or trailing
     * whitespace during validation. The application enforces uniqueness and
     * format checks for security and usability. Example: user@example.com.
     *
     * Cannot be empty and is required during user registration.
     */
    email: string & tags.MaxLength<255> & tags.Format<"email">;

    /**
     * Plaintext password for user registration. This field is required in
     * the join (registration) operation only, and is NOT stored in the
     * database. At the service layer, this password will be securely hashed
     * and persisted as 'password_hash'. Minimum length enforced for basic
     * security.
     *
     * The password must be strong enough to satisfy current business rules
     * and is never returned in any response. Example: P@ssw0rd123. Cannot
     * be empty, and must NOT be shorter or longer than the defined
     * constraints.
     */
    password: string & tags.MinLength<8> & tags.MaxLength<72>;
  };

  /**
   * Authorization response structure for end-user registration, login, or
   * token refresh.
   *
   * This schema is returned whenever a user successfully authenticates
   * through join, login, or refresh operations. All sensitive values, such as
   * the plain password or underlying hash, are omitted. Only public data and
   * the JWT token group are returned, in compliance with minimal security
   * best practices.
   */
  export type IAuthorized = {
    /**
     * The unique identifier of the newly registered user, mapped from
     * 'todo_list_users.id'.
     *
     * This value is a UUID and can be used as a stable user reference
     * throughout the application.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Authorized user's email address after successful registration, login,
     * or refresh operation.
     *
     * This field is sourced from the 'todo_list_users.email' column,
     * guaranteed to be unique and valid.
     */
    email: string & tags.Format<"email">;

    /**
     * Timestamp when the user account was created (ISO 8601 UTC). Set
     * automatically at registration.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp of last update to the user account (ISO 8601 UTC). Set
     * automatically when account metadata changes. Used for audit and
     * concurrency purposes.
     */
    updated_at: string & tags.Format<"date-time">;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Request body for authenticating a user with login credentials.
   *
   * This schema is required for user login operations in the minimal Todo
   * app. The server processes these values, validates credentials against
   * 'todo_list_users', and never returns them in plain text or in any
   * output.
   */
  export type ILogin = {
    /**
     * Registered email address used to identify the end user during login.
     *
     * Corresponds directly to the 'email' field in 'todo_list_users'. This
     * value is used as the primary lookup credential and must be unique
     * within users.
     */
    email: string & tags.Format<"email">;

    /**
     * The plaintext password entered by the user at login time.
     *
     * This value must match the user's password before hashing. It is not
     * stored, is not returned in any response, and is compared securely
     * only during authentication. After hashing and verification, this
     * value is discarded.
     */
    password: string;
  };

  /**
   * Request body for renewing an authentication session with a refresh token.
   *
   * This schema must be provided when requesting a new set of authentication
   * tokens using a previously issued refresh token.
   *
   * Only the 'refresh_token' property is required, and structure follows best
   * practices for secure JWT session renewal.
   */
  export type IRefresh = {
    /**
     * Existing refresh token associated with the authenticated user.
     *
     * This token is provided to extend and maintain the user session,
     * subject to validation and expiration rules.
     */
    refresh_token: string;
  };

  /**
   * Request parameters for searching and paginating the user list. Used by
   * administrators to retrieve a filtered and ordered list of user accounts
   * from the 'todo_list_users' table.
   *
   * Use page and limit for paginated fetches, email to filter for a specific
   * address, and sort/order to control presentation for admin audit or
   * maintenance screens.
   */
  export type IRequest = {
    /**
     * Page number (starting at 1). Used for pagination when listing users.
     * Must be a positive integer. Optional. Defaults to 1 if not provided.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Maximum number of users returned per page. Used for pagination when
     * listing users. Optional. Defaults to 100. Should not exceed
     * application-enforced page size limits.
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * Optional email filter for user search. If provided, only users whose
     * email contains or matches this value will be included. Supports
     * partial matching or case-insensitive search depending on
     * implementation.
     */
    email?: string | undefined;

    /**
     * Sort field for user list. Allows sorting users by 'created_at'
     * timestamp or 'email' address. Enum constraint: only 'created_at' or
     * 'email' accepted. Optional.
     */
    sort?: "created_at" | "email" | undefined;

    /**
     * Sort order direction: use 'asc' for ascending and 'desc' for
     * descending results. Default is 'desc' for reverse-chronological
     * ordering. Optional.
     */
    order?: "asc" | "desc" | undefined;
  };

  /**
   * Object for specifying updates to a user account by an administrator. Used
   * in the PUT operation for /todoList/admin/users/{userId}. Allows changes
   * to mutable fields only, as per the underlying Prisma schema constraints.
   * The only updatable fields are 'email' and 'password_hash'; id and
   * timestamps are immutable or set by the backend. Password_hash must be
   * pre-hashed before using this interface. Any field not included will
   * remain unchanged.
   *
   * Business logic must validate uniqueness, non-emptiness, and format rules
   * for updated values.
   */
  export type IUpdate = {
    /**
     * New email address for the user. If provided, must be unique within
     * the system and comply with standard email formatting requirements.
     * Optionalâ€”if omitted, the email remains unchanged.
     */
    email?: string | undefined;

    /**
     * New password hash to replace the existing password for secure login.
     * Must be a valid output of the configured password hashing algorithm
     * (never plain text). Optional; if omitted, password remains
     * unchanged.
     */
    password_hash?: string | undefined;
  };

  /**
   * Summary (ISummary) DTO for listing user accounts. This schema is used
   * when displaying user information in admin or audit contexts, such as
   * paginated user lists. It includes only safe, non-sensitive, and
   * business-critical fields: id, email, and created_at. Security: does not
   * expose password hashes or internal fields.
   *
   * Every property directly maps to core columns in todo_list_users, ensuring
   * complete data integrity and privacy.
   */
  export type ISummary = {
    /**
     * Unique identifier of the user (UUID format). Serves as the primary
     * key in the todo_list_users table. This value is never mutable and
     * always required in the summary. Used to reference this user in
     * administrative views.
     *
     * See also 'id' column documentation in the Prisma schema.
     */
    id: string & tags.Format<"uuid">;

    /**
     * The registered email address of the user. Must be unique within
     * todo_list_users, follows standard email format constraints. Only
     * exposed in summary/admin contexts (not publicly visible). Used to
     * identify login credentials and for display in administrative lists.
     *
     * Directly corresponds to the 'email' column in the Prisma schema.
     */
    email: string;

    /**
     * Timestamp when the account was created (UTC ISO 8601). Used for
     * auditing and administrative purposes, may be used for sorting user
     * lists. Directly corresponds to the 'created_at' column in
     * todo_list_users. Never null, always present for every user.
     */
    created_at: string & tags.Format<"date-time">;
  };
}
