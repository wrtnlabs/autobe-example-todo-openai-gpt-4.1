import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Full user profile, matching todo_list_users schema except for sensitive
 * credentials. Used in admin dashboards, session authentication, and
 * compliance. All business/deletion metadata included for audit and support
 * visibility.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoListUser = {
  /** User's UUID primary key from todo_list_users.id. */
  id: string & tags.Format<"uuid">;

  /**
   * Unique email for login and notifications (see Prisma
   * todo_list_users.email).
   */
  email: string & tags.Format<"email">;

  /** Display name of user (nullable). */
  name?: string | null | undefined;

  /** Profile/avatar image URL, up to 80,000 characters; nullable. */
  avatar_uri?: string | null | undefined;

  /**
   * Current account status for business, lifecycle, or compliance (see Prisma
   * 'status').
   */
  status: string;

  /** Datetime of most recent successful login (null if never logged in). */
  last_login_at?: (string & tags.Format<"date-time">) | null | undefined;

  /** User record creation (UTC ISO 8601). */
  created_at: string & tags.Format<"date-time">;

  /** Most recent update timestamp. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp for soft deletion; null if not deleted. Used for regulatory
   * compliance and retention controls.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITodoListUser {
  /**
   * Registration request details for creating a new user account. All fields
   * are validated according to the todo_list_users Prisma schema. The
   * password will be hashed server-side before actual persistence. The email
   * must be unique, and optional profile fields may be set if desired.
   */
  export type IJoin = {
    /**
     * The user's unique email address. This will be the user's login and
     * notification identifier. It must conform to the format of a valid
     * email address and be unique in the system. The email is used for
     * identity verification, password reset, and primary communications.
     * This field is required during registration and is referenced in the
     * todo_list_users Prisma schema as the unique identifier for each
     * user.
     *
     * Example: user@example.com
     */
    email: string & tags.Format<"email">;

    /**
     * The user's password in plain text, which will be securely hashed
     * before it is stored in the database (as password_hash column). The
     * password must comply with the system's password policy
     * (minimum/maximum length, complexity). NEVER store or expose this
     * value in any user response. This is only accepted as user input
     * during registration or login.
     */
    password: string;

    /**
     * Optional display name for the user. This can be empty or null during
     * registration. If provided, it is used for personalized UI,
     * notifications, or search within the application. Not enforced to be
     * unique.
     */
    name?: string | null | undefined;

    /**
     * Optional URI for the user's avatar image. Can be empty or null if not
     * provided. If set, it must be a valid URI referencing an image
     * resource (e.g., https://example.com/image.jpg). Used for display in
     * user interfaces and notifications. Maximum length is 80,000
     * characters as defined in the database schema.
     */
    avatar_uri?: (string & tags.MaxLength<80000>) | null | undefined;
  };

  /**
   * Authorization response containing the authenticated user's id, full user
   * record (excluding credentials), and JWT tokens. Returned after successful
   * join, login, or refresh. Used by clients to maintain session context.
   */
  export type IAuthorized = {
    /**
     * Unique identifier of the authenticated user from the todo_list_users
     * table.
     */
    id: string & tags.Format<"uuid">;

    /** JWT token information for authentication */
    token: IAuthorizationToken;

    /**
     * The complete authenticated user profile record, excluding sensitive
     * credential fields. Used to populate user context on client side.
     */
    user: ITodoListUser;
  };

  /**
   * User login request. The fields are used to authenticate an existing
   * account, referencing the todo_list_users schema.
   */
  export type ILogin = {
    /**
     * The login email for the user. Must match a registered email in the
     * todo_list_users table. Used for authentication only, and must follow
     * the same email policy as registration.
     */
    email: string & tags.Format<"email">;

    /**
     * The plaintext password submitted for authentication. This value is
     * never logged or stored as plain text and is only used to validate
     * credentials at login.
     */
    password: string;
  };

  /**
   * Request body structure for user session refresh. Accepts an issued
   * refresh token and, if valid, returns a new set of authorization tokens.
   * Follows best practices for session security and anti-replay enforcement.
   */
  export type IRefresh = {
    /**
     * A JWT refresh token issued to the user's session after successful
     * login or registration. This token is used to authenticate the request
     * for a new access/refresh token pair during session renewal. The token
     * must be valid and not expired, revoked, or associated with a deleted
     * or inactive account.
     */
    refresh_token: string;
  };

  /**
   * Summary information for a user account. Suitable for admin search/results
   * listings where credential details are never exposed. Drawn from
   * todo_list_users table; excludes password_hash and sensitive metadata.
   * Contains enough information for high-level management/UI purposes, but
   * omits profile edits, token data, and deletion markers. Aligns with
   * business requirements to avoid leakage of secure or unnecessary fields.
   */
  export type ISummary = {
    /**
     * Unique user identifier (UUID). Reference to todo_list_users.id in the
     * database. This identifies the user and is required for all
     * cross-entity references in business logic.
     */
    id: string & tags.Format<"uuid">;

    /**
     * The user's unique email address. Acts as the primary login and
     * communications channel. Must be unique in the system. Reference to
     * todo_list_users.email.
     */
    email: string & tags.Format<"email">;

    /**
     * Display name of the user for UI purposes. Optional and nullable. If
     * not set, user interfaces may fall back to the email or show blank.
     * Reference: todo_list_users.name.
     */
    name?: string | null | undefined;

    /**
     * URL for the user's avatar/profile image. May be used in lists,
     * headers, or user search. Optional and nullable. Reference:
     * todo_list_users.avatar_uri.
     */
    avatar_uri?: string | null | undefined;

    /**
     * The business status of the user account (e.g., 'active', 'locked').
     * Used for access management and support. Reference:
     * todo_list_users.status.
     */
    status: string;

    /**
     * Timestamp of the user's most recent login (ISO 8601 UTC). Null if
     * login never occurred. Useful for admin views, analytics, or support.
     * Reference: todo_list_users.last_login_at.
     */
    last_login_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * User registration timestamp (ISO 8601 UTC). Used for sorting and age
     * analysis. Reference: todo_list_users.created_at.
     */
    created_at: string & tags.Format<"date-time">;
  };

  /**
   * Advanced search, filtering, and pagination interface for admin APIs
   * listing user accounts from todo_list_users. All properties correspond to
   * columns or indexed fields in the user Prisma schema. Used for compliance
   * reviews, operational dashboard queries, and administrative account
   * management.
   */
  export type IRequest = {
    /**
     * User's login email address. This is used to filter the user list by
     * an exact email match. Must conform to the email address format as
     * defined by the todo_list_users.email column. If omitted, no filtering
     * by email occurs.
     */
    email?: string | undefined;

    /**
     * Optional partial or full match filter for the user's display name.
     * Used in admin search and compliance review interfaces. Complies with
     * the todo_list_users.name column (nullable).
     */
    name?: string | undefined;

    /**
     * Account status filter. Used to locate users by specific account
     * lifecycle state (such as active, locked, or disabled). Must match
     * values found in the todo_list_users.status column.
     */
    status?: string | undefined;

    /**
     * Include only records created after or at this UTC timestamp. For
     * ranged registration-date queries. Must parse as ISO 8601 date-time.
     */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Include only users created before or at this UTC timestamp. Defines
     * the end boundary of registration date filtering in admin queries.
     */
    created_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Lower bound filter for last successful login time, for account
     * activity analysis.
     */
    last_login_from?: (string & tags.Format<"date-time">) | undefined;

    /** Upper bound filter for last successful login time. */
    last_login_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Sorting key. Specifies which field to sort the user list by.
     * Acceptable values reference indexed columns in todo_list_users.
     */
    sort_by?:
      | "email"
      | "created_at"
      | "last_login_at"
      | "name"
      | "status"
      | undefined;

    /**
     * Sort order for listed users (ascending or descending). Default is
     * descending for most recent-first orderings.
     */
    direction?: "asc" | "desc" | undefined;

    /**
     * Page number for paginated results, starting from 1. If omitted,
     * defaults to 1.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Maximum number of records per page. Default and maximum values
     * subject to business rules.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /**
     * Free-text search term matching the user's name or email using text
     * search index. Implements fuzzy/generic lookup in admin user queries.
     */
    search?: string | undefined;
  };

  /**
   * Admin or system interface to update permitted user fields on a
   * todo_list_users row. Password hash and email updates require extra
   * validation (uniqueness and security). All fields are optional (Partial<T>
   * pattern). Used in PUT /users/{userId} for admin account maintenance.
   */
  export type IUpdate = {
    /**
     * Update the user's login email. Must pass business rules for
     * uniqueness (across todo_list_users) and valid email formatting.
     * Subject to permission restrictions.
     */
    email?: string | undefined;

    /**
     * Update to the user's display name. May be cleared (null) by admin.
     * Adheres to naming/length business rules.
     */
    name?: string | null | undefined;

    /**
     * Update the user's avatar/profile image URI. Null value removes
     * avatar.
     */
    avatar_uri?: string | null | undefined;

    /**
     * Update the user's account status (e.g., activate, lock, suspend,
     * disable). Only accessible to admin or system logic. Must conform to
     * defined state values.
     */
    status?: string | undefined;

    /**
     * Update the user's password credential (stored as a bcrypt/argon2
     * hash). Only permitted by admin or dedicated credential reset
     * endpoints.
     */
    password_hash?: string | undefined;
  };
}
