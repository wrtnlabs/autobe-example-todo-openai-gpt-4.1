import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Represents a registered user account in the Todo List application, as defined
 * in Prisma model `todo_list_users`.
 *
 * Handles user identity, core authentication properties, email verification,
 * and account audit information. Each user is uniquely identified by a UUID,
 * with additional business properties: a unique email address
 * (case-insensitive), `is_email_verified` flag, and audit-relevant timestamps
 * (`created_at`, `updated_at`, `deleted_at`).
 *
 * Sensitive details (like password hashes) are not exposed in this schema. This
 * entity forms the heart of ownership relationships for todos and session
 * management. All business logic for authentication, registration, and email
 * lifecycle centers on this entity. When a user is deleted, all related data
 * (todos, sessions, logs) is purged per privacy policy.
 *
 * This schema includes only fields safe for client exposure.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoListUser = {
  /** Unique identifier for the user (UUID). References Prisma `id` column. */
  id: string & tags.Format<"uuid">;

  /**
   * User's unique email address for authentication and communication.
   * References Prisma `email` column.
   */
  email: string & tags.Format<"email">;

  /**
   * Has the user confirmed ownership of their email address? Used for account
   * enable/disable gating. References Prisma `is_email_verified`.
   */
  is_email_verified: boolean;

  /** Timestamp for account creation. Prisma `created_at` column, ISO 8601 UTC. */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp for the most recent profile/account update. Prisma `updated_at`
   * column, ISO 8601 UTC.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp for soft deletion/block/removal of the account (if any). Prisma
   * `deleted_at` column, ISO 8601 UTC.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace ITodoListUser {
  /**
   * Registration request body for user join (account creation). The email and
   * password fields are mandatory; email must be unique across all users
   * (case-insensitive), and password must meet minimum business security
   * policies. No additional fields are accepted.
   */
  export type IJoin = {
    /**
     * User's email address for registration (must be unique and required).
     * Used for account login and communication.
     */
    email: string & tags.Format<"email">;

    /**
     * User's password for registration (never stored in plain form; must
     * meet business security requirements).
     */
    password: string & tags.MinLength<8> & tags.MaxLength<128>;
  };

  /**
   * Credentials for user authentication (login operation).
   *
   * Requires email and password; returns error if invalid or if user not
   * verified or inactive. Does not accept/return security tokens or any
   * auth/session data on input.
   */
  export type ILogin = {
    /** Registered email for login. */
    email: string & tags.Format<"email">;

    /**
     * Password for credential challenge (never stored or logged in plain
     * form).
     */
    password: string;
  };

  /**
   * JWT refresh token request body. Supplies the session_token to obtain new
   * access and refresh tokens for the authenticated user.
   */
  export type IRefresh = {
    /**
     * Session refresh token for the user (session_token field as stored in
     * todo_list_auth_sessions).
     */
    session_token: string;
  };

  /**
   * Request for email verification on user registration or change.
   *
   * Requires both user_id (UUID) and associated email verification token.
   * Event cannot occur if already verified, already deleted, or token
   * expired/inactive.
   */
  export type IVerifyEmail = {
    /** Verifying user account UUID. */
    user_id: string & tags.Format<"uuid">;

    /** Unique email verification token. */
    token: string;
  };

  /**
   * Empty result object indicating success on email verification; errors use
   * API error format.
   */
  export type IVerifyEmailResult = {};

  /**
   * Authorization response schema for successful auth (registration or login
   * or refresh).
   *
   * Returns session token and quick user summary. Excludes password and any
   * sensitive credentials.
   */
  export type IAuthorized = {
    /** JWT token information for authentication */
    token: IAuthorizationToken;

    /** Session context user info. */
    user: ITodoListUser.ISummary;
  };

  /**
   * Minimal display-safe user data for auth response.
   *
   * Includes id, email, is_email_verified, and created_at â€“ all fields
   * required for quick user context or session display after login. No
   * sensitive user data is present.
   */
  export type ISummary = {
    /** User's database UUID. */
    id: string & tags.Format<"uuid">;

    /** User's display email. */
    email: string & tags.Format<"email">;

    /** Whether email is confirmed for the registered user. */
    is_email_verified: boolean;

    /** Registration timestamp (ISO 8601 UTC), for account age/status. */
    created_at: string & tags.Format<"date-time">;
  };

  /**
   * Request schema for user registration (join): fields required to create an
   * account.
   *
   * Email (unique, case-insensitive) and password (never plain, only for
   * credential validation/hashing) are required. All other information is
   * managed by backend. No user_id or audit/system fields accepted by client.
   * Fails if email is duplicate or invalid per business logic.
   */
  export type ICreate = {
    /**
     * New user's email address (must be unique); login/communication
     * identifier.
     */
    email: string & tags.Format<"email">;

    /**
     * User plain password for registration (min/max length business rules
     * enforced).
     */
    password: string;
  };

  /**
   * Request schema for updating user profile settings (email and/or
   * password). All fields optional.
   *
   * No system, actor, or audit fields allowed. All ownership/admin audit
   * handled by backend context. Email and password must independently pass
   * business rules if present; at least one must be included for update
   * attempt.
   */
  export type IUpdate = {
    /** New user's email, if being changed. */
    email?: string & tags.Format<"email">;

    /** Change password to this value, if specified. */
    password?: string;
  };

  /**
   * Search and filter criteria for user list/lookup operations.
   *
   * Supports pagination (page, limit), filtering by email, is_email_verified,
   * and status. Intended primarily for admin/system-side usage (not relevant
   * for app clients).
   */
  export type IRequest = {
    /** Pagination: page number (min 1) */
    page?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /**
     * Pagination: number of results per page (default/business-capped at
     * 100).
     */
    limit?: number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>;

    /** Filter by registered email address (case-insensitive match). */
    email?: string & tags.Format<"email">;

    /** Filter for verified/unverified status. */
    is_email_verified?: boolean;
  };

  /**
   * Request body object for initiating a password reset (forgot password
   * flow) for a user account. Contains only the user's registered email
   * address, which is used to look up the account and trigger token/email
   * delivery logic. Business logic must not disclose whether the email
   * exists. Response always indicates that the request has been accepted if
   * the email is syntactically valid.
   */
  export type IRequestPasswordReset = {
    /**
     * Registered email address for the user requesting a password reset.
     * Must correspond to an existing account. For privacy protection, even
     * if the address does not exist, a generic success reply is sent. Used
     * to identify the user and generate a password reset token per password
     * recovery business rules.
     */
    email: string & tags.Format<"email">;
  };

  /**
   * Response for password reset request initiation. Always returns
   * success=true if the submission is accepted for processing, regardless of
   * email presence in the system, to comply with privacy and anti-enumeration
   * best practices.
   */
  export type IRequestPasswordResetResult = {
    /**
     * Indicates success status of the password reset initiation. True if
     * request is accepted (to avoid account enumeration in API response).
     */
    success: boolean;
  };

  /**
   * Request object for completing a password reset operation, containing the
   * password reset token (from user's email), the target user's UUID, and the
   * new password to set. All properties are required for successfully
   * resetting the password. Security logic strictly enforces token
   * expiration, one-time use, and correct user association.
   */
  export type IResetPassword = {
    /**
     * The unique password reset token received via email for verifying the
     * request. This is typically a random, cryptographically-secure string
     * mapped to the user in the password reset tokens table, validated to
     * prevent reuse and enforce expiry.
     */
    token: string;

    /**
     * The UUID of the user account associated with this reset action. Used
     * to validate ownership of the reset token and ensure action is
     * performed by the account owner.
     */
    user_id: string & tags.Format<"uuid">;

    /**
     * The new password to set for the account; must meet current system
     * security criteria (e.g., minimum length, character types, etc.).
     */
    new_password: string;
  };

  /**
   * Response for password reset completion, indicating overall success
   * (true/false) and optionally including an error code or descriptive
   * message if the operation failed. Used to signal clients about error
   * recovery steps or next actions.
   */
  export type IResetPasswordResult = {
    /**
     * Indicates whether the password was successfully reset. True if
     * completed; false for invalid/expired token or failure.
     */
    success: boolean;

    /**
     * Optional error code or message for failure conditions (e.g., token
     * expired, invalid password, etc.), null if successful.
     */
    error?: string | null;
  };
}
