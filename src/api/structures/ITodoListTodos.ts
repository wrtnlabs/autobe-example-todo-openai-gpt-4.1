import { tags } from "typia";

/**
 * Complete data model for a todo item in the system, based on the
 * todo_list_todos Prisma schema. Includes all workflow, ownership, and business
 * fields required by end-user and admin operations. Optional fields may be
 * omitted/null according to business logic and system state.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoListTodos = {
  /**
   * Primary key for the todo item. Uniquely identifies a record in the
   * todo_list_todos table. Referenced in all item-specific API operations.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Unique identifier (UUID) of the user who owns this todo. Maps to
   * todo_list_user.id and is set automatically by the backend on creation for
   * proper privacy and permission enforcement.
   */
  todo_list_user_id: string & tags.Format<"uuid">;

  /**
   * Title of the todo item. Required, used for display and search. Limited to
   * 255 characters, trimmed of whitespace. Maps to todo_list_todos.title.
   */
  title: string & tags.MaxLength<255>;

  /**
   * Optional details about the todo item (max 2000 chars,
   * whitespace-trimmed). Maps to todo_list_todos.description.
   */
  description?: (string & tags.MaxLength<2000>) | null | undefined;

  /**
   * Due date for the todo. Must be today or a future date (ISO 8601 UTC) if
   * present. Used for overdue, upcoming, and filtering workflows. Maps to
   * todo_list_todos.due_date.
   */
  due_date?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Completion status. True if finished, false if still pending. Used for
   * filtering and marking completion in business logic. Maps to
   * todo_list_todos.is_completed.
   */
  is_completed: boolean;

  /**
   * Timestamp for when todo was created (ISO 8601 UTC, system managed). Maps
   * to todo_list_todos.created_at.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of most recent modification (ISO 8601 UTC, system managed).
   * Maps to todo_list_todos.updated_at.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp marking when this todo was completed, if present (ISO 8601
   * UTC). Maps to todo_list_todos.completed_at.
   */
  completed_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITodoListTodos {
  /**
   * Request payload for searching, filtering, sorting, and paging
   * todo_list_todos records. All fields are optional; default behavior is to
   * return most recent records for the current user.
   */
  export type IRequest = {
    /**
     * Filter: Only return todos matching this completion status. If
     * omitted, all statuses are included.
     */
    is_completed?: boolean | undefined;

    /**
     * Filter by due date range. Only return todos with due_date greater
     * than or equal to this value. (ISO 8601 UTC)
     */
    due_date_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter by due date range. Only return todos with due_date less than
     * or equal to this value. (ISO 8601 UTC)
     */
    due_date_to?: (string & tags.Format<"date-time">) | undefined;

    /** Search by keyword in title or description. (Case-insensitive) */
    search?: string | undefined;

    /** Sort field: created_at | due_date | is_completed. Default: created_at */
    sort_by?: "created_at" | "due_date" | "is_completed" | undefined;

    /**
     * Sort order: asc (oldest/soonest/false first) | desc
     * (newest/nearest/true first). Default: desc
     */
    sort_order?: "asc" | "desc" | undefined;

    /** Pagination: page number (1-based) */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Pagination: items per page (max 100) */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Input schema for creating a new todo item as represented by the
   * ITodoListTodos.ICreate TypeScript definition.
   *
   * Enforces all field requirements, validations, optional fields, and
   * business logic for todo creation. Excludes system-generated fields (id,
   * timestamps) and ownership (todo_list_user_id), as ownership is assigned
   * by context, not client request. Fields must adhere to business and
   * schema-level constraints (max length, date validity, etc.).
   */
  export type ICreate = {
    /**
     * Title of the todo item.
     *
     * Required upon creation. Must be non-empty, trimmed of
     * leading/trailing whitespace prior to validation and storage. Used for
     * display, searching, and identification. Maximum length is 255
     * characters, as enforced by schema and business rules.
     *
     * Failures to provide a valid title result in request rejection, with
     * explicit validation error response. Title must NOT be null or
     * missing.
     */
    title: string & tags.MaxLength<255>;

    /**
     * Optional details about the todo item.
     *
     * May be omitted. When present, the description is trimmed of
     * whitespace before validation and storage. Supports searching and
     * filtering. Maximum length is 2000 characters.
     *
     * Should provide user with space for elaboration on the todo's intent.
     */
    description?: (string & tags.MaxLength<2000>) | undefined;

    /**
     * Optional due date by which the todo should be completed.
     *
     * If present, must be a valid ISO 8601 date-time string, representing a
     * UTC timestamp that is either today or a future date. Used for
     * filtering and overdue/upcoming logic. Null or missing value indicates
     * no due date.
     *
     * Past dates will be rejected by the service's input validation. The
     * field is optional in the creation request.
     */
    due_date?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Completion status. True if todo is created as completed, otherwise
     * false.
     *
     * If omitted, will default to false per system logic and business
     * rules. Indicates whether the todo should be initially marked as
     * completed at creation, or as incomplete (default).
     *
     * Strongly recommended to leave unset unless creating already-completed
     * items is explicitly required.
     */
    is_completed?: boolean | undefined;
  };

  /**
   * Input schema for updating a todo item as represented by the
   * ITodoListTodos.IUpdate TypeScript interface.
   *
   * Allows optional updates to title, description, due_date, and is_completed
   * only. All fields may be omitted to perform a no-op. System/ownership
   * fields are excluded. Strict business rules enforced for validation and
   * permissible updates. Fields updated conform to the same validation and
   * constraints as applied at creation.
   */
  export type IUpdate = {
    /**
     * New title for the todo item, if updating.
     *
     * Optional for update. If provided, must be non-empty, trimmed, and not
     * exceed 255 characters after trimming. Subject to same business
     * validation checks as creation. Omitted fields leave current value
     * unchanged.
     */
    title?: (string & tags.MaxLength<255>) | undefined;

    /**
     * New description for the todo item, if updating.
     *
     * May be set to an empty string to intentionally clear the description.
     * Trims whitespace, max length 2000 characters, and supports rich-text
     * display or basic search filtering. Optional field, omitted if no
     * update is intended.
     */
    description?: (string & tags.MaxLength<2000>) | undefined;

    /**
     * Updated due date for the todo item, if applicable.
     *
     * Optional for updates. If provided, must be a valid ISO 8601 date-time
     * (UTC) and be today or a future date at time of update. Null or
     * omitted means "do not modify due date". Business logic enforces
     * constraint that past dates are rejected.
     */
    due_date?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Updated completion status for the todo item.
     *
     * Optional for updates. If omitted, current value is left unchanged.
     * When set, triggers logic to update completed_at timestamp accordingly
     * (set if true; clear if false).
     */
    is_completed?: boolean | undefined;
  };

  /**
   * Summary type for listing or searching todo items
   * (ITodoListTodos.ISummary).
   *
   * Contains key business fields suitable for high-speed result display,
   * omitting non-essential or potentially large text. Used for paginated
   * listing, search results, and summary views. Includes required identifiers
   * and status fields per business and schema constraints.
   */
  export type ISummary = {
    /**
     * Unique identifier for the todo item, as defined by the id primary key
     * in todo_list_todos.
     *
     * Serves as a consistent, immutable identifier for referencing a todo
     * from the client side, via API calls for update, view, or delete.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Title of the todo item.
     *
     * Essential display field in summary listings and the main business
     * identifier for client usage.
     *
     * Trimmed and validated as per creation and update rules. Value never
     * null or missing; used in combination with id as natural key for
     * summaries.
     */
    title: string & tags.MaxLength<255>;

    /**
     * Current completion status for the todo item.
     *
     * True if todo is marked completed, false if still pending or
     * incomplete. Used to display status indicators and filter/search
     * options. Always present in summary format.
     */
    is_completed: boolean;

    /**
     * Optional due date for the todo item.
     *
     * Valid ISO 8601 UTC timestamp if present, null or omitted otherwise.
     * Used for deadline visualization, overdue logic, and summary
     * filtering. Field MAY be omitted if no due date set.
     */
    due_date?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Timestamp at which the todo was completed, if set. Null or omitted if
     * incomplete.
     *
     * ISO 8601 UTC format. Provides audit/compliance for marking
     * completion, and can be used to support reporting/business KPI
     * calculations.
     */
    completed_at?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Creation timestamp as assigned by the database and business process.
     *
     * Read-only system field, always present in output. ISO 8601 UTC
     * format, used for chronological sorting, audit log, and display in
     * summaries.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Most recent update timestamp for the todo item.
     *
     * Set by the system at each update, edit, or modification event.
     * Read-only field, ISO 8601 UTC format, always included in output. Used
     * for recency-based sorting, display, and audit.
     */
    updated_at: string & tags.Format<"date-time">;
  };
}
