import { tags } from "typia";

/**
 * Main schema for an individual Todo item in the minimal Todo List application.
 *
 * All fields directly correspond to columns in the 'todo_list_todos' Prisma
 * schema, defining ownership, content, completion status, and auditing
 * information. The presence of required fields is enforced by database and
 * application logic.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoListTodo = {
  /**
   * The unique identifier for a Todo item. Corresponds to the 'id' field in
   * the 'todo_list_todos' table. Used for lookups, updates, and deletion.
   * System generated, never client supplied.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Foreign key identifying the owner user for this Todo.
   *
   * References 'todo_list_users.id'. Enforced for ownership validation and
   * cascading deletes when user is removed. Used for admin/system queries;
   * regular users only see their own id here.
   */
  todo_list_user_id: string & tags.Format<"uuid">;

  /**
   * The label or title describing the Todo task.
   *
   * Sourced from the 'title' field in 'todo_list_todos'. Application logic
   * requires it to be non-empty, trimmed, and at most 100 characters in
   * length. Used for display and search.
   */
  title: string & tags.MaxLength<100>;

  /**
   * Whether the Todo item is marked as completed (true) or is still active
   * (false).
   *
   * Mapped to the 'is_completed' field in the schema. Drives UI display logic
   * and filter options in queries.
   */
  is_completed: boolean;

  /**
   * Timestamp of when the Todo item was created (UTC, ISO 8601).
   *
   * Matches 'created_at' in the database. Immutable. Used for auditing,
   * ordering, and filtering.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of the most recent modification to the Todo (UTC, ISO 8601).
   *
   * Sourced from 'updated_at' in the schema. Updated on edit or status
   * change. Used for syncing and tracking changes.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when the Todo was marked as complete, or null if not completed.
   *
   * Null when is_completed is false. Set to date-time (ISO 8601, UTC) when
   * task is completed. Sourced from 'completed_at' field.
   */
  completed_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * If present, records the (soft) deletion timestamp for the Todo item. Null
   * if not deleted.
   *
   * Mapped to 'deleted_at' field in 'todo_list_todos' for future
   * extensibility. Hard deletes are currently performed, so this will usually
   * be null.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITodoListTodo {
  /**
   * Request DTO for searching and paginating Todo items in the minimal Todo
   * list application.
   *
   * Supports both member and admin search over the 'todo_list_todos' table,
   * based on authorization context. Provides pagination, full-text search on
   * 'title', and optional filtering by completion status. All parameters are
   * strictly optional to support both simple and advanced querying.
   *
   * Each property is mapped to a column or filter supported by the Prisma
   * schema and backend API.
   *
   * Business rules and security filtering based on authentication are
   * expected to be applied before query execution.
   */
  export type IRequest = {
    /**
     * Current page number for paginated results.
     *
     * Controls paging when listing Todo items. Must be a positive integer
     * if present. Default determined by implementation.
     */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Maximum number of Todo items to return in a single page of results.
     *
     * Optional. Capped for minimal app at 100 to prevent excessive resource
     * usage. Defaults may apply in implementation.
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /**
     * Text query for matching Todo 'title' (case-insensitive, partial
     * match).
     *
     * Enables searching Todos via substring or pattern-match against the
     * 'title' field, using advanced database filtering as supported by
     * backend.
     */
    search?: string | undefined;

    /**
     * Filter by completed/incomplete status of Todos.
     *
     * When provided, restricts results to Todos marked as either completed
     * (true) or active (false). Optional; omitting will not filter by
     * status.
     */
    is_completed?: boolean | undefined;
  };

  /**
   * Create DTO for adding a new Todo item to the user's list.
   *
   * This schema defines the minimal required fields to create a Todo: only
   * 'title' is accepted, matching the strict business rules of the minimal
   * Todo app. Ownership and system-managed fields (is_completed, timestamps,
   * user ID) are not client-supplied and are set automatically by the
   * backend. No extraneous or optional properties are present, enforcing
   * absolute simplicity. All business validation (non-empty, max length,
   * trimmed) applies.
   */
  export type ICreate = {
    /**
     * Title of the Todo item. Must be non-empty, trimmed of whitespace,
     * cannot include line breaks or special formatting. Maximum length
     * after trimming is 100 characters. Required when creating a new Todo
     * item. This property implements field-level validation as described in
     * the business rules and mapped directly to the 'title' column in the
     * todo_list_todos table. Example: 'Buy groceries'.
     *
     * This property is validated at the application logic layer for
     * minimalism and must never be omitted in the creation DTO.
     */
    title: string & tags.MaxLength<100>;
  };

  /**
   * Update DTO for an existing Todo item.
   *
   * Allows partial updates: title and/or completion status can be changed. No
   * system-managed fields (owner, timestamps, ID) are present. Properties are
   * optional and may be supplied in any combination. Business rules enforce
   * application of all validation on supplied fields. Only permitted fields
   * for update are included, in line with minimalism and business
   * requirements.
   */
  export type IUpdate = {
    /**
     * Optional updated title for the Todo item. If provided, must be
     * non-empty after trimming, maximum 100 characters, and contain no line
     * breaks or formatting. Mapped to the 'title' column in
     * todo_list_todos. Null or omitted means no title update.
     *
     * Validation ensures the updated title is consistent with creation
     * rules, aligning with business rules that only allow description/title
     * and status to be modified in updates.
     */
    title?: (string & tags.MaxLength<100>) | undefined;

    /**
     * Optional updated completion status for this Todo item. True marks the
     * task as completed, false sets it as active/incomplete. If set, the
     * completed_at timestamp is updated or cleared automatically by
     * business logic as required. Directly tied to the is_completed column
     * in todo_list_todos. Null or omission leaves status unchanged.
     *
     * Update business rules dictate only status and title can be modified.
     */
    is_completed?: boolean | undefined;
  };

  /**
   * Summary information about a single Todo task, suitable for list or
   * overview views in a minimal Todo list application.
   *
   * This schema corresponds directly to the todo_list_todos table in the
   * database, providing only the essential properties needed to identify and
   * render a Todo in list contexts. It intentionally omits detail or soft
   * delete tracking. All properties are non-sensitive, public, and mapped 1:1
   * with the minimal entity fields required for the business function.
   */
  export type ISummary = {
    /**
     * Unique identifier for the Todo item. This is the primary key for
     * todo_list_todos in the database schema, defined as a UUID.
     *
     * This field is used to reference, update, or delete a specific Todo.
     * It must never be reused or guessed and is automatically generated by
     * the database upon creation. Used throughout the application as the
     * unique handle for each task.
     */
    id: string & tags.Format<"uuid">;

    /**
     * The title or label of the Todo item. This is a short string
     * representing the task description, limited to 100 characters and
     * trimmed of whitespace according to business validation rules.
     *
     * The title must be non-empty and concise to ensure rapid review by
     * users. Invalid or long titles are rejected at the application layer.
     * When presented in summary (list) views, this is the canonical field
     * the user sees.
     */
    title: string;

    /**
     * Indicates whether the Todo item has been marked as complete (true) or
     * is still active/incomplete (false).
     *
     * This status controls list display filters and determines whether the
     * completed_at field is populated. Summarized views always show the
     * completion status to allow users to quickly scan finished versus
     * pending items.
     */
    is_completed: boolean;

    /**
     * The ISO 8601 UTC timestamp when the Todo was created in the system.
     * This field is set automatically by the database/server and is used
     * for sorting items in reverse-chronological order as per
     * requirements.
     *
     * This timestamp is essential for user audit trails and is always
     * provided, ensuring consistent experience for chronological browsing.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * The ISO 8601 UTC timestamp for the latest time the Todo was modified
     * (title or completion status was changed). Always applied and updated
     * server-side, never directly editable by end users.
     *
     * This is used for sorting or display purposes in some UI flows and for
     * audit throughout the application.
     */
    updated_at: string & tags.Format<"date-time">;
  };
}
