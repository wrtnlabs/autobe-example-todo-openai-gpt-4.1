import { tags } from "typia";

/**
 * A detailed representation of a todo item as stored in the system, matching
 * the todo_list_todos table structure in the database schema. Includes all
 * relevant business fields: unique identifier (UUID), mandatory title, optional
 * description, due date, completion state, associated timestamps, and a
 * completion marker. Output format for retrieval/query endpoints. Sensitive
 * fields (owner identity, internal audit fields) are omitted for privacy; all
 * fields correspond to actual columns in the source Prisma schema.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoListTodo = {
  /**
   * Unique identifier (UUID) for the todo item. Assigned on creation and
   * immutable. References the corresponding row in the database table.
   * Sourced from the 'id' column of the 'todo_list_todos' table. Used as the
   * primary resource key for retrieval, update, and deletion operations.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Title of the todo item as entered by the user. Required for all todos.
   * Must be unique among incomplete todos for the same user. 1–255 characters
   * in length, case-insensitive for uniqueness. Sourced from the 'title'
   * column of the database entity.
   */
  title: string & tags.MinLength<1> & tags.MaxLength<255>;

  /**
   * Optional user-provided description of the todo, allowing up to 1000
   * characters. May be empty or omitted. References the 'description' field
   * in the Prisma schema, used for personal notes or task instructions.
   */
  description?: string & tags.MaxLength<1000>;

  /**
   * Optional due date for the todo item. If specified, must be a valid ISO
   * 8601 UTC date-time in the future. Null or omitted if unset by user. Maps
   * to the 'due_date' column in the database schema and enables reminder or
   * prioritization workflows.
   */
  due_date?: (string & tags.Format<"date-time">) | null;

  /**
   * Indicates whether the todo has been marked as completed by its owner.
   * Defaults to false on creation. May be toggled via update operations.
   * Directly references the 'is_completed' column in the table.
   */
  is_completed: boolean;

  /**
   * Timestamp (in ISO 8601 format) for when the todo item was marked as
   * completed. Null until marked completed. Always updates when is_completed
   * transitions to true. Sourced from 'completed_at' in the schema.
   */
  completed_at?: (string & tags.Format<"date-time">) | null;

  /**
   * Creation timestamp in ISO 8601 UTC format. Set automatically when the
   * todo item is created. Sourced from the 'created_at' column. Not
   * modifiable by clients.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last updated timestamp (ISO 8601 UTC), modified after any field change.
   * Populated from 'updated_at' column in the 'todo_list_todos' table.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ITodoListTodo {
  /**
   * Request body to create a new todo item for the authenticated user.
   * Accepts a required title, optional description (up to 1000 characters),
   * optional future due date, and an optional completed flag (default:
   * false). Ignores user identity—ownership is implicit from authentication.
   * Validates title uniqueness among incomplete todos and field constraints
   * exactly as described in the business requirements and database schema.
   */
  export type ICreate = {
    /**
     * Title for the new todo item. Required. Must be unique among
     * incomplete todos for the user (case-insensitive within business
     * constraints). Maps to the 'title' column in the 'todo_list_todos'
     * table.
     */
    title: string & tags.MinLength<1> & tags.MaxLength<255>;

    /**
     * Optional description or details for the todo. May be empty or
     * omitted. Limited to 1000 characters. Sourced from database schema's
     * 'description' field.
     */
    description?: string & tags.MaxLength<1000>;

    /**
     * Optional due date for the todo item. If specified, must be a valid
     * ISO 8601 future date-time; null or omitted if unset.
     */
    due_date?: (string & tags.Format<"date-time">) | null;

    /**
     * Set to true to mark the todo as completed on creation (optional,
     * defaults to false). Business logic will populate completed_at
     * timestamp if true. Directly maps to 'is_completed' in schema.
     */
    is_completed?: boolean;
  };

  /**
   * Request body for updating selected business fields of an existing todo.
   * All fields are optional and, if omitted, do not change. Supports
   * modifying title, description, due date, and completion status, each
   * validated according to business rules and field constraints sourced from
   * the Prisma schema. Client must never set ownership/user ID—backend
   * assigns that via authentication. System-generated and relation keys are
   * immutable by this operation. Title remains uniqueness-constrained among
   * incomplete todos owned by the user.
   */
  export type IUpdate = {
    /**
     * (Optional) New title for the todo item. Must be unique among
     * incomplete todos (1–255 chars, case-insensitive, per user). Will
     * overwrite current title if provided. Sourced from 'title' in the
     * schema.
     */
    title?: string & tags.MinLength<1> & tags.MaxLength<255>;

    /**
     * (Optional) New description. Up to 1000 characters. Maps to
     * 'description' in DB. Will overwrite existing description if present.
     */
    description?: string & tags.MaxLength<1000>;

    /**
     * (Optional) New due date (if provided, future-only, ISO 8601). Null or
     * omission removes the due date. Maps to 'due_date' field in schema.
     */
    due_date?: (string & tags.Format<"date-time">) | null;

    /**
     * (Optional) New completion flag for the todo. Setting to true will
     * mark completed and populate 'completed_at'; setting false marks
     * incomplete.
     */
    is_completed?: boolean;
  };

  /**
   * Summary object for a todo item, as returned within paginated list APIs.
   * Contains fields needed for display (id, title, completion status, due
   * date, timestamps), omitting large descriptions or ownership info for
   * privacy and efficiency.
   */
  export type ISummary = {
    /**
     * Unique identifier of the todo item. Used for linking, navigation, and
     * further CRUD operations. Matches id in the main table.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Title of the todo (required, 1-255 chars). Main field for display and
     * search. Uniqueness is preserved among active todos per user, but not
     * enforced in the summary response.
     */
    title: string & tags.MaxLength<255>;

    /**
     * Whether this todo is completed (true) or not (false). Used for
     * filtering, grouping, and UI indication.
     */
    is_completed: boolean;

    /**
     * Optional due date for the todo if set, in ISO 8601 date-time format.
     * Null if not provided or unset.
     */
    due_date?: (string & tags.Format<"date-time">) | null;

    /**
     * Timestamp of todo creation (ISO 8601 UTC). Useful for sorting and
     * audit tracking in list views.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Last update timestamp of the todo (ISO 8601 UTC). Used for sort order
     * and change tracking.
     */
    updated_at: string & tags.Format<"date-time">;
  };

  /**
   * Request object for filtering, searching, and paginating the user's todo
   * list. Supports combination of status, date range, substring search,
   * sorting, and pagination according to business requirements for efficient
   * todo management.
   */
  export type IRequest = {
    /**
     * Page number for pagination (starts at 1). Required for paginated
     * queries.
     */
    page?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /** Maximum number of todos to return per page. Default 20, max 100. */
    limit?: number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>;

    /**
     * Filter by completion status. Allowed values: 'all', 'complete',
     * 'incomplete'.
     */
    status?: "all" | "complete" | "incomplete";

    /**
     * Sort results by 'due_date' or 'created_at'. Corresponds to main
     * business fields for todo sorting.
     */
    sort_by?: "due_date" | "created_at";

    /**
     * Sort order. Allowed values: 'asc' (ascending) or 'desc' (descending).
     * Default is 'desc'.
     */
    sort_direction?: "asc" | "desc";

    /**
     * Optional substring filter for todo title. Applies case-insensitive,
     * partial matching to the title field.
     */
    search?: string;

    /**
     * Optional filter for todos with due_date greater than or equal to this
     * ISO 8601 datetime. Used for time range filtering.
     */
    due_date_after?: (string & tags.Format<"date-time">) | null;

    /**
     * Optional filter for todos with due_date less than or equal to this
     * ISO 8601 datetime. Used for time range filtering.
     */
    due_date_before?: (string & tags.Format<"date-time">) | null;
  };
}
