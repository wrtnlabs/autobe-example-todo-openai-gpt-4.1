import { tags } from "typia";

/**
 * Detailed representation of a single todo item, as defined in the
 * `todo_list_todos` table.
 *
 * Contains all user-owned task fields, metadata, and ownership. Used both for
 * operational endpoints (retrieve, update, delete) and for returned data in
 * listing, search, and reporting APIs. Fields track ownership, content,
 * completion status, optional due date, and timing. All business constraints
 * reflected here for enforcement of data correctness, privacy, and productivity
 * rules.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoListTodo = {
  /**
   * Unique identifier of the todo record (UUID).
   *
   * Serves as the primary key for referencing, updating, and deletion. Maps
   * to `id` in `todo_list_todos`.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Owner's user id (UUID).
   *
   * Correlates the todo to its creator or owner (`todo_list_users.id`).
   * Enforces row-level authorization and is used for partitioning user data
   * and privacy enforcement.
   */
  todo_list_user_id: string & tags.Format<"uuid">;

  /**
   * Main textual content for the todo (1-255 chars, trimmed, required).
   *
   * Directly references the `content` column in `todo_list_todos`. All
   * business validation performed here (no control characters, trimmed of
   * whitespace, non-empty).
   */
  content: string;

  /**
   * Optional due date (ISO8601 date string).
   *
   * References the `due_date` in `todo_list_todos`. Nullable—null means no
   * due date assigned. Used in UI and productivity features.
   */
  due_date?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Is this todo completed?
   *
   * Maps to `completed` in `todo_list_todos`. True when marked as done by the
   * user; false when active/incomplete. Drives productivity and progress
   * logic.
   */
  completed: boolean;

  /**
   * Timestamp this todo was marked complete (null if not completed).
   *
   * References `completed_at` in `todo_list_todos`. Enables tracking
   * completions for analytics and business reporting; null if
   * active/uncompleted.
   */
  completed_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Created timestamp (UTC, ISO8601).
   *
   * Represents the time when this todo was created (from `created_at` in
   * `todo_list_todos`). Important for sorting, queries, and user timeline
   * presentation.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last modification timestamp (UTC, ISO8601).
   *
   * Tracks most recent updates to todo state or content (from `updated_at` in
   * `todo_list_todos`). Used for timestamp-based queries and UI freshness
   * indicators.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ITodoListTodo {
  /**
   * Request DTO for searching/filtering user's todos (todo_list_todos).
   *
   * Supports advanced query parameters, including free-text content search,
   * completion status filter, optional due date, pagination, and sort order.
   * Used in user and admin task list endpoints to retrieve precisely the
   * subset of tasks relevant for a specific operational context. Each
   * parameter maps directly to a Prisma schema column for query safety.
   */
  export type IRequest = {
    /**
     * Text search filter for todo content (partial, case-insensitive).
     *
     * Allows keyword looking up across `content` field. Trims whitespace
     * and ignores blank queries. Reference for productivity/task filtering
     * in UI.
     */
    search?: string | undefined;

    /**
     * Optional: filter todos by completion state (true = only completed,
     * false = only uncompleted).
     *
     * Maps to `completed` property of `todo_list_todos`. Used for filtering
     * user's list by finished or unfinished tasks.
     */
    completed?: boolean | undefined;

    /**
     * Optional: ISO8601 query for todos due on a specific day/date.
     *
     * Filters tasks whose `due_date` matches the provided value. Null or
     * absent means no due date filtering.
     */
    due_date?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Page number for pagination (1-based, default 1).
     *
     * Used in paginated APIs for returning a subset (chunk) of the todo
     * list. Applies to `todo_list_todos` listing endpoints, helping users
     * and admins navigate large task sets.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Number of records per page (default 20).
     *
     * Adjusts API result set size for productivity and performance. Linked
     * to UI page size and user preference. Maps to corresponding limits in
     * business policy.
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * Optional: sort order for query results (e.g., 'created_at:desc',
     * 'due_date:asc').
     *
     * Changes the record order of listed todos. Defaults to
     * business-defined sort (usually most recent first).
     */
    sort?: string | undefined;
  };

  /**
   * Request body structure for creating a new todo item. This type defines
   * the minimal content required by the todo list business rules and
   * validation logic. The only required property is "content"; "due_date" is
   * optional and must meet date validation if present. Ownership, completion,
   * and timestamps are assigned by system logic.
   */
  export type ICreate = {
    /**
     * Main todo text, required. Must be trimmed, non-empty, maximum 255
     * characters, and not solely composed of whitespace or control
     * characters. All entries are validated according to the business and
     * database rules described in the functional requirements and Prisma
     * schema column comments.
     */
    content: string & tags.MaxLength<255>;

    /**
     * An optional due date for the todo. If not provided or null, the todo
     * has no deadline. Must follow ISO format and cannot precede the todo's
     * creation date.
     */
    due_date?: (string & tags.Format<"date">) | null | undefined;
  };

  /**
   * Partial update type for a todo item. All fields are optional—only those
   * present are changed. Ownership, id, and system meta fields are never
   * accepted or updatable via this type. All changes undergo business rule
   * and database schema validation.
   */
  export type IUpdate = {
    /**
     * Optional new content for this todo. If provided, it must be trimmed
     * and non-empty, with no control characters, and up to 255 characters.
     * Any update to this field must meet business validation (see
     * functional requirements and schema docs).
     */
    content?: (string & tags.MaxLength<255>) | undefined;

    /**
     * Optional due date update for the todo. Null means remove the
     * deadline. Must follow ISO 8601 format and cannot be set before todo
     * creation.
     */
    due_date?: (string & tags.Format<"date">) | null | undefined;

    /**
     * If present, instructs the system to mark the todo as completed (true)
     * or uncompleted (false). Omitted means no change.
     */
    completed?: boolean | undefined;
  };

  /**
   * Summary object for a todo task. Designed for list/search view in todo
   * lists. Derived from todo_list_todos table fields, omitting user_id/owner,
   * update timestamp, and audit details. Contains all user-visible aspects
   * needed for standard UI views or admin search, but no security or meta
   * fields. Ensures business rule compliance on content length.
   */
  export type ISummary = {
    /**
     * Unique identifier (UUID) for the todo. Reference: todo_list_todos.id.
     * Used for access, updates, and deletion.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Main textual content of the todo. Required, plain text (no
     * formatting). Must be 1–255 characters (business rule). Reference:
     * todo_list_todos.content.
     */
    content: string & tags.MaxLength<255>;

    /**
     * Optional due date for the todo (ISO 8601 format). Null if not set.
     * Reference: todo_list_todos.due_date.
     */
    due_date?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Whether this todo is marked as completed. Business rule: must default
     * to false when created. Reference: todo_list_todos.completed.
     */
    completed: boolean;

    /**
     * Timestamp of when this todo was completed (ISO 8601 UTC). Null if
     * incomplete. Reference: todo_list_todos.completed_at.
     */
    completed_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * When the todo was created (ISO 8601 UTC). Used for sorting and audit.
     * Reference: todo_list_todos.created_at.
     */
    created_at: string & tags.Format<"date-time">;
  };
}
