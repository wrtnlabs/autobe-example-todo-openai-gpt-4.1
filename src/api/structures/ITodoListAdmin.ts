import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Administrator profile record from todo_list_admins. Contains full
 * non-credential business fields and operational audit markers, but never
 * exposes password_hash. Used for secure dashboarding, session context, and
 * privilege management.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoListAdmin = {
  /** Admin's primary key identifier from todo_list_admins.id. */
  id: string & tags.Format<"uuid">;

  /** Unique login email (business/admin only) from todo_list_admins.email. */
  email: string & tags.Format<"email">;

  /** Display name for UI/audit; nullable. */
  name?: string | null | undefined;

  /** Admin profile/avatar image; nullable, supports personalization. */
  avatar_uri?: string | null | undefined;

  /** Admin account status for security and controls. */
  status: string;

  /** Admin operational privilege, e.g., superadmin/support/auditor. */
  privilege_level: string;

  /** Datetime of most recent privileged admin operation. */
  last_admin_action_at?: (string & tags.Format<"date-time">) | null | undefined;

  /** Datetime of most recent login (null if never logged in). */
  last_login_at?: (string & tags.Format<"date-time">) | null | undefined;

  /** Admin account creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** Last admin record update timestamp. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft-deletion timestamp (null = active). */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace ITodoListAdmin {
  /**
   * Request body for registering a new administrator account. Reference to
   * todo_list_admins Prisma table for validation, including email uniqueness
   * and required password hash. Optional fields control profile
   * personalization and access level. All validation uses business and
   * schema-level rules.
   */
  export type IJoin = {
    /**
     * Administrator's unique login email. Required for secure privileged
     * access and identity. Must be unique per admin (see Prisma @@unique
     * constraint on todo_list_admins.email). Used for authentication and
     * admin communication channel. Example: admin@example.com.
     */
    email: string & tags.Format<"email">;

    /**
     * Password hash for administrator authentication. This must be a
     * cryptographically secure hashed password (bcrypt/argon2), never
     * storing plaintext. Used for login checks (see Prisma password_hash
     * field on todo_list_admins). Accepted by API only during admin
     * registration, not exposed in any responses. Must meet application
     * security requirements.
     */
    password_hash: string;

    /**
     * Administrator's display name for profile and audit log references.
     * Optional for registration and profile personalization, but
     * recommended for traceability (see Prisma name field on
     * todo_list_admins). May be null or omitted if not specified. Example:
     * "Alex Admin".
     */
    name?: string | null | undefined;

    /**
     * Optional admin profile/avatar image URI. Supports personalization of
     * admin profile in UI. May be omitted, null, or a URI string up to
     * 80,000 characters (see Prisma avatar_uri field). Example:
     * "https://cdn.example.com/avatar/234512849".
     */
    avatar_uri?: string | null | undefined;

    /**
     * Current admin account status. Governs access control and operational
     * state. Examples: "active", "locked", "disabled", "suspended". Value
     * set per business/custom logic (see Prisma status column). Optional on
     * registration, defaulting to business logic if omitted.
     */
    status?: string | undefined;

    /**
     * Business-defined privilege level (e.g., 'superadmin', 'support',
     * 'auditor'). Optional on registration. Used for admin authorization
     * tiering per Prisma privilege_level column. Example: "support".
     */
    privilege_level?: string | undefined;
  };

  /**
   * Admin login form accepting login email and raw password for credential
   * verification. References todo_list_admins.
   */
  export type ILogin = {
    /** Admin authentication email address. Must exist in todo_list_admins. */
    email: string & tags.Format<"email">;

    /**
     * Administrator's raw password, to be securely transmitted and compared
     * to password hash. Not stored after verification.
     */
    password: string;
  };

  /**
   * Request body for admin token refresh. Accepts a refresh token and, if
   * valid, returns new access and refresh tokens for continued session.
   */
  export type IRefresh = {
    /**
     * Valid JWT refresh token issued to the admin session on prior login,
     * join, or refresh. Used for session lifecycle management.
     */
    refresh_token: string;
  };

  /**
   * Authorization payload for an administrator: unique id, JWT token
   * structure, and the admin's full profile (excluding login credentials).
   * Follows business convention for secure session establishment.
   */
  export type IAuthorized = {
    /** The admin's unique identifier from todo_list_admins.id. */
    id: string & tags.Format<"uuid">;

    /** JWT token information for authentication */
    token: IAuthorizationToken;

    /**
     * Full admin profile object, excluding sensitive credentials. Useful
     * for admin dashboards and session context.
     */
    admin: ITodoListAdmin;
  };

  /**
   * Advanced search/filter, sorting, and pagination interface for listing
   * admin users in the todo_list_admins table. Supports operational
   * dashboards and compliance discovery endpoints.
   */
  export type IRequest = {
    /**
     * Admin login email filter. Restricts the listing to records with a
     * matching email address (exact or partial match depending on
     * UI/business rules).
     */
    email?: string | undefined;

    /** Partial or full display name search filter for the admin listing. */
    name?: string | undefined;

    /**
     * Filter for the admin privilege level (e.g., superadmin, support).
     * Only returns records matching this privilege.
     */
    privilege_level?: string | undefined;

    /** Filter by current admin account status (active, suspended, etc.). */
    status?: string | undefined;

    /**
     * Include only admins created after or at this UTC date-time. Format
     * matches ISO 8601.
     */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /** Include only admins created before or at this date. */
    created_to?: (string & tags.Format<"date-time">) | undefined;

    /** Lower bound for last successful admin login, UTC. */
    last_login_from?: (string & tags.Format<"date-time">) | undefined;

    /** Upper bound for last admin login, UTC. */
    last_login_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Key to sort the admin list responses. Only pre-indexed fields
     * allowed.
     */
    sort_by?:
      | "email"
      | "created_at"
      | "last_login_at"
      | "name"
      | "status"
      | "privilege_level"
      | undefined;

    /** Sort direction (ascending or descending). */
    direction?: "asc" | "desc" | undefined;

    /** Page number of the results, starting from 1. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Number of admin records per result page. Bounded by business rules. */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;

    /**
     * Free-text search over admin name or email fields using full text
     * index.
     */
    search?: string | undefined;
  };

  /**
   * Profile/status update DTO for an administrator account.
   *
   * Allows patching the name, avatar, status, or privilege_level for an admin
   * via admin management UIs or operational workflows. Credential changes are
   * not permitted here (see dedicated credential endpoints). Ensures
   * controlled evolution of admin state in compliance with business and audit
   * constraints.
   */
  export type IUpdate = {
    /**
     * Optional new display name for admin profile.
     *
     * Admin may update their profile name for easier identification in
     * audit logs and dashboards. Mirrors the `name` column in
     * `todo_list_admins`. Null clears profile display name.
     */
    name?: string | null | undefined;

    /**
     * Optional new avatar image URL.
     *
     * Updates the `avatar_uri` (profile picture) in `todo_list_admins`.
     * Used for UI personalization; null value removes existing image.
     */
    avatar_uri?: string | null | undefined;

    /**
     * Optional new account status (e.g., active, suspended, locked).
     *
     * Controls account accessibility for privileges. From `status` in
     * `todo_list_admins`. Must follow valid values established by business
     * logic.
     */
    status?: string | undefined;

    /**
     * Optional new privilege_level (e.g., superadmin, support, auditor).
     *
     * Alters admin access rights and operational authority. Mirrors the
     * `privilege_level` field in `todo_list_admins`.
     */
    privilege_level?: string | undefined;
  };

  /**
   * Summary record for an administrator account. Used in admin dashboard
   * search, compliance listings, or management tables. Contains no
   * authentication or password fields; only business metadata required for
   * high-level views. All fields align with todo_list_admins schema
   * definition and reflect administrative privilege without leaking
   * security-sensitive fields. For full detail views or editing, use the main
   * ITodoListAdmin schema.
   */
  export type ISummary = {
    /**
     * Unique admin identifier (UUID). Reference to todo_list_admins.id in
     * database. Used as the primary key for all administrator business
     * actions and audit trails.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Admin account login email. Must be unique among all administrators.
     * Used in admin authentication, notifications, and operations.
     * Reference: todo_list_admins.email.
     */
    email: string & tags.Format<"email">;

    /**
     * Display name of the administrator for UI and management purposes.
     * Nullable and optional. Pulled from todo_list_admins.name.
     */
    name?: string | null | undefined;

    /**
     * Administrator profile/avatar image URL. May be displayed in
     * dashboards/logs. Optional and nullable. Reference:
     * todo_list_admins.avatar_uri.
     */
    avatar_uri?: string | null | undefined;

    /**
     * Operational status of the admin account (e.g., 'active',
     * 'suspended'). Reference: todo_list_admins.status. Used for
     * authorization checks.
     */
    status: string;

    /**
     * Business privilege level for this admin (e.g., 'superadmin',
     * 'support'). Used to differentiate capability and access areas.
     * Reference: todo_list_admins.privilege_level.
     */
    privilege_level: string;

    /**
     * Timestamp of most recent privileged admin operation (ISO 8601 UTC).
     * May be null if no actions yet. Reference:
     * todo_list_admins.last_admin_action_at.
     */
    last_admin_action_at?:
      | (string & tags.Format<"date-time">)
      | null
      | undefined;

    /**
     * Timestamp when the admin last logged into their account (ISO 8601
     * UTC). Null if not yet logged in. Reference:
     * todo_list_admins.last_login_at.
     */
    last_login_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Admin account creation timestamp (ISO 8601 UTC). Used for
     * onboarding/audit. Reference: todo_list_admins.created_at.
     */
    created_at: string & tags.Format<"date-time">;
  };
}
