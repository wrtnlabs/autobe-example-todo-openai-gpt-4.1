import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Administrator entity schema for the minimal Todo list application.
 *
 * Represents a registered admin user as defined in the 'todo_list_admins'
 * table, containing only essential identification and audit fields. This
 * structure excludes sensitive authentication information, instead providing a
 * secure, audit-focused, minimal representation of admin account metadata.
 *
 * All properties directly correspond to columns in the Prisma schema,
 * facilitating system-wide administration and access management while enforcing
 * strict minimalism.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type ITodoListAdmin = {
  /**
   * Unique identifier for the admin account.
   *
   * Represents the primary key in the 'todo_list_admins' table. Used to
   * uniquely distinguish administrator users and manage their access rights.
   * This value is generated by the system at registration and is not
   * mutable.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Admin user's unique email address for login and identification.
   *
   * Referenced in the 'email' column of the 'todo_list_admins' table. Each
   * admin must have a unique email address. Changing this value may impact
   * loginability and security logging. Used for authentication and system
   * notifications when necessary.
   */
  email: string & tags.Format<"email">;

  /**
   * Timestamp marking the admin account creation.
   *
   * Matches the 'created_at' field in the 'todo_list_admins' table. Timezone
   * is UTC, formatted according to ISO 8601. Used for auditing, tracking
   * account history, and system monitoring.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp representing the last modification of the administrator record.
   *
   * Matches the 'updated_at' column in the 'todo_list_admins' table (ISO
   * 8601, UTC). Updated whenever significant changes to the admin profile,
   * password, or core metadata are made.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace ITodoListAdmin {
  /**
   * Payload required to create a new administrator account in the minimal
   * Todo application. Includes only the essential fields: a unique email
   * address and a plaintext password (which will be hashed by the system
   * before storage).
   *
   * This structure enforces minimum security and uniqueness standards for
   * administrator registration. It should never include output-only or
   * system-generated fields such as id, created_at, or password_hash. See
   * Prisma schema 'todo_list_admins', field comments.
   */
  export type ICreate = {
    /**
     * Admin's unique email address for login. This field must be unique
     * within the todo_list_admins table and is required for identification
     * and authentication.
     *
     * The email is used as the primary credential for admin login and must
     * conform to standard email formatting rules. Uniqueness is enforced at
     * the database level, ensuring no duplicate admin accounts can use the
     * same email address. Examples: admin@example.com,
     * system.owner@mail.com.
     *
     * Refer to Prisma schema field: email in todo_list_admins.
     */
    email: string & tags.Format<"email">;

    /**
     * Plaintext password for the new admin account, submitted for
     * registration only. The system will hash this password according to
     * security best practices before persisting it in the password_hash
     * field in the database.
     *
     * This field is required for initial registration and should never be
     * returned or stored in plaintext. Validation for minimum length and
     * password strength occurs before hashing and storage.
     *
     * Examples: "StrongP@ssword123", "adminPassword!2025".
     *
     * Refer to security best practices in requirements analysis.
     */
    password: string & tags.MinLength<8>;
  };

  /**
   * Authorization response for an authenticated Todo List application
   * administrator. Returned upon successful registration (join), login, or
   * token refresh. Includes the administrator's unique ID and session JWT
   * tokens for continued access.
   *
   * The structure complies with best security practices by not returning any
   * password or sensitive credential fields. Description aligns with business
   * rules for IAuthorized types per requirements analysis.
   */
  export type IAuthorized = {
    /**
     * Unique identifier of the authenticated administrator. This value
     * comes from the id column in todo_list_admins and is assigned at
     * registration.
     *
     * This property is used for identity in authorization, logging, and
     * audit trails. Format: standard RFC 4122 UUID, e.g.,
     * "6b9f1ce0-3622-47c3-8591-061430c4e8f9".
     */
    id: string & tags.Format<"uuid">;

    /**
     * Admin user's unique email address for login and identification.
     *
     * Referenced in the 'email' column of the 'todo_list_admins' table.
     * Each admin must have a unique email address. Changing this value may
     * impact loginability and security logging. Used for authentication and
     * system notifications when necessary.
     */
    email: string & tags.Format<"email">;

    /**
     * Timestamp marking the admin account creation.
     *
     * Matches the 'created_at' field in the 'todo_list_admins' table.
     * Timezone is UTC, formatted according to ISO 8601. Used for auditing,
     * tracking account history, and system monitoring.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp representing the last modification of the administrator
     * record.
     *
     * Matches the 'updated_at' column in the 'todo_list_admins' table (ISO
     * 8601, UTC). Updated whenever significant changes to the admin
     * profile, password, or core metadata are made.
     */
    updated_at: string & tags.Format<"date-time">;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Payload structure for administrator login requests in the Todo List
   * minimal application. Must include the registered email address and the
   * corresponding plaintext password for authentication.
   *
   * No extra properties are included. This structure adheres strictly to
   * schema and security requirements, referencing only the credentials needed
   * for login.
   */
  export type ILogin = {
    /**
     * The admin's unique email address for login. This must correspond to a
     * registered administrator account in todo_list_admins.
     *
     * Validation is enforced for proper email formatting and existence in
     * the database. This is a required property in the login process.
     */
    email: string & tags.Format<"email">;

    /**
     * The plaintext password submitted for authentication. This is verified
     * against the stored credential (password_hash) for the admin account
     * after hashing.
     *
     * Passwords must meet minimum length and strength criteria and are
     * never stored or returned in plaintext. This field is only accepted at
     * login; it is not part of responses.
     *
     * Refer to field-level constraints in business and security
     * requirements.
     */
    password: string & tags.MinLength<8>;
  };

  /**
   * Payload required for administrator token refresh operations in the
   * minimal Todo List app. Must supply a currently valid refresh token issued
   * for the admin account.
   *
   * No extraneous properties are accepted; the structure is secured and
   * minimal, mapped directly to backend session management logic.
   */
  export type IRefresh = {
    /**
     * JWT refresh token required to renew an admin session and obtain new
     * access/refresh tokens. Provided only by the authentication system and
     * expected to match a valid issued token for the admin in question.
     *
     * This property must be non-empty and must conform to the format of
     * tokens issued by the system under previous successful authentication
     * or registration.
     */
    refresh_token: string;
  };

  /**
   * Request object for paginated, sorted administrator list retrieval and
   * searching on '/todoList/admin/admins' API. Used only by admin users for
   * operational, maintenance, or audit purposes.
   *
   * Supports advanced admin search, email filtering, and sorting needs.
   * Matches constraints and capabilities defined in business rules and Prisma
   * schema.
   */
  export type IRequest = {
    /**
     * Page number (starting at 1). Used for administrator listing
     * pagination. Optional. Defaults to 1.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Maximum number of admins returned per page. Pagination support for
     * scalability and performance. Optional. Defaults to 100.
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * Optional email address filter for admin search. Allows partial or
     * case-insensitive matches depending on backend implementation. Used
     * for maintenance, audit, or admin account discovery.
     */
    email?: string | undefined;

    /**
     * Sort field for administrator list. Use 'created_at' for chronological
     * sorting and 'email' for alphabetic presentation. Enum constraint.
     * Optional.
     */
    sort?: "created_at" | "email" | undefined;

    /**
     * Sort order: 'asc' for ascending, 'desc' for descending. Default may
     * be 'desc' for recent-first. Enum constraint. Optional.
     */
    order?: "asc" | "desc" | undefined;
  };

  /**
   * Update DTO for administrator records in the minimal Todo system.
   *
   * Allows modification of certain admin attributes: email and (hashed)
   * password. All fields are optional to allow partial updates. Only
   * system-assigned properties are changeable; id and timestamps are managed
   * by the backend and are immutable in this structure. All modifications are
   * audited in created_at/updated_at timestamps, as defined in the Prisma
   * schema.
   */
  export type IUpdate = {
    /**
     * New email address for the administrator account.
     *
     * Updates the 'email' field in 'todo_list_admins'. Value must be unique
     * and properly formatted (validated as email). Optional in update, but
     * if provided must adhere to all uniqueness and syntax business rules.
     */
    email?: (string & tags.Format<"email">) | undefined;

    /**
     * New password hash for setting or rotating administrator credentials.
     *
     * Corresponds to the 'password_hash' column in 'todo_list_admins'. Must
     * be the result of a secure hashing procedure by the backend. Never
     * plain text. Optional in update, only provided if password is actually
     * changed.
     */
    password_hash?: string | undefined;
  };

  /**
   * Summary (ISummary) DTO for displaying minimal administrator account
   * information, commonly used in paginated or search admin lists. Only
   * essential fields are included (id, email, created_at)—internal fields
   * such as password hash are partially or completely omitted for security.
   * This summary exposes no sensitive credentials or system-only metadata.
   *
   * All properties are direct mappings from the todo_list_admins schema,
   * supporting transparent system management while preserving privacy.
   */
  export type ISummary = {
    /**
     * Unique identifier for the admin record. This value is the primary key
     * for the todo_list_admins table and is assigned automatically at
     * creation. UUID format, never changes after creation.
     *
     * Referenced in administrative audit trails and security logs.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Registered email for the admin account. Must be unique within
     * todo_list_admins and is used for login and identification in all
     * admin operations. Has format and uniqueness enforced through schema.
     */
    email: string;

    /**
     * Timestamp when the admin account was created (UTC ISO 8601). Used for
     * auditing and tracking admin onboarding dates. Sourced from the
     * 'created_at' column of todo_list_admins.
     */
    created_at: string & tags.Format<"date-time">;
  };
}
