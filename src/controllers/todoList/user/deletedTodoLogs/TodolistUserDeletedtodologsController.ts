import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__todoList_user_deletedTodoLogs } from "../../../../providers/patch__todoList_user_deletedTodoLogs";
import { UserAuth } from "../../../../decorators/UserAuth";
import { UserPayload } from "../../../../decorators/payload/UserPayload";
import { get__todoList_user_deletedTodoLogs_$deletedTodoLogId } from "../../../../providers/get__todoList_user_deletedTodoLogs_$deletedTodoLogId";

import { IPageITodoListDeletedTodoLog } from "../../../../api/structures/IPageITodoListDeletedTodoLog";
import { ITodoListDeletedTodoLog } from "../../../../api/structures/ITodoListDeletedTodoLog";

@Controller("/todoList/user/deletedTodoLogs")
export class TodolistUserDeletedtodologsController {
  /**
   * Search and browse user's deleted todo logs with pagination and advanced
   * filters.
   *
   * This operation retrieves a paginated and optionally filtered set of deleted
   * todo audit logs from the todo_list_deleted_todo_logs model for the
   * authenticated user. Business rules enforce that only the requesting user's
   * deleted todos (linked by todo_list_user_id) are visible. Filters may
   * include title, deletion date range, completion status, and other
   * business-relevant fields. Pagination and sorting are supported as per the
   * general audit log browsing needs.
   *
   * Users can utilize this endpoint to audit, review, or validate previous
   * deletion actions, ensuring compliance with transparency and privacy
   * business requirements. Only deleted items still within the system-defined
   * retention window are returned, and attempts to query outside this scope
   * yield empty results. Related operations include retrieving an individual
   * deleted log and normal todo list queries for currently active items.
   *
   * @param connection
   * @param body Search and pagination options for browsing deleted todo logs.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: ITodoListDeletedTodoLog.IRequest,
  ): Promise<IPageITodoListDeletedTodoLog> {
    try {
      return await patch__todoList_user_deletedTodoLogs({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed info for a deleted todo log by its ID, scoped to the current
   * user.
   *
   * Retrieve a single deleted todo log by the specified deletedTodoLogId from
   * the todo_list_deleted_todo_logs model. The operation ensures that the
   * returned audit log entry belongs to the currently authenticated user and is
   * within the allowed retention window for deleted item records.
   *
   * The returned object contains all snapshot fields as of deletion, enabling
   * detailed user history reviews and facilitating audit transparency. An error
   * is returned if the resource is not found, access is denied, or the log has
   * been purged due to expiration (after the retention period). Use this
   * operation for viewing detailed deleted todo data, not for active todo
   * management.
   *
   * @param connection
   * @param deletedTodoLogId The unique identifier of the deleted todo log
   *   record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":deletedTodoLogId")
  public async at(
    @UserAuth()
    user: UserPayload,
    @TypedParam("deletedTodoLogId")
    deletedTodoLogId: string & tags.Format<"uuid">,
  ): Promise<ITodoListDeletedTodoLog> {
    try {
      return await get__todoList_user_deletedTodoLogs_$deletedTodoLogId({
        user,
        deletedTodoLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
