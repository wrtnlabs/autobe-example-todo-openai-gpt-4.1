import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__todoList_user_todos } from "../../../../providers/post__todoList_user_todos";
import { UserAuth } from "../../../../decorators/UserAuth";
import { UserPayload } from "../../../../decorators/payload/UserPayload";
import { patch__todoList_user_todos } from "../../../../providers/patch__todoList_user_todos";
import { get__todoList_user_todos_$todoId } from "../../../../providers/get__todoList_user_todos_$todoId";
import { put__todoList_user_todos_$todoId } from "../../../../providers/put__todoList_user_todos_$todoId";
import { delete__todoList_user_todos_$todoId } from "../../../../providers/delete__todoList_user_todos_$todoId";

import { ITodoListTodo } from "../../../../api/structures/ITodoListTodo";
import { IPageITodoListTodo } from "../../../../api/structures/IPageITodoListTodo";

@Controller("/todoList/user/todos")
export class TodolistUserTodosController {
  /**
   * Create a new todo for the user in todo_list_todos.
   *
   * Create a new todo item for the authenticated user. Requires a title
   * (business-constrained: 1–255 characters, unique per user among incomplete
   * todos), with optional description (up to 1000 characters) and optional due
   * date (future only, strict format).
   *
   * The operation ensures the owning user is always the caller, ignoring or
   * rejecting foreign or forged ownership claims. All necessary business
   * validations (field lengths, unique constraint, per-user active todo limit
   * if enforced by implementation) are performed. Upon success, the newly
   * created todo item is returned in detail, with all persistence-generated
   * fields populated.
   *
   * @param connection
   * @param body Todo creation data: title (required), description, due date,
   *   and optional completion status at creation.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: ITodoListTodo.ICreate,
  ): Promise<ITodoListTodo> {
    try {
      return await post__todoList_user_todos({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Paginated, searchable list of the authenticated user's todos from
   * todo_list_todos.
   *
   * Retrieve a paginated and filtered list of todo items for the authenticated
   * user. This operation queries the todo_list_todos table, strictly limiting
   * results to the caller's own records in compliance with the application's
   * ownership enforcement policies. Multiple search capabilities are
   * available—sort by due date or creation time, filter by completion status
   * (complete, incomplete, all), and search titles via case-insensitive
   * substring matching.
   *
   * Pagination parameters control page size and number, with defaults and
   * limits aligning with business rules (e.g., 20 items per page, up to 100 per
   * page, reasonable maximums applied). If the authenticated user requests a
   * page beyond available results, an empty result set with bounds information
   * is returned. No data from any other user is ever included.
   *
   * Security is paramount: authorization checks ensure only logged-in users can
   * access this endpoint, and all queries are scope-restricted to the user's
   * own todos by user ID. The response contains todo item summaries suitable
   * for list display, with sufficient detail for client navigation and further
   * item interaction.
   *
   * @param connection
   * @param body Filter, pagination, status, search, and sorting parameters for
   *   todo list retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: ITodoListTodo.IRequest,
  ): Promise<IPageITodoListTodo.ISummary> {
    try {
      return await patch__todoList_user_todos({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details for a single todo owned by the user from todo_list_todos.
   *
   * Retrieve a single todo's full detail for the authenticated user. This
   * operation fetches a todo item by its unique identifier (todoId), ensuring
   * it belongs to the caller according to privacy compliance and ownership
   * enforcement. All detail fields are included in the response (title,
   * optional description, due date, completion status and timestamp, creation
   * and update times).
   *
   * Strict authorization and permission checks mean that only the owner can
   * view this resource; queries for nonexistent or non-owned todoId result in a
   * not-found or permission-denied error. Implementation must not expose
   * whether a missing todoId ever existed if not owned by the current user.
   *
   * Response data is suitable for detailed todo views, edit forms, or item
   * inspection in client UIs.
   *
   * @param connection
   * @param todoId Unique identifier of the todo item to retrieve. Must be a
   *   valid UUID string.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":todoId")
  public async at(
    @UserAuth()
    user: UserPayload,
    @TypedParam("todoId")
    todoId: string & tags.Format<"uuid">,
  ): Promise<ITodoListTodo> {
    try {
      return await get__todoList_user_todos_$todoId({
        user,
        todoId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a user-owned todo by todoId in todo_list_todos.
   *
   * Update an existing todo item, modifying fields such as title (with per-user
   * incomplete uniqueness enforced, 1–255 chars), description (max 1000), due
   * date (must be valid/future), is_completed status, and completed_at where
   * appropriate. All ownership and existence rules apply: only allows
   * modification if the todo exists and belongs to the caller.
   *
   * Timestamps for last update are strictly set by the service. Any attempted
   * modification of created_at/user_id is ignored and treated as invalid.
   * Violations of validation rules or business invariants (such as duplicate
   * incomplete-title) result in error responses.
   *
   * @param connection
   * @param todoId Unique identifier of the todo to update. Must be a valid UUID
   *   string.
   * @param body Fields to update on the todo (title, description, status, due
   *   date).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":todoId")
  public async update(
    @UserAuth()
    user: UserPayload,
    @TypedParam("todoId")
    todoId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITodoListTodo.IUpdate,
  ): Promise<ITodoListTodo> {
    try {
      return await put__todoList_user_todos_$todoId({
        user,
        todoId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently remove a todo item by todoId from todo_list_todos (hard
   * delete).
   *
   * Permanently delete a todo the user owns. This is a destructive,
   * non-reversible removal from todo_list_todos. Before performing the delete,
   * ensures that the specified todoId exists and belongs to the calling user—no
   * cross-user or foreign deletes allowed. No 'soft delete' or logical deletion
   * marker is set: once removed, the todo disappears from active lists.
   * However, a separate append-only deletion audit log
   * (todo_list_deleted_todo_logs) records the event for business compliance and
   * transient self-service history.
   *
   * Attempts to delete a non-existent or non-owned todo return a generic
   * not-found error (do not reveal details about resources not owned by the
   * caller). No response body is required on success.
   *
   * @param connection
   * @param todoId Unique identifier of the todo to be deleted. Must be a valid
   *   UUID string.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":todoId")
  public async erase(
    @UserAuth()
    user: UserPayload,
    @TypedParam("todoId")
    todoId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__todoList_user_todos_$todoId({
        user,
        todoId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
