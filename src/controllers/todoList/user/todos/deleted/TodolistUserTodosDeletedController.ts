import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__todoList_user_todos_deleted } from "../../../../../providers/patch__todoList_user_todos_deleted";
import { UserAuth } from "../../../../../decorators/UserAuth";
import { UserPayload } from "../../../../../decorators/payload/UserPayload";
import { get__todoList_user_todos_deleted_$deletedTodoLogId } from "../../../../../providers/get__todoList_user_todos_deleted_$deletedTodoLogId";

import { IPageITodoListDeletedTodoLog } from "../../../../../api/structures/IPageITodoListDeletedTodoLog";
import { ITodoListDeletedTodoLog } from "../../../../../api/structures/ITodoListDeletedTodoLog";

@Controller("/todoList/user/todos/deleted")
export class TodolistUserTodosDeletedController {
  /**
   * Paginated, filtered list of the user's deleted todos within audit retention
   * window.
   *
   * This operation retrieves a paginated list of deleted todos for the
   * currently authenticated user from the todo_list_deleted_todo_logs table. It
   * allows users to review deleted todos for self-auditing or potential
   * recovery actions within the allowed 30-day audit window after deletion.
   * Each log entry preserves a snapshot of business-relevant information at
   * deletion time (title, description, due date, completion status, etc.).
   *
   * All results are strictly scoped to the requesting user as enforced by the
   * todo_list_user_id foreign key. The operation supports advanced search,
   * time-range filtering (e.g., recently deleted items), and sorting by
   * deletion date or original creation time. For privacy and compliance, only
   * the authenticated user's deleted todos are visible, and records older than
   * the retention period are automatically purged from results. Errors are
   * returned if invalid filters are supplied or pagination is out of bounds.
   *
   * This API ensures compliance with business rules regarding user
   * auditability, strict ownership isolation, and secure history browsing.
   * Related API operations include restoration (if supported), permanent
   * erasure after retention, and normal todo list retrieval for active items.
   *
   * @param connection
   * @param body Search, filter, and pagination criteria for retrieving deleted
   *   todos.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: ITodoListDeletedTodoLog.IRequest,
  ): Promise<IPageITodoListDeletedTodoLog> {
    try {
      return await patch__todoList_user_todos_deleted({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single deleted todo record by ID for the authenticated user.
   *
   * Fetch a single deleted todo log from todo_list_deleted_todo_logs based on
   * the specified deletedTodoLogId path parameter. The returned record contains
   * all relevant business fields as preserved at the time of deletion (title,
   * description, status, timestamps, etc.), supporting user-facing audit and
   * history capabilities.
   *
   * Access control is enforced by checking that the log belongs to the
   * currently authenticated user. If the deletedTodoLogId is not found, access
   * is outside the audit retention window, or the user does not own the log, a
   * not-found error is returned. This endpoint is intended for audit history
   * review, compliance support, or detailed inspection by users of previously
   * deleted items.
   *
   * @param connection
   * @param deletedTodoLogId Unique identifier of the deleted todo log to
   *   return.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":deletedTodoLogId")
  public async at(
    @UserAuth()
    user: UserPayload,
    @TypedParam("deletedTodoLogId")
    deletedTodoLogId: string & tags.Format<"uuid">,
  ): Promise<ITodoListDeletedTodoLog> {
    try {
      return await get__todoList_user_todos_deleted_$deletedTodoLogId({
        user,
        deletedTodoLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
