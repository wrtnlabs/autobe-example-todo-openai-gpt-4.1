import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtodoListAdminAuditLogs } from "../../../../providers/patchtodoListAdminAuditLogs";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { gettodoListAdminAuditLogsAuditLogId } from "../../../../providers/gettodoListAdminAuditLogsAuditLogId";

import { IPageITodoListAuditLog } from "../../../../api/structures/IPageITodoListAuditLog";
import { ITodoListAuditLog } from "../../../../api/structures/ITodoListAuditLog";

@Controller("/todoList/admin/auditLogs")
export class TodolistAdminAuditlogsController {
  /**
   * Retrieve a filtered, paginated list of audit log entries from
   * todo_list_audit_logs (admin only).
   *
   * The audit log list endpoint provides administrative users with advanced
   * search capabilities for monitoring privileged actions on user todos. Admins
   * can filter logs by action type (view or delete), target user or todo,
   * responsible admin, time range, or rationale content. The endpoint supports
   * pagination to efficiently browse large audit trails and includes sorting by
   * timestamp or other relevant fields.
   *
   * Log records returned by this operation include full audit details—admin
   * identity, user and todo IDs, action performed, rationale, and
   * timestamp—enabling forensic analysis and compliance auditing. The response
   * structure aligns with the todo_list_audit_logs schema, ensuring accurate
   * mapping of data fields.
   *
   * Security is paramount: only users with the admin role are authorized to use
   * this endpoint. All access is itself subject to audit logging as required by
   * organizational policy. No unauthorized user data is returned to non-admins.
   * System-enforced rate limiting and sensitive data protection apply.
   *
   * Failure scenarios include improper use by non-admins or invalid filter
   * criteria; informative error messages are returned to guide corrective
   * action.
   *
   * @param connection
   * @param body Request parameters for audit log filtering, including
   *   pagination and search options.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ITodoListAuditLog.IRequest,
  ): Promise<IPageITodoListAuditLog.ISummary> {
    try {
      return await patchtodoListAdminAuditLogs({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a specific audit log entry from todo_list_audit_logs
   * (admin only).
   *
   * This endpoint allows an admin to view a single, complete audit log entry
   * identified by its UUID in the todo_list_audit_logs table. The returned
   * details provide full visibility into the original admin action (view or
   * delete) upon a user's todo, including all metadata required for compliance,
   * root cause analysis, or resolving operational issues.
   *
   * The operation enforces that only users with the admin role have access.
   * Attempts to view a nonexistent or unauthorized audit log record result in
   * an error with an informative business-level message. Each access to a
   * detailed audit record may itself be logged for traceability, supporting the
   * system's comprehensive oversight requirements.
   *
   * Returned data includes referencing fields for admin, affected user, todo
   * ID, action type, rationale, and audit timestamp, with structure faithfully
   * matching the todo_list_audit_logs schema.
   *
   * @param connection
   * @param auditLogId The unique identifier (UUID) of the audit log entry to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":auditLogId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("auditLogId")
    auditLogId: string & tags.Format<"uuid">,
  ): Promise<ITodoListAuditLog> {
    try {
      return await gettodoListAdminAuditLogsAuditLogId({
        admin,
        auditLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
