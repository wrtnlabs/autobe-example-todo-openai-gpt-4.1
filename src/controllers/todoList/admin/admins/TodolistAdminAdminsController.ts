import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchTodoListAdminAdmins } from "../../../../providers/patchTodoListAdminAdmins";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getTodoListAdminAdminsAdminId } from "../../../../providers/getTodoListAdminAdminsAdminId";
import { putTodoListAdminAdminsAdminId } from "../../../../providers/putTodoListAdminAdminsAdminId";
import { deleteTodoListAdminAdminsAdminId } from "../../../../providers/deleteTodoListAdminAdminsAdminId";

import { IPageITodoListAdmin } from "../../../../api/structures/IPageITodoListAdmin";
import { ITodoListAdmin } from "../../../../api/structures/ITodoListAdmin";

@Controller("/todoList/admin/admins")
export class TodolistAdminAdminsController {
  /**
   * Search and retrieve a paginated list of administrator accounts from
   * todo_list_admins.
   *
   * This API operation returns a filtered and paginated list of administrator
   * accounts registered in the system. It operates over the todo_list_admins
   * table, providing system-wide visibility for superusers and allowing easy
   * search, filtering, and sorting based on email or the account creation
   * date.
   *
   * Authorization is strictly required: only users with the admin role may
   * access this endpoint, as regular users are never permitted to view or
   * manage administrator information. The returned data excludes sensitive
   * fields such as password hashes, focusing only on operational metadata.
   *
   * The operation is essential for maintenance, emergency support, and security
   * audits. It is typically paired with endpoints for viewing the details of a
   * specific administrator or for performing create, update, or delete actions.
   * Error scenarios include forbidden access for non-admins, validation
   * failures on filter parameters, and unexpected server errors.
   *
   * @param connection
   * @param body Filtering and pagination criteria for listing administrators.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ITodoListAdmin.IRequest,
  ): Promise<IPageITodoListAdmin.ISummary> {
    try {
      return await patchTodoListAdminAdmins({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information for a specific administrator by adminId from
   * todo_list_admins.
   *
   * This API operation provides authorized admin users with the full metadata
   * profile of a particular administrator account, uniquely identified by
   * adminId in the todo_list_admins table. It is used for viewing core
   * attributes such as email, timestamps, and other audit-relevant fields,
   * while ensuring that password hashes and other sensitive data remain
   * undisclosed.
   *
   * Access to this endpoint is restricted strictly to users with admin
   * privileges. Security and privacy are enforced at the endpoint and service
   * layer. The information supplied helps with system maintenance, user audits,
   * or when troubleshooting admin privileges and actions.
   *
   * Related operations include listing all admins and enabling update or delete
   * actions by adminId. Error responses include forbidden access for
   * non-admins, not found for missing adminId, and resource access violations
   * for unauthorized requests.
   *
   * @param connection
   * @param adminId The unique identifier (UUID) of the administrator to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":adminId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminId")
    adminId: string & tags.Format<"uuid">,
  ): Promise<ITodoListAdmin> {
    try {
      return await getTodoListAdminAdminsAdminId({
        admin,
        adminId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update administrator profile details for a target admin, identified by
   * adminId.
   *
   * This API endpoint allows authorized admin users to update an administrator
   * record in the todo_list_admins table, selected by the adminId parameter.
   * Supported fields for update typically include the admin's email address and
   * a new password hash, as well as tracking changes in the updated_at
   * timestamp for audit.
   *
   * Strict access controls are in effect: only users with admin privileges may
   * invoke this operation. Changing adminId is not permitted; all updates are
   * constrained to permitted fields. The response supplies the new metadata
   * profile after updating.
   *
   * Related endpoints include detail retrieval, list, and delete actions.
   * Errors include forbidden for non-admins, not found for invalid adminId, and
   * validation errors on input data.
   *
   * @param connection
   * @param adminId The unique identifier (UUID) of the administrator to update.
   * @param body New metadata for the administrator, such as email or password
   *   hash, to apply to the target adminId.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":adminId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminId")
    adminId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITodoListAdmin.IUpdate,
  ): Promise<ITodoListAdmin> {
    try {
      return await putTodoListAdminAdminsAdminId({
        admin,
        adminId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a specific administrator account, identified by adminId (hard
   * delete) from todo_list_admins.
   *
   * This API operation allows an authorized admin to permanently remove an
   * administrator account from the todo_list_admins table, selecting the record
   * by adminId. The deletion is irreversible: the record is physically removed,
   * along with the associated email and password data. As there is no
   * deleted_at or similar soft delete flag in the schema, this is a hard delete
   * operation.
   *
   * Access is strictly limited to admin users, and this action should only be
   * performed with care, typically when an admin is leaving the organization or
   * privileges must be revoked. The operation will log the deletion for audit
   * purposes and enforce all necessary security checks.
   *
   * Potential errors include forbidden access for non-admins, not found for
   * invalid adminId, and resource conflicts (e.g., if last remaining admin;
   * business logic must ensure at least one admin remains).
   *
   * @param connection
   * @param adminId The unique identifier (UUID) of the administrator to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":adminId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminId")
    adminId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteTodoListAdminAdminsAdminId({
        admin,
        adminId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
