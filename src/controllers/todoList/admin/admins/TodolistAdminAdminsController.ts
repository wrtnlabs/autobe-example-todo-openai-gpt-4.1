import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtodoListAdminAdmins } from "../../../../providers/patchtodoListAdminAdmins";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { gettodoListAdminAdminsAdminId } from "../../../../providers/gettodoListAdminAdminsAdminId";
import { puttodoListAdminAdminsAdminId } from "../../../../providers/puttodoListAdminAdminsAdminId";
import { deletetodoListAdminAdminsAdminId } from "../../../../providers/deletetodoListAdminAdminsAdminId";

import { IPageITodoListAdmin } from "../../../../api/structures/IPageITodoListAdmin";
import { ITodoListAdmin } from "../../../../api/structures/ITodoListAdmin";

@Controller("/todoList/admin/admins")
export class TodolistAdminAdminsController {
  /**
   * List/search all Todo List administrator accounts with filtering and
   * pagination (table: todo_list_admins).
   *
   * This API operation enables the searching and listing of administrator
   * accounts registered in the Todo List system. It provides a secure method to
   * retrieve admin details, supporting filters such as partial email or name
   * matches, privilege level, and account status (e.g., active, suspended).
   * Returned results include all fields from the todo_list_admins Prisma table
   * except sensitive password hashes and soft-deleted accounts (deleted_at is
   * null).
   *
   * The operation is only accessible to authenticated admins with adequate
   * roles, ensuring that sensitive admin data is not exposed to regular users.
   * Results are sorted in descending order of creation time by default, but
   * sorting or pagination options can be specified in the request. This is
   * typically used in system admin dashboards for oversight, onboarding, or
   * compliance checks.
   *
   * Appropriate business validation is applied to prevent excessive query size
   * or abuse. Audit logs may be generated for listing large admin datasets. The
   * response does not include authentication secrets or operational logs
   * unrelated to account registry.
   *
   * @param connection
   * @param body Search and pagination parameters for admin account filtering
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ITodoListAdmin.IRequest,
  ): Promise<IPageITodoListAdmin.ISummary> {
    try {
      return await patchtodoListAdminAdmins({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific Todo List administrator
   * (table: todo_list_admins).
   *
   * This API endpoint returns the full detail of an administrator account
   * specified by the adminId path parameter. It pulls all non-sensitive fields
   * from the referenced todo_list_admins schema table, supporting
   * administrative review or management.
   *
   * The endpoint requires the caller to be authenticated as an admin. Sensitive
   * authentication data such as password_hash are excluded from the returned
   * object. Returned fields include name, email, status, privilege_level,
   * avatar_uri, timestamp data (created_at, updated_at, last_login_at,
   * last_admin_action_at), and account state.
   *
   * Security enforcement is strict to ensure only admins can access other admin
   * data. Audit logging of access can be implemented in actual business logic
   * to comply with operational policy.
   *
   * @param connection
   * @param adminId The unique identifier (UUID) of the target administrator
   *   account.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":adminId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminId")
    adminId: string & tags.Format<"uuid">,
  ): Promise<ITodoListAdmin> {
    try {
      return await gettodoListAdminAdminsAdminId({
        admin,
        adminId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update the profile or status of a specific administrator account (table:
   * todo_list_admins).
   *
   * This endpoint enables an authenticated admin to update the details of
   * another admin account, referenced by the adminId path parameter. Fields
   * eligible for update include name, avatar_uri, status, privilege_level, and
   * account state (active/suspended/locked), but not authentication secrets or
   * audit history. The operation validates all inputs according to business
   * rules, with server-side enforcement of email uniqueness and privilege
   * change constraints.
   *
   * Password resets or credential changes must be performed via separate
   * dedicated API endpoints for security. The operation is logged as an
   * administrative action, and only fields defined in ITodoListAdmin.IUpdate
   * may be altered by this endpoint. On success, the updated admin account
   * object is returned.
   *
   * @param connection
   * @param adminId The unique identifier (UUID) of the target administrator
   *   account to update.
   * @param body Updated administrator account profile/status information
   *   (excluding password hash)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":adminId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminId")
    adminId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITodoListAdmin.IUpdate,
  ): Promise<ITodoListAdmin> {
    try {
      return await puttodoListAdminAdminsAdminId({
        admin,
        adminId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete an administrator account (table: todo_list_admins, hard
   * delete).
   *
   * Invoking this endpoint causes the permanent deletion (hard delete) of the
   * administrator account identified by the adminId path parameter. The
   * deletion action removes the todo_list_admins row and all associated
   * relationships, except where foreign key constraints enforce cascading or
   * retention rules defined by business logic.
   *
   * Access to this operation is strictly limited to admin users, reflecting the
   * seriousness of deleting privileged accounts. Deletion triggers audit
   * logging for compliance, and the operation is irreversibleâ€”deleted admin
   * records cannot be restored by normal means. Errors are returned if the
   * target admin does not exist or has already been deleted via soft delete
   * (deleted_at is non-null).
   *
   * Business logic may require additional administrative approval or
   * confirmation for high-privilege removals. The endpoint does not return a
   * response body but will signal completion or failure via standard HTTP
   * status codes.
   *
   * @param connection
   * @param adminId The unique identifier (UUID) of the administrator account to
   *   delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":adminId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("adminId")
    adminId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetodoListAdminAdminsAdminId({
        admin,
        adminId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
