import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchTodoListAdminUsers } from "../../../../providers/patchTodoListAdminUsers";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { getTodoListAdminUsersUserId } from "../../../../providers/getTodoListAdminUsersUserId";
import { putTodoListAdminUsersUserId } from "../../../../providers/putTodoListAdminUsersUserId";
import { deleteTodoListAdminUsersUserId } from "../../../../providers/deleteTodoListAdminUsersUserId";

import { IPageITodoListUser } from "../../../../api/structures/IPageITodoListUser";
import { ITodoListUser } from "../../../../api/structures/ITodoListUser";

@Controller("/todoList/admin/users")
export class TodolistAdminUsersController {
  /**
   * List all registered users with paging and search (admin only).
   *
   * Retrieve a paginated and optionally filtered list of all registered user
   * accounts in the minimal Todo List application. This endpoint allows
   * administrators to search by email and supports pagination for large numbers
   * of users, leveraging the todo_list_users table as defined in the schema.
   *
   * The endpoint enforces access restrictions: only authenticated
   * administrators can use this operation. Regular users are forbidden from
   * accessing this API. Results include all standard fields (user id, email,
   * timestamps) but do not contain password hashes or other sensitive
   * information.
   *
   * Common use cases include system administration, maintenance, and audit
   * reviews by privileged staff. Related endpoints manage creation, update, or
   * deletion of users and their associated data.
   *
   * @param connection
   * @param body Request parameters for user search, including email filter and
   *   pagination controls
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ITodoListUser.IRequest,
  ): Promise<IPageITodoListUser.ISummary> {
    try {
      return await patchTodoListAdminUsers({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details for a specific user account (admin only).
   *
   * Retrieve full information about a single user registered in the minimal
   * Todo List application, using the provided userId as a lookup. This endpoint
   * accesses the todo_list_users table and is intended strictly for
   * administrative use, enforcing security via authentication and role checks.
   *
   * Returned data includes the user's id, email, account creation and update
   * timestamps, and does not include password hashes. Only administrators can
   * access this endpoint for any userId; regular users may not use this
   * endpoint.
   *
   * This API complements other endpoints for user creation, update, and
   * deletion, allowing administrators to inspect account-specific data as
   * needed for auditing or maintenance.
   *
   * @param connection
   * @param userId Unique identifier for the user to be retrieved
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":userId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<ITodoListUser> {
    try {
      return await getTodoListAdminUsersUserId({
        admin,
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific user's information by ID (admin only).
   *
   * Update the properties (e.g., email, password hash) of a registered user in
   * the minimal Todo List app, targeting the user account identified by userId.
   * This operation modifies the todo_list_users table, enforcing all business
   * rules for uniqueness, permissions, and field validation.
   *
   * Only administrators may perform this operation, and all field updates must
   * comply with data constraints: unique, properly formatted email; hashed
   * password; and required timestamps. Upon successful update, updated_at is
   * set to the current timestamp. Sensitive operations are logged for audit
   * purposes.
   *
   * This API is designed for rare administrative corrections, security
   * responses, or manual account management; regular users cannot update other
   * user records via this endpoint.
   *
   * @param connection
   * @param userId Unique identifier of the user to be updated
   * @param body Object containing updatable user fields (such as email or
   *   password hash)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":userId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITodoListUser.IUpdate,
  ): Promise<ITodoListUser> {
    try {
      return await putTodoListAdminUsersUserId({
        admin,
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a user and cascade-remove all their todos (admin only).
   *
   * Permanently remove a user account, including all owned todo tasks, from the
   * system. This operation acts on the todo_list_users table, using the
   * provided userId as the target. It enforces security, allowing only
   * authenticated administrators to invoke it. The delete is physically
   * executed (hard delete), severing all related data rather than simply
   * flagging records as deleted.
   *
   * Upon successful completion, the user account and all todos connected
   * through the foreign key to todo_list_todos are erased. This supports
   * privacy mandates and prevents orphaned or leaked records. No response body
   * is returned if successful; errors are signaled with appropriate codes and
   * messages in case of permission, referential, or internal failures.
   *
   * This endpoint is to be used by administrators in the rare case of account
   * removal due to user request, policy violation, or data privacy obligations.
   * Irrecoverable data loss is a consequence, so extra audit logging or
   * confirmation mechanisms should be employed by clients.
   *
   * @param connection
   * @param userId Unique identifier of the user to be deleted
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":userId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteTodoListAdminUsersUserId({
        admin,
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
