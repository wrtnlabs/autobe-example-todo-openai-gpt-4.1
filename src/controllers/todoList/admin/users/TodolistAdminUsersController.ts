import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patchtodoListAdminUsers } from "../../../../providers/patchtodoListAdminUsers";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { gettodoListAdminUsersUserId } from "../../../../providers/gettodoListAdminUsersUserId";
import { puttodoListAdminUsersUserId } from "../../../../providers/puttodoListAdminUsersUserId";
import { deletetodoListAdminUsersUserId } from "../../../../providers/deletetodoListAdminUsersUserId";

import { IPageITodoListUser } from "../../../../api/structures/IPageITodoListUser";
import { ITodoListUser } from "../../../../api/structures/ITodoListUser";

@Controller("/todoList/admin/users")
export class TodolistAdminUsersController {
  /**
   * Advanced search and pagination of all user accounts (todo_list_users table)
   * for administrators.
   *
   * This PATCH /users operation lets admin users search, filter, and page
   * through the entire set of registered user accounts. Common use cases
   * include support intervention, compliance review, and operational
   * monitoring. It incorporates fields such as user ID, email, display name,
   * account status, last login time, and creation date. No password or
   * sensitive token information is ever included in responses.
   *
   * Security is a priority: only authenticated users with the 'admin' role can
   * invoke this endpoint. All search and pagination inputs are validated
   * against business rules to prevent unauthorized enumeration or injection.
   * The underlying implementation conforms to the unique and indexed
   * constraints defined in the schema. System administrators should log access
   * to this endpoint for audit purposes.
   *
   * Relevant Prisma schema: todo_list_users. This operation supports business
   * reporting, account management, and acts as an entry point to further
   * user-specific admin actions.
   *
   * @param connection
   * @param body Filter conditions, search queries, and pagination/sorting
   *   parameters for admin user search.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ITodoListUser.IRequest,
  ): Promise<IPageITodoListUser.ISummary> {
    try {
      return await patchtodoListAdminUsers({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific user's detailed profile (todo_list_users table) using
   * their unique userId.
   *
   * This GET /users/{userId} operation allows an admin user to access full
   * details of any user account for business or support needs. The returned
   * data includes all core fields: id, email, name, avatar_uri, status,
   * last_login_at, created_at, updated_at, and soft-deletion state
   * (deleted_at), excluding any sensitive password_hash. This operation is
   * essential for compliance reviews, user support, and operational
   * monitoring.
   *
   * Authorization is strictly enforced: only 'admin' role users are permitted.
   * Each access is logged as per compliance and audit policy. If the userId
   * parameter does not correspond to an existing user, the operation returns a
   * 'not found' error. Input validation ensures the userId is a proper UUID
   * before proceeding. This operation supports the overall goal of accountable
   * and transparent user management.
   *
   * @param connection
   * @param userId Unique identifier (UUID) of the user account to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":userId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<ITodoListUser> {
    try {
      return await gettodoListAdminUsersUserId({
        admin,
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update fields of a specific user account (todo_list_users) by admin,
   * including profile and status changes.
   *
   * This PUT /users/{userId} endpoint lets admin users update details in any
   * user account. Allowed fields include display name, status, avatar_uri, and
   * optionally email or password_hash for support scenarios (e.g., account
   * recovery). Updates to the email must maintain unique index constraints and
   * comply with validation established by the business. Any password_hash
   * provided must be securely pre-hashed on the client side.
   *
   * Only administrators are authorized to use this; audit logs record every
   * modification for compliance. On success, the updated user record (excluding
   * credential hash) is returned, reflecting all applied changes. If the
   * provided userId is invalid or does not exist, a clear error is returned.
   * Business rules ensure that soft-deleted users are not updated unless
   * explicitly restored. This operation supports robust account lifecycle
   * management in accordance with privacy and compliance objectives.
   *
   * @param connection
   * @param userId Unique identifier (UUID) of the user account to update.
   * @param body Fields and their new values for the user account update. Must
   *   follow all business validation rules.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":userId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITodoListUser.IUpdate,
  ): Promise<ITodoListUser> {
    try {
      return await puttodoListAdminUsersUserId({
        admin,
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete a user account (todo_list_users) by setting deleted_at; admin
   * only.
   *
   * This DELETE /users/{userId} endpoint lets administrators mark a user
   * account as deleted by populating the deleted_at field (soft delete),
   * following the schema's soft deletion pattern. Such accounts are removed
   * from active listings but remain in the database for retention and
   * compliance. This operation is strictly permitted only for admin users,
   * triggering an audit log entry for every deletion.
   *
   * Input validation guarantees the userId is a valid UUID and that the account
   * exists. Attempts to delete non-existent or already-deleted users return a
   * clear error. Related todos become orphaned or are handled based on
   * cascading rules. The operation is irreversibleâ€”no recovery possible unless
   * a dedicated restore function is created. This endpoint supports business
   * needs for privacy, compliance, right-to-be-forgotten scenarios, and account
   * lifecycle control.
   *
   * @param connection
   * @param userId Unique identifier (UUID) of the user account to soft-delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":userId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deletetodoListAdminUsersUserId({
        admin,
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
