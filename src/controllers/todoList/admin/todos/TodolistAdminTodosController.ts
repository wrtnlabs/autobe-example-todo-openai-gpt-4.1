import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { postTodoListAdminTodos } from "../../../../providers/postTodoListAdminTodos";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patchTodoListAdminTodos } from "../../../../providers/patchTodoListAdminTodos";
import { getTodoListAdminTodosTodoId } from "../../../../providers/getTodoListAdminTodosTodoId";
import { putTodoListAdminTodosTodoId } from "../../../../providers/putTodoListAdminTodosTodoId";
import { deleteTodoListAdminTodosTodoId } from "../../../../providers/deleteTodoListAdminTodosTodoId";

import { ITodoListTodo } from "../../../../api/structures/ITodoListTodo";
import { IPageITodoListTodo } from "../../../../api/structures/IPageITodoListTodo";

@Controller("/todoList/admin/todos")
export class TodolistAdminTodosController {
  /**
   * Create a new Todo item for the current authenticated user.
   *
   * Create a new Todo item for the authenticated user. The title field is
   * mandatory, must be trimmed, non-empty, and no longer than 100 characters.
   * On creation, the item is marked incomplete, and all timestamps (creation,
   * update) are set to the current time. Ownership association is automatic,
   * ensuring users cannot create Todos for others; admin users can also create
   * Todos for their own admin account.
   *
   * Any business-rule or validation violations, such as duplicate titles (if
   * such logic is enforced in application), title length issues, or
   * whitespace-only titles, are reported with clear error messages. Only fields
   * defined in the minimal schema (id, title, is_completed, timestamps, user
   * ownership) are processed. The operation does not support setting completed
   * or deleted fields upon creation; these fields are managed by update
   * endpoints or internal logic.
   *
   * @param connection
   * @param body Data required for creating a new Todo item: minimal, only title
   *   required.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ITodoListTodo.ICreate,
  ): Promise<ITodoListTodo> {
    try {
      return await postTodoListAdminTodos({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve a filtered, paginated list of Todo items.
   *
   * Retrieve a filtered, paginated list of Todo items using advanced search
   * capabilities. This operation is available to authenticated users wishing to
   * view their own todos, or to administrators wishing to view all users'
   * todos. The returned data is sorted in reverse-chronological order by
   * creation date, as described in the requirements.
   *
   * Authorization and role validation are enforced so that standard users can
   * access only their own todos, while admins can access the entire dataset.
   * Text search for task titles and filtering by completion status are included
   * based on application-level logic. Validation ensures users may not access
   * data outside their permission scope.
   *
   * Results are paginated for efficiency and may be further sorted or filtered
   * as required by client use cases. The type definitions for both the request
   * and response DTOs are based directly on the minimal todo_list_todos schema
   * structure, including PK, title, completion status, timestamps, and
   * ownership references (for admin views).
   *
   * @param connection
   * @param body Filter, search, and pagination options for retrieving Todo
   *   items.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ITodoListTodo.IRequest,
  ): Promise<IPageITodoListTodo.ISummary> {
    try {
      return await patchTodoListAdminTodos({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve the details of a specific Todo item by ID.
   *
   * Retrieve the details of a specific Todo item given its unique identifier.
   * This operation enforces security by confirming that the requester is either
   * the owner of the Todo (standard user) or has administrative privileges. The
   * detailed response includes all relevant schema fields: id, belonged user
   * id, title, completion status, creation timestamp, last updated timestamp,
   * completion timestamp, and deleted timestamp (for soft-deleted items).
   *
   * If the Todo is not found or the requesting user lacks permission, the
   * system returns an appropriate error. This function is essential to enable
   * clients to display or further manipulate a single Todo item in detail. Any
   * fields not present in the minimal schema are excluded from the response.
   *
   * @param connection
   * @param todoId Unique identifier for the target Todo item.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":todoId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("todoId")
    todoId: string & tags.Format<"uuid">,
  ): Promise<ITodoListTodo> {
    try {
      return await getTodoListAdminTodosTodoId({
        admin,
        todoId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a specific Todo itemâ€™s title or completion status.
   *
   * Update the details of an existing Todo item, as specified by its UUID. The
   * operation enforces strict validation for title updates: the title must be
   * non-empty, without leading or trailing whitespace, and within the
   * 100-character schema constraint. The operation supports updating the
   * is_completed flag, managing the completed_at timestamp accordingly: if a
   * Todo is marked complete, completed_at is set; if marked as incomplete,
   * completed_at is cleared.
   *
   * Only users who own the Todo can update it, except for admin users who may
   * update any item. All changes are subject to full field validation as
   * specified in the business rules. The updated Todo is returned in the
   * response. If permission is denied, or if the item does not exist, the
   * operation returns a clear error.
   *
   * @param connection
   * @param todoId Unique identifier for the Todo item to update.
   * @param body New values for the Todo's fields: title and/or completion
   *   status.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":todoId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("todoId")
    todoId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITodoListTodo.IUpdate,
  ): Promise<ITodoListTodo> {
    try {
      return await putTodoListAdminTodosTodoId({
        admin,
        todoId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a Todo task from the todo_list_todos table by its ID.
   *
   * This API operation deletes a specific Todo task from the todo_list_todos
   * table. Only authenticated users can invoke this endpoint, and business
   * logic must ensure either that the requester is the owner of the todo or has
   * admin privileges. If the user is not the owner and is not an administrator,
   * the operation is denied.
   *
   * The operation takes the todoId as a path parameter. The todoId must be a
   * valid UUID corresponding to an existing Todo task. If no such Todo exists,
   * the service should return an error or not-found status. Upon successful
   * deletion, the Todo task is permanently removed from the database and cannot
   * be recovered via standard means. The operation does not return a response
   * body; a successful status code confirms deletion.
   *
   * The todo_list_todos table defines the association between Todo tasks and
   * users. Owning users are identified by the todo_list_user_id foreign key.
   * The deleted_at column exists for potential future extensibility regarding
   * soft deletes, but this operation performs a true hard delete, erasing both
   * data and all related links. Admin users may invoke this operation on any
   * todo, and all permission management should be implemented in
   * business/service logic.
   *
   * @param connection
   * @param todoId Unique identifier of the Todo task to be deleted (UUID
   *   format).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":todoId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("todoId")
    todoId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await deleteTodoListAdminTodosTodoId({
        admin,
        todoId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
