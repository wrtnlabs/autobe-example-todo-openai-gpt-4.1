import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__todoList_admin_todos } from "../../../../providers/post__todoList_admin_todos";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patch__todoList_admin_todos } from "../../../../providers/patch__todoList_admin_todos";
import { get__todoList_admin_todos_$todoId } from "../../../../providers/get__todoList_admin_todos_$todoId";
import { put__todoList_admin_todos_$todoId } from "../../../../providers/put__todoList_admin_todos_$todoId";
import { delete__todoList_admin_todos_$todoId } from "../../../../providers/delete__todoList_admin_todos_$todoId";

import { ITodoListTodos } from "../../../../api/structures/ITodoListTodos";
import { IPageITodoListTodos } from "../../../../api/structures/IPageITodoListTodos";

@Controller("/todoList/admin/todos")
export class TodolistAdminTodosController {
  /**
   * Create a new todo item for the authenticated user in the todo_list_todos
   * table.
   *
   * Allows an authenticated user to create a new todo, setting ownership via
   * their user account (todo_list_user.id). The operation inserts into the
   * todo_list_todos table, requiring a non-empty title (max 255 chars,
   * whitespace-trimmed), optional description (max 2000 chars), and optional
   * due_date (must be today or future, ISO 8601 UTC; past dates are rejected).
   * is_completed defaults to false if unspecified. All other fields
   * (created_at, updated_at) are set automatically by the system.
   *
   * Security and privacy are enforced: users can only create todos for
   * themselves. The system responds with validation errors for missing/invalid
   * title, field lengths, or improper due dates. Returns the full created todo
   * item, including system-generated fields such as id and timestamps.
   *
   * @param connection
   * @param body Fields required to create a new todo item, enforcing business
   *   validation logic.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ITodoListTodos.ICreate,
  ): Promise<ITodoListTodos> {
    try {
      return await post__todoList_admin_todos({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search, filter, and paginate todo items for the authenticated user (or
   * admin for all users) from the todo_list_todos table.
   *
   * This operation returns a filtered, sorted, and paginated list of todo items
   * owned by the authenticated user or by any user if the requesting account
   * has 'admin' privileges. It corresponds to the todo_list_todos table in the
   * Prisma schema and supports searching by title/description, filtering by
   * completion status (is_completed), due date, and custom sorting.
   *
   * Security is enforced such that regular users see only their own todos,
   * while admins may view all todos in the system. Pagination defaults to 20
   * items per page with an upper limit of 100. Sorting by created_at (default),
   * due_date, and is_completed is supported.
   *
   * Request validation includes checking correct data types for filters and
   * ranges (e.g., valid ISO 8601 for due_date). Only fields returned by the
   * Prisma schema are included. Response contains todo item summary fields
   * suitable for listing and identification. Related detail endpoints can be
   * used to fetch full todo data as needed.
   *
   * @param connection
   * @param body Filtering, search, sorting, and pagination parameters for
   *   listing todo items.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: ITodoListTodos.IRequest,
  ): Promise<IPageITodoListTodos.ISummary> {
    try {
      return await patch__todoList_admin_todos({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single todo item by identifier (for owner or admin) from the
   * todo_list_todos table.
   *
   * This operation fetches the complete details of a specific todo item,
   * identified via its unique todoId (UUID primary key, per the Prisma schema).
   * Ownership and permission checks are enforced: regular users may access only
   * their own todos, while admins are authorized to view any todo.
   *
   * Returned fields include: id, todo_list_user_id (owner's id), title,
   * description, due_date, is_completed, created_at, updated_at, and
   * completed_at, all as defined in the todo_list_todos Prisma table. This
   * operation is used in tandem with the list, update, and delete endpoints.
   * Errors occur if the todo does not exist or the user lacks access rights.
   *
   * Security best practices require explicit validation of the todoId and
   * enforcement of privacy boundaries. This endpoint does not expose sensitive
   * user information beyond the todo's owner reference.
   *
   * @param connection
   * @param todoId The unique identifier of the todo item to retrieve (UUID, per
   *   todo_list_todos Prisma schema).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":todoId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("todoId")
    todoId: string & tags.Format<"uuid">,
  ): Promise<ITodoListTodos> {
    try {
      return await get__todoList_admin_todos_$todoId({
        admin,
        todoId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a todo item by identifier (allowed to owner or admin) from the
   * todo_list_todos table.
   *
   * Updates a specific todo item (by todoId/UUID) with new values for title,
   * description, due_date, or is_completed. Applies field-level validation
   * rules: title required (max 255 chars, trimmed), description (optional, max
   * 2000 chars), due_date (optional, today/future only, ISO 8601 UTC), and
   * is_completed (boolean). Business logic ensures only the owner or an admin
   * can update the item.
   *
   * On successful update, the operation writes to the todo_list_todos table,
   * updates the updated_at timestamp, and sets or clears completed_at according
   * to the completion status. Returns the full updated todo item. Attempts to
   * edit non-owned or non-existent items result in permission or not found
   * errors.
   *
   * @param connection
   * @param todoId The unique identifier of the todo item to update (UUID, as
   *   defined in todo_list_todos).
   * @param body Field updates for the target todo item, enforcing validation
   *   and business rules.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":todoId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("todoId")
    todoId: string & tags.Format<"uuid">,
    @TypedBody()
    body: ITodoListTodos.IUpdate,
  ): Promise<ITodoListTodos> {
    try {
      return await put__todoList_admin_todos_$todoId({
        admin,
        todoId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a todo item by identifier from the todo_list_todos table
   * (owner or admin only).
   *
   * Removes a todo item from the todo_list_todos table based on the specified
   * todoId (UUID). Strict permission checks are enforced: only the item's owner
   * or admin can delete. This is a hard delete; the record is physically
   * removed from the database with no soft-delete or recovery mechanism in the
   * schema or business rules. Attempts to delete non-existent or non-owned
   * todos result in not found or permission errors.
   *
   * On successful deletion, a confirmation response is provided. All business
   * and schema constraints are enforced, including cascade rules for related
   * data if applicable. The system never exposes sensitive user data in the
   * response.
   *
   * @param connection
   * @param todoId Unique identifier of the todo to be deleted (UUID,
   *   referencing the todo_list_todos primary key).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":todoId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("todoId")
    todoId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__todoList_admin_todos_$todoId({
        admin,
        todoId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
