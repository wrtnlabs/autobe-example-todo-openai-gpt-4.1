import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { post__auth_user_request_password_reset } from "../../../../providers/post__auth_user_request_password_reset";

import { ITodoListUser } from "../../../../api/structures/ITodoListUser";

@Controller("/auth/user/request-password-reset")
export class AuthUserRequest_password_resetController {
  /**
   * Request password reset for a 'user' via email (creates/reset token in
   * todo_list_password_reset_tokens table).
   *
   * This endpoint initiates a password reset flow for accounts in
   * 'todo_list_users'. It accepts an email address, validates existence
   * (without revealing lookup results for privacy), and generates a secure,
   * single-use password reset token persisted to
   * 'todo_list_password_reset_tokens'. If the user account is soft-deleted
   * ('deleted_at' is not null), no token is issued. The reset token is emailed
   * to the user with a limited expiry time per business rules, and no sensitive
   * token data is ever returned in the API response. Rate limiting and audit
   * logging protect against abuse and enable compliance monitoring.
   *
   * No authentication is needed for this operation. Receipt of this reset token
   * by the user (via email) is required for subsequent execution of the
   * password reset. Operation is fully compliant with business security policy,
   * ensuring no information about email existence is leaked to the caller.
   * Password is only changed upon valid completion of the separate
   * reset/confirm endpoint.
   *
   * @param connection
   * @param body Password reset request containing the user's email address.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async requestPasswordReset(
    @TypedBody()
    body: ITodoListUser.IRequestPasswordReset,
  ): Promise<ITodoListUser.IRequestPasswordResetResult> {
    try {
      return await post__auth_user_request_password_reset({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
