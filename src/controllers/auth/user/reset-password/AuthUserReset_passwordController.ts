import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { post__auth_user_reset_password } from "../../../../providers/post__auth_user_reset_password";

import { ITodoListUser } from "../../../../api/structures/ITodoListUser";

@Controller("/auth/user/reset-password")
export class AuthUserReset_passwordController {
  /**
   * Complete password reset for 'user' (validate and consume reset token, set
   * new password, revoke all sessions).
   *
   * This endpoint finalizes the password reset process for a user by accepting
   * the reset token, new password, and relevant user ID. The token must be
   * valid and match an entry in 'todo_list_password_reset_tokens', not be
   * expired ('expires_at' future), and not already used ('used_at' null). The
   * targeted user must be active (soft-deleted status checked against
   * 'deleted_at') and is required to match both the token and user email. Upon
   * successful completion, the user's password is changed with a secure, salted
   * hash stored in 'password_hash', the 'updated_at' time is refreshed, the
   * reset token is marked 'used', and all outstanding session tokens in
   * 'todo_list_auth_sessions' are revoked for security. Auditing information is
   * retained. No JWT or session tokens are issued in this operation; users must
   * authenticate through login/refresh to continue access.
   *
   * @param connection
   * @param body Password reset confirmation payload (reset token, user ID, new
   *   password).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async resetPassword(
    @TypedBody()
    body: ITodoListUser.IResetPassword,
  ): Promise<ITodoListUser.IResetPasswordResult> {
    try {
      return await post__auth_user_reset_password({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
