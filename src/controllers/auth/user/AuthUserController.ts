import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postAuthUserJoin } from "../../../providers/postAuthUserJoin";
import { postAuthUserLogin } from "../../../providers/postAuthUserLogin";
import { postAuthUserRefresh } from "../../../providers/postAuthUserRefresh";

import { ITodoListUser } from "../../../api/structures/ITodoListUser";

@Controller("/auth/user")
export class AuthUserController {
  /**
   * Register a new user in the 'todo_list_users' table and receive JWT tokens
   * for session start.
   *
   * This operation enables public registration of a new user for the minimal
   * Todo application. It creates a record in the 'todo_list_users' table with
   * the provided email and hashed password. Both 'created_at' and 'updated_at'
   * are set with the account creation timestamp (UTC ISO 8601).
   *
   * All fields referenced (email, password_hash, created_at, updated_at) must
   * be present and valid as per schema. The operation verifies email uniqueness
   * and generates tokens upon successful join. The password is securely hashed
   * as defined in the 'password_hash' column (never in plain text).
   *
   * No privilege is granted beyond ordinary user (cannot access any other
   * data). Account registration issues a user JWT token pair without any admin
   * capability, precisely in line with minimalism principles for account
   * management.
   *
   * Security practices require email uniqueness, password strength validation,
   * secure token generation, and all onboarded fields are directly mapped to
   * schema fields with no extension. This operation must be called only by
   * unauthenticated/public clients.
   *
   * This operation is always the first in the authentication flow, followed by
   * login for future accesses or refresh for renewing tokens. It is related to
   * the 'login' and 'refresh' operations for a complete authentication
   * lifecycle.
   *
   * @param connection
   * @param body User registration information for 'todo_list_users' (email,
   *   password)
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: ITodoListUser.IJoin,
  ): Promise<ITodoListUser.IAuthorized> {
    try {
      return await postAuthUserJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate a user in 'todo_list_users' with email/password and issue new
   * JWT tokens.
   *
   * This operation authenticates users of the minimal Todo app by validating
   * their provided email and password. It queries only 'todo_list_users', using
   * fields 'email' and 'password_hash', and—upon successful credential
   * match—issues new JWT tokens for access and refresh, following the strict
   * security requirements.
   *
   * Login updates the 'updated_at' field to log last login activity. No extra
   * account or role information is returned; the authentication response
   * includes only required fields.
   *
   * Security is ensured by: never revealing actual password or failure
   * specifics, hashing all credentials, and rejecting all logins lacking valid
   * schema-matching records. Each login attempt is isolated to the user account
   * referenced by email.
   *
   * The login process is the second step in end-user authentication workflows,
   * after registration. Token refresh and logout are handled by additional
   * endpoints. This operation is not accessible for admin or guest roles—it is
   * only for member users as defined by the schema.
   *
   * @param connection
   * @param body Login information (email and password) per 'todo_list_users'
   *   schema.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: ITodoListUser.ILogin,
  ): Promise<ITodoListUser.IAuthorized> {
    try {
      return await postAuthUserLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT tokens for a user in 'todo_list_users', updating the session
   * securely.
   *
   * This endpoint allows authenticated users to renew their session by
   * submitting a valid JWT refresh token. It references the 'todo_list_users'
   * table for token validation and—if valid—generates new access and refresh
   * tokens. The 'updated_at' field is updated to reflect token renewal.
   *
   * No additional details are altered in the user record. Security is managed
   * by fully verifying the refresh token, rejecting invalid or expired tokens,
   * and exposing no extra account data.
   *
   * All token operations are strictly mapped to real schema fields, and the
   * response returns the minimal necessary authorized DTO with no extra
   * information. This operation is essential for maintaining user login
   * persistence under JWT strategies. Only available to users with valid
   * refresh tokens issued by the system.
   *
   * The refresh endpoint completes the authentication cycle in coordination
   * with registration and login. Failure to provide a valid refresh token
   * results in an authentication error with no account data disclosed.
   *
   * @param connection
   * @param body Refresh token for renewing authentication in 'todo_list_users'.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: ITodoListUser.IRefresh,
  ): Promise<ITodoListUser.IAuthorized> {
    try {
      return await postAuthUserRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
