import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { postauthAdminJoin } from "../../../providers/postauthAdminJoin";
import { postauthAdminLogin } from "../../../providers/postauthAdminLogin";
import { postauthAdminRefresh } from "../../../providers/postauthAdminRefresh";

import { ITodoListAdmin } from "../../../api/structures/ITodoListAdmin";

@Controller("/auth/admin")
export class AuthAdminController {
  /**
   * Registers a new administrator in the todo_list_admins table.
   *
   * This endpoint registers a new administrator account by creating a record in
   * the todo_list_admins table. Email uniqueness is enforced by the
   *
   * @param connection
   * @param body Details for creating a new administrator account.
   * @@unique constraint. The password_hash field must contain a securely
   * hashed password. Optional fields, such as name and avatar_uri, may be set
   * by the admin upon creation. The status field controls active/inactive
   * state. Upon successful join, an authentication token (JWT) is issued that
   * includes privileges from the privilege_level and status fields. Security
   * ensures emails cannot be enumerated, and only valid registration requests
   * are accepted. If registration fails due to constraint violation (e.g.,
   * email reuse), the operation returns a business-level error with no
   * sensitive detail.
   *
   * This endpoint is public-facing, and account creation is allowed until
   * registration policies change. Further admin authentication uses the
   * credentials established here. Password reset and privilege escalation
   * require additional operations. All admin-centric onboarding flows
   * reference this join endpoint for initial registration.
   *
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: ITodoListAdmin.IJoin,
  ): Promise<ITodoListAdmin.IAuthorized> {
    try {
      return await postauthAdminJoin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticates admin credentials for todo_list_admins. Issues JWT tokens if
   * valid.
   *
   * Authenticates administrator credentials (email, password) against records
   * in the todo_list_admins table. Requires the email field to match an
   * existing administrator and the password to validate against the
   * password_hash using a secure comparison. Successful login issues JWT access
   * and refresh tokens, with claims constructed from the id, email,
   * privilege_level, and status fields. Only admin accounts with status
   * indicating active are permitted to login. If login fails due to incorrect
   * credentials, inactive status, or account lockout, a safe generic error is
   * returned. Rate limits and lockout policy may be enforced to prevent brute
   * force attacks.
   *
   * This operation is foundational for all secure administrative actions.
   * Follow-up actions such as password reset, 2FA, or session management are
   * supported in dedicated endpoints. Logging is used for all admin
   * authentication events to ensure traceability.
   *
   * @param connection
   * @param body Administrator login credentials (email & password).
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: ITodoListAdmin.ILogin,
  ): Promise<ITodoListAdmin.IAuthorized> {
    try {
      return await postauthAdminLogin({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refreshes administrator JWT tokens if current credentials are valid
   * (todo_list_admins).
   *
   * Enables token refresh for an authenticated administrator using a valid
   * refresh token. Validates the admin’s identity and session by verifying the
   * refresh token and the current state of the corresponding admin record in
   * todo_list_admins. Uses the deleted_at and status fields to determine
   * eligibility for refresh—accounts marked deleted, locked, or disabled cannot
   * refresh tokens. New JWT tokens, with claims that reflect the up-to-date
   * privilege_level and status, are issued to maintain secure admin session
   * continuity. Audit logs are updated for refresh activity. Errors are
   * returned for any token or status issue.
   *
   * @param connection
   * @param body Administrator refresh token credentials.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: ITodoListAdmin.IRefresh,
  ): Promise<ITodoListAdmin.IAuthorized> {
    try {
      return await postauthAdminRefresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
