/// Todo list items representing individual user tasks in the minimal Todo
/// application. Each todo is strictly owned by a single user via the {@link
/// todo_list_users.id} foreign key. The table stores only essential fields:
/// task title, completion status, timestamps for creation/update/completion,
/// and optional soft delete flag (for future extensibility). No labels,
/// priorities, deadlines, or attachments are included, adhering to strict
/// minimalism. Admin users may manage all todos via permissions, not via
/// extra fields.
///
/// @namespace Todos
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model todo_list_todos {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id
  
  /// Belonged user's {@link todo_list_users.id}. Enforces ownership and
  /// enables cascading deletes when user is removed.
  todo_list_user_id String
  
  /// Todo item label/title. Must be non-empty and max 100 characters, trimmed.
  /// (Validated in service logic, enforced at application layer.)
  title String
  
  /// Whether the todo item is marked as completed (true) or still active
  /// (false).
  is_completed Boolean
  
  /// Timestamp when the todo item was created. Used for sort and audit.
  created_at DateTime
  
  /// Timestamp for most recent modification (description, status change, etc.).
  updated_at DateTime
  
  /// If completed, timestamp at which the task was marked as done; set to null
  /// if not completed.
  completed_at DateTime?
  
  /// Soft delete timestamp; if present, item is considered logically deleted
  /// but not removed from database. Enables future extensibility for
  /// audit/recovery.
  deleted_at DateTime?
  
  //----
  // RELATIONS
  //----
  user todo_list_users @relation(fields: [todo_list_user_id], references: [id], onDelete: Cascade)
  
  @@index([todo_list_user_id, is_completed])
}