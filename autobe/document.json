{"operations":[{"specification":"User account registration (join) for regular users. This endpoint is responsible for accepting new user credentials (email, password_hash) and creating a new row in the todo_list_users table. When a registration request is received, it validates the uniqueness of the email field by checking todo_list_users.email, hashes the provided password, and sets initial account status to a value required for new accounts (e.g., 'active' or 'pending', according to business logic). After successful insertion, the service issues initial JWT access and refresh tokens, encoding the user's id and role. Only fields existing in todo_list_users are used for DB record creation. All validation logic for fields (uniqueness, required, max lengths) must reference the todo_list_users Prisma schema documentation. This operation is critical in the onboarding flow and must provide secure error handling for registration failures. It is not available to already authenticated users and requires no prior authentication.","authorizationType":"join","description":"This API operation allows creation of a new user account for the regular user role, referencing the todo_list_users table in the Prisma schema. The join operation enables end users to register with their email and password, provided fields are unique and conform to database constraints.\n\nThe handler validates the email is not already present in todo_list_users.email, checks that the password_hash meets required security standards, and initializes the status field (for instance 'active') according to business logic. Upon registration, only defined table fields such as email, password_hash, name (optional), and status are stored—no extraneous data is accepted. Errors arising from unique constraint violations or required field omissions are surfaced with business-appropriate messages.\n\nThe operation is only accessible to users not currently authenticated. Registration success results in issuing a JWT access token plus a refresh token, encoding user id from todo_list_users.id and assigning the \"user\" role. The response conforms to the ITodoListUser.IAuthorized DTO format. Any edge cases, such as attempting to register with a deactivated, suspended, or previously soft-deleted email, are handled in accordance with the current value of the deleted_at and status columns in todo_list_users.\n\nThis endpoint is foundational for onboarding, integrating directly with the login, refresh, and password management endpoints within the user authentication flow. If registration is unsuccessful, the operation does not leak details about which field(s) caused failure beyond standard error handling. It is closely related to the todo_list_users Prisma DB model and must align with all its business documentation.","summary":"Register a new user account in todo_list_users and provision JWT tokens (role: user)","parameters":[],"requestBody":{"description":"Information required to create a new user account (email, password_hash, optional name/avatar for profile, initial status as per business logic).","typeName":"ITodoListUser.IJoin"},"responseBody":{"description":"Authorized session object with access/refresh JWT, user/basic profile per todo_list_users, and role context for the new user.","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/user/join","method":"post"},{"specification":"Standard login endpoint for user accounts in the todo_list_users table. When a login request is received (email + password), the system validates credentials by looking up the supplied email in todo_list_users and comparing the hash of the submitted password to the stored password_hash. Only active accounts (matching status as defined in schema and not having deleted_at set) may authenticate. Upon successful authentication, issues new JWT access/refresh tokens (encoding user id and role) and logs the login event (updates last_login_at). Enforces error-handling per business requirements and never reveals which credential was incorrect. Operation uses fields defined in todo_list_users exclusively for credential and status verification.","authorizationType":"login","description":"This operation enables existing registered users to authenticate to the todo list application via email and password, as stored in the todo_list_users table. The system hashes the supplied password and matches it against todo_list_users.password_hash for the email record. Logins are allowed only for users with status indicating active account and a null value for deleted_at. On a successful login, new JWT access and refresh tokens are generated as specified by business rules, with the user id and \"user\" role included in tokens. The last_login_at field is updated to the present time for audit and security tracking.\n\nIf authentication fails, the system returns a standard login error message, never exposing which field—email or password—caused failure. Error reporting follows business guidelines and must not enable user enumeration attacks. The system checks only real schema fields (email, password_hash, status, deleted_at).\n\nSuccessful logins enable access to all authorized API endpoints for the user role. This operation seamlessly connects to related endpoints such as refresh, password-reset (if implemented), and general user session management. It is always consistent with the todo_list_users schema and omits extraneous logic or fields.","summary":"Authenticate a user from todo_list_users, issue new JWT session tokens (role: user)","parameters":[],"requestBody":{"description":"User login credentials: email address and raw password (to be hashed before comparison).","typeName":"ITodoListUser.ILogin"},"responseBody":{"description":"Authorized session object including JWT tokens, role, and user profile context.","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":null,"name":"login","path":"/auth/user/login","method":"post"},{"specification":"Refresh endpoint for user accounts in todo_list_users. When invoked, this endpoint accepts an existing, valid refresh token (typically issued after login or join operations) and, upon verifying its validity and that the referenced user account is still active (status, deleted_at), issues a new set of JWT access and refresh tokens for continued session. No credential resubmission required; the system uses the embedded user id and role in the refresh token payload for account lookup. Operation checks only real fields in the todo_list_users schema.","authorizationType":"refresh","description":"This API operation allows registered user accounts to renew their JWT session using a valid refresh token referencing an active record in todo_list_users. The handler extracts and verifies the token, checks the status and ensures deleted_at is null for the related user, then issues a fresh JWT access/refresh token pair. If the token is expired, revoked, or references an ineligible account (wrong status or soft-deleted), errors are reported per business rules.\n\nOnly fields actually defined in the schema (status, deleted_at, etc.) are used for account checks. Upon a successful refresh, the service updates the last_login_at if specified in application logic. No credentials are required in the request; all context comes from the presented refresh token.\n\nThis operation is related to login, join, and any password/session management flows, forming the core of the user's ongoing authentication lifecycle. Only operations present in todo_list_users, including necessary validation fields, are referenced.","summary":"Renew JWT session tokens for a user by validating a refresh token against todo_list_users","parameters":[],"requestBody":{"description":"Valid JWT refresh token referencing a todo_list_users account for session renewal.","typeName":"ITodoListUser.IRefresh"},"responseBody":{"description":"Authorized session object with renewed tokens and user context (role: user).","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":null,"name":"refresh","path":"/auth/user/refresh","method":"post"},{"specification":"Implements the administrator registration (join) operation. This endpoint allows the creation of a new administrator account in the todo_list_admins table. It requires a unique email and a hashed password, as defined by the password_hash field in the schema. Upon successful registration, the admin's profile is initialized with a default status, and user-provided name/avatar are optional. The new admin account can be used to log in, manage platform settings, or perform privileged actions. The JWT payload for the admin includes relevant privilege and identification fields.\n\nThis endpoint is public and does not require prior authentication as it is used to bootstrap new admin accounts. Business logic ensures email uniqueness and uses secure password validation, referencing the email, password_hash, and status fields from the todo_list_admins schema. If an email is already registered, an appropriate error is returned, and no account is created. The response includes an authorized admin DTO as per authentication conventions.\n\nThis operation is required for initial admin provisioning, security, and platform bootstrap. It is referenced by all admin onboarding and admin API authentication workflows. Related operations: admin login and admin token refresh.","authorizationType":"join","description":"This endpoint registers a new administrator account by creating a record in the todo_list_admins table. Email uniqueness is enforced by the @@unique constraint. The password_hash field must contain a securely hashed password. Optional fields, such as name and avatar_uri, may be set by the admin upon creation. The status field controls active/inactive state. Upon successful join, an authentication token (JWT) is issued that includes privileges from the privilege_level and status fields. Security ensures emails cannot be enumerated, and only valid registration requests are accepted. If registration fails due to constraint violation (e.g., email reuse), the operation returns a business-level error with no sensitive detail.\n\nThis endpoint is public-facing, and account creation is allowed until registration policies change. Further admin authentication uses the credentials established here. Password reset and privilege escalation require additional operations. All admin-centric onboarding flows reference this join endpoint for initial registration.","summary":"Registers a new administrator in the todo_list_admins table.","parameters":[],"requestBody":{"description":"Details for creating a new administrator account.","typeName":"ITodoListAdmin.IJoin"},"responseBody":{"description":"Created administrator account with authorization token information.","typeName":"ITodoListAdmin.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/admin/join","method":"post"},{"specification":"Implements the administrator login operation. This endpoint authenticates an admin user attempting to log in via email and password. It references the todo_list_admins table for credentials: the provided email MUST match an existing admin account, and the password is validated against password_hash. Upon successful login, issues a new JWT token with claims reflecting the admin's id, status, and privilege_level fields.\n\nAuthentication failure (due to incorrect credentials, non-existent email, or status!=active) returns an appropriate error message, never exposing which emails exist for security best practices. This login is required for all subsequent admin operations, including platform management and user support actions. Related endpoints include admin join (registration) and admin token refresh. JWT access and refresh tokens are managed according to security policy.","authorizationType":"login","description":"Authenticates administrator credentials (email, password) against records in the todo_list_admins table. Requires the email field to match an existing administrator and the password to validate against the password_hash using a secure comparison. Successful login issues JWT access and refresh tokens, with claims constructed from the id, email, privilege_level, and status fields. Only admin accounts with status indicating active are permitted to login. If login fails due to incorrect credentials, inactive status, or account lockout, a safe generic error is returned. Rate limits and lockout policy may be enforced to prevent brute force attacks.\n\nThis operation is foundational for all secure administrative actions. Follow-up actions such as password reset, 2FA, or session management are supported in dedicated endpoints. Logging is used for all admin authentication events to ensure traceability.","summary":"Authenticates admin credentials for todo_list_admins. Issues JWT tokens if valid.","parameters":[],"requestBody":{"description":"Administrator login credentials (email & password).","typeName":"ITodoListAdmin.ILogin"},"responseBody":{"description":"Administrator JWT tokens and authorization payload.","typeName":"ITodoListAdmin.IAuthorized"},"authorizationRole":null,"name":"login","path":"/auth/admin/login","method":"post"},{"specification":"Implements administrator JWT refresh operation. This endpoint allows a currently authenticated admin to request fresh access and refresh tokens using a valid (non-expired, non-revoked) refresh token. Underlying logic checks the existence, validity, and status of the admin in the todo_list_admins table (id, status) before reissuing new tokens. Refresh process prohibits refresh for deleted, disabled, or non-existent admin accounts by referencing the deleted_at and status fields.\n\nThe operation is essential for secure long-lived admin sessions and to support seamless administrative workflows without requiring repeated logins. On success, new JWT tokens with matching claims to the admin's records are issued. On failure (e.g., invalid/expired refresh token or revoked admin status), a business-appropriate error is returned and no tokens are issued.","authorizationType":"refresh","description":"Enables token refresh for an authenticated administrator using a valid refresh token. Validates the admin’s identity and session by verifying the refresh token and the current state of the corresponding admin record in todo_list_admins. Uses the deleted_at and status fields to determine eligibility for refresh—accounts marked deleted, locked, or disabled cannot refresh tokens. New JWT tokens, with claims that reflect the up-to-date privilege_level and status, are issued to maintain secure admin session continuity. Audit logs are updated for refresh activity. Errors are returned for any token or status issue.","summary":"Refreshes administrator JWT tokens if current credentials are valid (todo_list_admins).","parameters":[],"requestBody":{"description":"Administrator refresh token credentials.","typeName":"ITodoListAdmin.IRefresh"},"responseBody":{"description":"New JWT tokens and corresponding admin authorization DTO.","typeName":"ITodoListAdmin.IAuthorized"},"authorizationRole":null,"name":"refresh","path":"/auth/admin/refresh","method":"post"},{"specification":"This operation searches and retrieves a paginated list of user accounts from the todo_list_users table. It leverages advanced filtering and sorting to allow administrators to review user information, account status, registration dates, and recent activity. The endpoint enables efficient user management, oversight, and compliance audits through secure, role-based access. Admins may use this to locate users by email, status, or time of creation, helping to monitor service usage and respond to support needs. Sensitive credential information (e.g., password_hash) is never included in the API response.\n\nThis operation supports pagination, free-text search in the user's name and email, and sorting by creation date or last login. Only administrators may access this endpoint, ensuring that private user information remains protected and only visible to privileged users. Rate limiting and search throttling may be applied to prevent misuse. All query criteria are validated for compliance, and any error (e.g., invalid search value) generates a clear message. The response includes summary details for each user, supporting further navigation to user-specific detail or management operations.","path":"/todoList/admin/users","method":"patch","summary":"Advanced search and pagination of all user accounts (todo_list_users table) for administrators.","description":"This PATCH /users operation lets admin users search, filter, and page through the entire set of registered user accounts. Common use cases include support intervention, compliance review, and operational monitoring. It incorporates fields such as user ID, email, display name, account status, last login time, and creation date. No password or sensitive token information is ever included in responses.\n\nSecurity is a priority: only authenticated users with the 'admin' role can invoke this endpoint. All search and pagination inputs are validated against business rules to prevent unauthorized enumeration or injection. The underlying implementation conforms to the unique and indexed constraints defined in the schema. System administrators should log access to this endpoint for audit purposes.\n\nRelevant Prisma schema: todo_list_users. This operation supports business reporting, account management, and acts as an entry point to further user-specific admin actions.","parameters":[],"requestBody":{"description":"Filter conditions, search queries, and pagination/sorting parameters for admin user search.","typeName":"ITodoListUser.IRequest"},"responseBody":{"description":"Paginated list of user summaries matching search conditions, excluding sensitive credentials.","typeName":"IPageITodoListUser.ISummary"},"authorizationRoles":["admin"],"name":"index","authorizationRole":"admin","authorizationType":null},{"specification":"This operation retrieves the full profile of a specific user account from the todo_list_users table, identified by userId. Admins may use this detailed view to verify account ownership, investigate issues, or prepare for compliance actions. The endpoint does not reveal credential hashes and enforces strict access control, logging all access for auditability. The provided userId must exist; otherwise, a not-found error is returned.","path":"/todoList/admin/users/{userId}","method":"get","summary":"Retrieve a specific user's detailed profile (todo_list_users table) using their unique userId.","description":"This GET /users/{userId} operation allows an admin user to access full details of any user account for business or support needs. The returned data includes all core fields: id, email, name, avatar_uri, status, last_login_at, created_at, updated_at, and soft-deletion state (deleted_at), excluding any sensitive password_hash. This operation is essential for compliance reviews, user support, and operational monitoring.\n\nAuthorization is strictly enforced: only 'admin' role users are permitted. Each access is logged as per compliance and audit policy. If the userId parameter does not correspond to an existing user, the operation returns a 'not found' error. Input validation ensures the userId is a proper UUID before proceeding. This operation supports the overall goal of accountable and transparent user management.","parameters":[{"name":"userId","description":"Unique identifier (UUID) of the user account to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail object for the requested user account. Excludes credential hash.","typeName":"ITodoListUser"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin","authorizationType":null},{"specification":"This operation updates an existing user account in the todo_list_users table using the unique userId. It enables admins to modify fields such as name, avatar_uri, or status, in accordance with business rules. Credential-related fields (email, password_hash) may be updatable for support or account recovery purposes, but only by admins. All changes are validated to meet system constraints—e.g., unique email, valid statuses. Passwords supplied in updates are assumed pre-hashed before entering the database. Actions and modifications are logged for compliance and rollback.","path":"/todoList/admin/users/{userId}","method":"put","summary":"Update fields of a specific user account (todo_list_users) by admin, including profile and status changes.","description":"This PUT /users/{userId} endpoint lets admin users update details in any user account. Allowed fields include display name, status, avatar_uri, and optionally email or password_hash for support scenarios (e.g., account recovery). Updates to the email must maintain unique index constraints and comply with validation established by the business. Any password_hash provided must be securely pre-hashed on the client side.\n\nOnly administrators are authorized to use this; audit logs record every modification for compliance. On success, the updated user record (excluding credential hash) is returned, reflecting all applied changes. If the provided userId is invalid or does not exist, a clear error is returned. Business rules ensure that soft-deleted users are not updated unless explicitly restored. This operation supports robust account lifecycle management in accordance with privacy and compliance objectives.","parameters":[{"name":"userId","description":"Unique identifier (UUID) of the user account to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields and their new values for the user account update. Must follow all business validation rules.","typeName":"ITodoListUser.IUpdate"},"responseBody":{"description":"The updated full user account object (excluding credential hash) after all changes have been applied.","typeName":"ITodoListUser"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin","authorizationType":null},{"specification":"This operation permanently removes a user account from the todo_list_users table by its unique userId. It updates the deleted_at timestamp, implementing a soft-delete per schema, ensuring that the account is excluded from main listings but retained for compliance and retention policies. Only admin users can delete accounts; this action is logged for audit traceability. If the userId does not exist, a not-found error is returned. The user cannot be recovered unless a restore endpoint is implemented later.","path":"/todoList/admin/users/{userId}","method":"delete","summary":"Soft-delete a user account (todo_list_users) by setting deleted_at; admin only.","description":"This DELETE /users/{userId} endpoint lets administrators mark a user account as deleted by populating the deleted_at field (soft delete), following the schema's soft deletion pattern. Such accounts are removed from active listings but remain in the database for retention and compliance. This operation is strictly permitted only for admin users, triggering an audit log entry for every deletion.\n\nInput validation guarantees the userId is a valid UUID and that the account exists. Attempts to delete non-existent or already-deleted users return a clear error. Related todos become orphaned or are handled based on cascading rules. The operation is irreversible—no recovery possible unless a dedicated restore function is created. This endpoint supports business needs for privacy, compliance, right-to-be-forgotten scenarios, and account lifecycle control.","parameters":[{"name":"userId","description":"Unique identifier (UUID) of the user account to soft-delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin","authorizationType":null},{"specification":"This operation retrieves a paginated and filterable list of administrator accounts for the Todo List application. It queries the todo_list_admins table to support searching for admins based on email, name, account status, and privilege level. The operation also supports sorting and pagination parameters. Access to this information is restricted to users with administrative rights, as it includes privileged and potentially sensitive account details. Results include admin profile fields, last login times, status, and operational privilege levels for dashboard or management interfaces.","description":"This API operation enables the searching and listing of administrator accounts registered in the Todo List system. It provides a secure method to retrieve admin details, supporting filters such as partial email or name matches, privilege level, and account status (e.g., active, suspended). Returned results include all fields from the todo_list_admins Prisma table except sensitive password hashes and soft-deleted accounts (deleted_at is null).\n\nThe operation is only accessible to authenticated admins with adequate roles, ensuring that sensitive admin data is not exposed to regular users. Results are sorted in descending order of creation time by default, but sorting or pagination options can be specified in the request. This is typically used in system admin dashboards for oversight, onboarding, or compliance checks.\n\nAppropriate business validation is applied to prevent excessive query size or abuse. Audit logs may be generated for listing large admin datasets. The response does not include authentication secrets or operational logs unrelated to account registry.","summary":"List/search all Todo List administrator accounts with filtering and pagination (table: todo_list_admins)","parameters":[],"requestBody":{"description":"Search and pagination parameters for admin account filtering","typeName":"ITodoListAdmin.IRequest"},"responseBody":{"description":"Paginated list of administrator summary records matching search criteria","typeName":"IPageITodoListAdmin.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","path":"/todoList/admin/admins","method":"patch"},{"specification":"This operation retrieves the full detail of a single administrator account by its unique identifier. It works against the todo_list_admins table, ensuring that privileged administrator profile, status, and operational credentials can be reviewed only by other admins. This is essential for management dashboards and account reviews, supporting profile editing, compliance checks, and operational oversight.","description":"This API endpoint returns the full detail of an administrator account specified by the adminId path parameter. It pulls all non-sensitive fields from the referenced todo_list_admins schema table, supporting administrative review or management.\n\nThe endpoint requires the caller to be authenticated as an admin. Sensitive authentication data such as password_hash are excluded from the returned object. Returned fields include name, email, status, privilege_level, avatar_uri, timestamp data (created_at, updated_at, last_login_at, last_admin_action_at), and account state.\n\nSecurity enforcement is strict to ensure only admins can access other admin data. Audit logging of access can be implemented in actual business logic to comply with operational policy.","summary":"Retrieve detailed information for a specific Todo List administrator (table: todo_list_admins)","parameters":[{"name":"adminId","description":"The unique identifier (UUID) of the target administrator account.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed administrator account profile and operational data (excluding password hashes)","typeName":"ITodoListAdmin"},"authorizationType":null,"authorizationRole":"admin","name":"at","path":"/todoList/admin/admins/{adminId}","method":"get"},{"specification":"This operation updates the editable profile fields and operational status of a specific administrator account in the todo_list_admins table. It enforces business validation such as email uniqueness and status change rules. Only admins may update other admin records, supporting profile correction, privilege modification, or account suspension/resumption. Security best practices are enforced to ensure sensitive authentication data is not arbitrarily altered except in dedicated flows.","description":"This endpoint enables an authenticated admin to update the details of another admin account, referenced by the adminId path parameter. Fields eligible for update include name, avatar_uri, status, privilege_level, and account state (active/suspended/locked), but not authentication secrets or audit history. The operation validates all inputs according to business rules, with server-side enforcement of email uniqueness and privilege change constraints.\n\nPassword resets or credential changes must be performed via separate dedicated API endpoints for security. The operation is logged as an administrative action, and only fields defined in ITodoListAdmin.IUpdate may be altered by this endpoint. On success, the updated admin account object is returned.","summary":"Update the profile or status of a specific administrator account (table: todo_list_admins)","parameters":[{"name":"adminId","description":"The unique identifier (UUID) of the target administrator account to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated administrator account profile/status information (excluding password hash)","typeName":"ITodoListAdmin.IUpdate"},"responseBody":{"description":"The full, updated administrator account (all exposed fields from ITodoListAdmin)","typeName":"ITodoListAdmin"},"authorizationType":null,"authorizationRole":"admin","name":"update","path":"/todoList/admin/admins/{adminId}","method":"put"},{"specification":"This operation permanently removes an administrator account from the todo_list_admins table by hard-deleting the record identified by adminId. This is used for deprovisioning or removing admin accounts, e.g., on separation or privilege revocation. The action is restricted to authenticated admins and is logged for audit purposes. Accidental or malicious deletion is mitigated by requiring confirmation at the UI or via multi-factor workflows.","description":"Invoking this endpoint causes the permanent deletion (hard delete) of the administrator account identified by the adminId path parameter. The deletion action removes the todo_list_admins row and all associated relationships, except where foreign key constraints enforce cascading or retention rules defined by business logic.\n\nAccess to this operation is strictly limited to admin users, reflecting the seriousness of deleting privileged accounts. Deletion triggers audit logging for compliance, and the operation is irreversible—deleted admin records cannot be restored by normal means. Errors are returned if the target admin does not exist or has already been deleted via soft delete (deleted_at is non-null).\n\nBusiness logic may require additional administrative approval or confirmation for high-privilege removals. The endpoint does not return a response body but will signal completion or failure via standard HTTP status codes.","summary":"Permanently delete an administrator account (table: todo_list_admins, hard delete)","parameters":[{"name":"adminId","description":"The unique identifier (UUID) of the administrator account to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","path":"/todoList/admin/admins/{adminId}","method":"delete"},{"specification":"This operation retrieves a user's todo list as a paginated, filtered collection. It operates on the todo_list_todos table from the Prisma schema. The operation allows users to request only their own todos, or admins to retrieve todos for any user, supporting sorting (by created_at), completion status, search by content, and optional due date filtering. All pagination and filter parameters must comply with business requirements including default page size (20), query ownership (user or admin only), and visibility (ignoring soft-deleted users/todos).","description":"Retrieve the list of todos for the currently authenticated user, supporting advanced search and filtering. Users can retrieve only their own todos, while admins may access todos across users for audit or troubleshooting purposes. The results are ordered with the most recently created tasks first by default. The business rule enforces that only the owner (role: user) or an admin (role: admin) can access a user's todos; unauthorized attempts are denied and logged.\n\nThis operation applies field-level filters (content, completion status, due date window) and supports pagination parameters like page size and offset. Results exclude todos from soft-deleted users or invalid states. Input validation prevents negative page sizes or offsets, and content queries are trimmed & sanitized. This operation is critical for productivity workflows in the Todo list app, enforcing data privacy and strict row-level access control.\n\nEdge cases—such as empty results or invalid filters—are handled gracefully with clear business error messages and do not leak internal state or information.\n\nThis endpoint is paired with single-todo retrieval, creation, updating, and deletion APIs for full user task management.","summary":"Search and retrieve a filtered, paginated list of todos for a user (todo_list_todos table).","parameters":[],"requestBody":{"description":"Search criteria (content, completed, due_date), sort and pagination parameters (offset, page size) for todo list retrieval.","typeName":"ITodoListTodo.IRequest"},"responseBody":{"description":"Paginated result set of todo task summaries matching filter and search parameters.","typeName":"IPageITodoListTodo.ISummary"},"authorizationRoles":["user","admin"],"name":"index","path":"/todoList/user/todos","method":"patch","authorizationRole":"user","authorizationType":null},{"specification":"This operation retrieves a user's todo list as a paginated, filtered collection. It operates on the todo_list_todos table from the Prisma schema. The operation allows users to request only their own todos, or admins to retrieve todos for any user, supporting sorting (by created_at), completion status, search by content, and optional due date filtering. All pagination and filter parameters must comply with business requirements including default page size (20), query ownership (user or admin only), and visibility (ignoring soft-deleted users/todos).","description":"Retrieve the list of todos for the currently authenticated user, supporting advanced search and filtering. Users can retrieve only their own todos, while admins may access todos across users for audit or troubleshooting purposes. The results are ordered with the most recently created tasks first by default. The business rule enforces that only the owner (role: user) or an admin (role: admin) can access a user's todos; unauthorized attempts are denied and logged.\n\nThis operation applies field-level filters (content, completion status, due date window) and supports pagination parameters like page size and offset. Results exclude todos from soft-deleted users or invalid states. Input validation prevents negative page sizes or offsets, and content queries are trimmed & sanitized. This operation is critical for productivity workflows in the Todo list app, enforcing data privacy and strict row-level access control.\n\nEdge cases—such as empty results or invalid filters—are handled gracefully with clear business error messages and do not leak internal state or information.\n\nThis endpoint is paired with single-todo retrieval, creation, updating, and deletion APIs for full user task management.","summary":"Search and retrieve a filtered, paginated list of todos for a user (todo_list_todos table).","parameters":[],"requestBody":{"description":"Search criteria (content, completed, due_date), sort and pagination parameters (offset, page size) for todo list retrieval.","typeName":"ITodoListTodo.IRequest"},"responseBody":{"description":"Paginated result set of todo task summaries matching filter and search parameters.","typeName":"IPageITodoListTodo.ISummary"},"authorizationRoles":["user","admin"],"name":"index","path":"/todoList/admin/todos","method":"patch","authorizationRole":"admin","authorizationType":null},{"specification":"This operation retrieves detailed information about a specific todo item by its unique identifier. It operates on the todo_list_todos table from the Prisma schema. Only the owner of the todo (user) or an admin may access the todo. All fields are returned, including content, completion status, due date, timestamps, and ownership references. Sensitive or meta fields are omitted if viewing as a regular user. Access violations and missing resources trigger detailed business error responses as per requirements.","description":"Retrieve a single todo item's complete details by its ID. The system verifies that the requesting user owns the todo identified by todoId, or that the requester is an admin. Unauthorized access results in a forbidden action error, and a non-existent todoId generates a not-found error with a business-appropriate message.\n\nReturned fields include: unique identifier, owner user ID, content (up to 255 characters), completion status, due date (if set), timestamps for creation, last update, and (if completed) completion, as well as relational references for audit purposes. The data model prohibits exposure of deleted or inaccessible todos.\n\nThis operation can be used together with update, mark complete/incomplete, and delete endpoints. The schema enforces ownership and data access at the business logic level for full regulatory compliance and privacy control.","summary":"Retrieve details of a single todo by its unique identifier (todo_list_todos table).","parameters":[{"name":"todoId","description":"Unique identifier of the target todo to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete details of the target todo task, including content, completion, due date, and audit metadata.","typeName":"ITodoListTodo"},"authorizationRoles":["user","admin"],"name":"at","path":"/todoList/user/todos/{todoId}","method":"get","authorizationRole":"user","authorizationType":null},{"specification":"This operation retrieves detailed information about a specific todo item by its unique identifier. It operates on the todo_list_todos table from the Prisma schema. Only the owner of the todo (user) or an admin may access the todo. All fields are returned, including content, completion status, due date, timestamps, and ownership references. Sensitive or meta fields are omitted if viewing as a regular user. Access violations and missing resources trigger detailed business error responses as per requirements.","description":"Retrieve a single todo item's complete details by its ID. The system verifies that the requesting user owns the todo identified by todoId, or that the requester is an admin. Unauthorized access results in a forbidden action error, and a non-existent todoId generates a not-found error with a business-appropriate message.\n\nReturned fields include: unique identifier, owner user ID, content (up to 255 characters), completion status, due date (if set), timestamps for creation, last update, and (if completed) completion, as well as relational references for audit purposes. The data model prohibits exposure of deleted or inaccessible todos.\n\nThis operation can be used together with update, mark complete/incomplete, and delete endpoints. The schema enforces ownership and data access at the business logic level for full regulatory compliance and privacy control.","summary":"Retrieve details of a single todo by its unique identifier (todo_list_todos table).","parameters":[{"name":"todoId","description":"Unique identifier of the target todo to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete details of the target todo task, including content, completion, due date, and audit metadata.","typeName":"ITodoListTodo"},"authorizationRoles":["user","admin"],"name":"at","path":"/todoList/admin/todos/{todoId}","method":"get","authorizationRole":"admin","authorizationType":null},{"specification":"This operation creates a new todo item for the currently authenticated user. It interfaces with the todo_list_todos table from the Prisma schema, enforcing all business validation rules such as unique (recent) content per user, maximum content length (255 characters), valid (optional) due date, and default completed status (false). On successful creation, the todo is associated with the user and all allowed fields are returned in the response. Admins do not create todos for other users.","description":"Create a new todo for the authenticated user. The input must contain valid, non-empty content (1–255 trimmed non-control characters) and may contain an optional due date (ISO 8601, not in the past). The system assigns ownership, sets completed=false, and validates that a similar todo has not been submitted within the deduplication window for this user.\n\nUpon success, returns the full todo object with assigned identifiers and all relevant business fields. Attempts to create todos for other users, bypassing business validation, or duplicating tasks within the deduplication window are denied with appropriate error messages. This operation allows only the \"user\" role to create new todos for themselves.\n\nEdge cases covered include: whitespace-only content, excessive length, invalid or past due dates, deduplication, and unauthorized submissions. Ownership and per-field validation are enforced strictly at the business logic and API entry level.","summary":"Create a new todo item for the current user (todo_list_todos table).","parameters":[],"requestBody":{"description":"Content for the new todo (1–255 chars, no control characters, not blank), and optional due date (future or today).","typeName":"ITodoListTodo.ICreate"},"responseBody":{"description":"The created todo resource with all assigned metadata and task fields.","typeName":"ITodoListTodo"},"authorizationRoles":["user"],"name":"create","path":"/todoList/user/todos","method":"post","authorizationRole":"user","authorizationType":null},{"specification":"This operation updates an existing todo item for the authenticated user by its unique identifier. It operates on the todo_list_todos table. Only the owner (user) or an admin may update a todo. Updatable fields are: content (validated: 1–255 chars, no control characters, no all-whitespace), completed status, due date (if modified, must be valid/future), or mark as completed/uncompleted. The operation returns the updated todo object. Permission and validation checks strictly enforced: a user may not modify other users' todos; admins may update for compliance purposes. All changes update last-modified timestamp.","description":"Update (edit) an existing todo item by its unique ID. The input may include a new content value (subject to strict validation), an updated due date (if allowed), or a request to change completion status. Ownership is checked: regular users may only edit their own todos, while admins may update any user's todo according to business and compliance policy, with all such actions logged for audit.\n\nAll string and field edits are validated against business logic: content length/character rules, due date not in the past or before creation, completion status consistency. The operation returns the full, updated todo on success, with proper error responses if not found, unauthorized, or validation fails. Audit logs are generated for admin-driven updates when required by business policy.\n\nThis endpoint completes the CRUD lifecycle together with create, deletion, and retrieval endpoints.","summary":"Update a todo item by its unique identifier (todo_list_todos table).","parameters":[{"name":"todoId","description":"Unique identifier of the target todo to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update input for the target todo: content (1–255 chars), completed status, optional due date.","typeName":"ITodoListTodo.IUpdate"},"responseBody":{"description":"The updated todo with all editable fields and assigned metadata.","typeName":"ITodoListTodo"},"authorizationRoles":["user","admin"],"name":"update","path":"/todoList/user/todos/{todoId}","method":"put","authorizationRole":"user","authorizationType":null},{"specification":"This operation updates an existing todo item for the authenticated user by its unique identifier. It operates on the todo_list_todos table. Only the owner (user) or an admin may update a todo. Updatable fields are: content (validated: 1–255 chars, no control characters, no all-whitespace), completed status, due date (if modified, must be valid/future), or mark as completed/uncompleted. The operation returns the updated todo object. Permission and validation checks strictly enforced: a user may not modify other users' todos; admins may update for compliance purposes. All changes update last-modified timestamp.","description":"Update (edit) an existing todo item by its unique ID. The input may include a new content value (subject to strict validation), an updated due date (if allowed), or a request to change completion status. Ownership is checked: regular users may only edit their own todos, while admins may update any user's todo according to business and compliance policy, with all such actions logged for audit.\n\nAll string and field edits are validated against business logic: content length/character rules, due date not in the past or before creation, completion status consistency. The operation returns the full, updated todo on success, with proper error responses if not found, unauthorized, or validation fails. Audit logs are generated for admin-driven updates when required by business policy.\n\nThis endpoint completes the CRUD lifecycle together with create, deletion, and retrieval endpoints.","summary":"Update a todo item by its unique identifier (todo_list_todos table).","parameters":[{"name":"todoId","description":"Unique identifier of the target todo to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update input for the target todo: content (1–255 chars), completed status, optional due date.","typeName":"ITodoListTodo.IUpdate"},"responseBody":{"description":"The updated todo with all editable fields and assigned metadata.","typeName":"ITodoListTodo"},"authorizationRoles":["user","admin"],"name":"update","path":"/todoList/admin/todos/{todoId}","method":"put","authorizationRole":"admin","authorizationType":null},{"specification":"This operation permanently deletes a specific todo item from the system. It acts on the todo_list_todos table of the Prisma schema, targeting an individual todo by its unique identifier (UUID). Only the owner of the todo, or an admin, may perform this deletion. The operation enforces hard delete semantics since no soft-deletion field (e.g., deleted_at) exists on the todos table, ensuring secure and irreversible removal of task data. Deletion by an admin requires appropriate audit log creation as mandated by business rules.","description":"This endpoint allows a user (or admin) to permanently remove a single todo item, identified by its UUID, from the todo_list_todos table. The deleted todo is irreversibly purged; it will not appear in listings, cannot be restored, and all links to this task are erased from the database.\n\nTo fulfill business logic, the endpoint verifies that the requesting user is either the owner of the todo or holds an admin role. If a user attempts to delete a todo they do not own, or that does not exist, the system denies the operation and returns a business-level error message.\n\nWhen an admin performs a delete, the system must create an associated audit log entry, as described in the audit_logs table specification, to ensure traceability.\n\nThere is no soft-deletion: records are removed entirely from persistent storage. This behavior is critical for both user privacy and compliance with user-level data removal (right to erasure). Error handling includes returning 'not found' if the todo was already deleted or an invalid UUID is provided.","summary":"Permanently delete a specific todo item from the user's todo list (todo_list_todos table).","path":"/todoList/user/todos/{todoId}","method":"delete","parameters":[{"name":"todoId","description":"The unique identifier (UUID) of the todo item to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["user","admin"],"name":"erase","authorizationRole":"user","authorizationType":null},{"specification":"This operation permanently deletes a specific todo item from the system. It acts on the todo_list_todos table of the Prisma schema, targeting an individual todo by its unique identifier (UUID). Only the owner of the todo, or an admin, may perform this deletion. The operation enforces hard delete semantics since no soft-deletion field (e.g., deleted_at) exists on the todos table, ensuring secure and irreversible removal of task data. Deletion by an admin requires appropriate audit log creation as mandated by business rules.","description":"This endpoint allows a user (or admin) to permanently remove a single todo item, identified by its UUID, from the todo_list_todos table. The deleted todo is irreversibly purged; it will not appear in listings, cannot be restored, and all links to this task are erased from the database.\n\nTo fulfill business logic, the endpoint verifies that the requesting user is either the owner of the todo or holds an admin role. If a user attempts to delete a todo they do not own, or that does not exist, the system denies the operation and returns a business-level error message.\n\nWhen an admin performs a delete, the system must create an associated audit log entry, as described in the audit_logs table specification, to ensure traceability.\n\nThere is no soft-deletion: records are removed entirely from persistent storage. This behavior is critical for both user privacy and compliance with user-level data removal (right to erasure). Error handling includes returning 'not found' if the todo was already deleted or an invalid UUID is provided.","summary":"Permanently delete a specific todo item from the user's todo list (todo_list_todos table).","path":"/todoList/admin/todos/{todoId}","method":"delete","parameters":[{"name":"todoId","description":"The unique identifier (UUID) of the todo item to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["user","admin"],"name":"erase","authorizationRole":"admin","authorizationType":null},{"specification":"This operation retrieves a paginated, filterable list of all admin audit log entries. It operates on the todo_list_audit_logs table in the Prisma schema. This endpoint is intended for admin users to monitor, analyze, or export audit records concerning actions on user todos (such as viewing or deletion). Supports complex search, filtering (by admin ID, user ID, action type, date range), and sorting to aid compliance, monitoring, and operational review.","description":"The audit log list endpoint provides administrative users with advanced search capabilities for monitoring privileged actions on user todos. Admins can filter logs by action type (view or delete), target user or todo, responsible admin, time range, or rationale content. The endpoint supports pagination to efficiently browse large audit trails and includes sorting by timestamp or other relevant fields.\n\nLog records returned by this operation include full audit details—admin identity, user and todo IDs, action performed, rationale, and timestamp—enabling forensic analysis and compliance auditing. The response structure aligns with the todo_list_audit_logs schema, ensuring accurate mapping of data fields.\n\nSecurity is paramount: only users with the admin role are authorized to use this endpoint. All access is itself subject to audit logging as required by organizational policy. No unauthorized user data is returned to non-admins. System-enforced rate limiting and sensitive data protection apply.\n\nFailure scenarios include improper use by non-admins or invalid filter criteria; informative error messages are returned to guide corrective action.","summary":"Retrieve a filtered, paginated list of audit log entries from todo_list_audit_logs (admin only).","path":"/todoList/admin/auditLogs","method":"patch","parameters":[],"requestBody":{"description":"Request parameters for audit log filtering, including pagination and search options.","typeName":"ITodoListAuditLog.IRequest"},"responseBody":{"description":"Paginated list of audit log summary information matching the search and filter criteria.","typeName":"IPageITodoListAuditLog.ISummary"},"authorizationRoles":["admin"],"name":"index","authorizationRole":"admin","authorizationType":null},{"specification":"This operation retrieves detailed information about a specific audit log entry from the todo_list_audit_logs table. It requires the unique identifier (UUID) of the audit log record. The operation is restricted to admins for audit, compliance, or forensic review. Returned information includes all fields of the audit log: responsible admin, target user, action type, rationale, and timestamp, for transparency and operational governance.","description":"This endpoint allows an admin to view a single, complete audit log entry identified by its UUID in the todo_list_audit_logs table. The returned details provide full visibility into the original admin action (view or delete) upon a user's todo, including all metadata required for compliance, root cause analysis, or resolving operational issues.\n\nThe operation enforces that only users with the admin role have access. Attempts to view a nonexistent or unauthorized audit log record result in an error with an informative business-level message. Each access to a detailed audit record may itself be logged for traceability, supporting the system's comprehensive oversight requirements.\n\nReturned data includes referencing fields for admin, affected user, todo ID, action type, rationale, and audit timestamp, with structure faithfully matching the todo_list_audit_logs schema.","summary":"Retrieve details of a specific audit log entry from todo_list_audit_logs (admin only).","path":"/todoList/admin/auditLogs/{auditLogId}","method":"get","parameters":[{"name":"auditLogId","description":"The unique identifier (UUID) of the audit log entry to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the specified audit log entry, as defined in the todo_list_audit_logs schema.","typeName":"ITodoListAuditLog"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin","authorizationType":null}],"components":{"authorization":[{"name":"user","description":"A registered member who can create, read, update, and delete their own todos. Can check or uncheck tasks and view a list of their todos. Cannot access or modify other users' data.","kind":"member"},{"name":"admin","description":"Has all user privileges, plus can view and delete any user's todos if necessary for administration. Can manage the service's operational settings.","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageITodoListUser.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoListUser.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITodoListAdmin.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoListAdmin.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITodoListTodo.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoListTodo.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITodoListAuditLog.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoListAuditLog.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"ITodoListUser.IJoin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"The user's unique email address. This will be the user's login and notification identifier. It must conform to the format of a valid email address and be unique in the system. The email is used for identity verification, password reset, and primary communications. This field is required during registration and is referenced in the todo_list_users Prisma schema as the unique identifier for each user.\n\nExample: user@example.com"},"password":{"type":"string","description":"The user's password in plain text, which will be securely hashed before it is stored in the database (as password_hash column). The password must comply with the system's password policy (minimum/maximum length, complexity). NEVER store or expose this value in any user response. This is only accepted as user input during registration or login."},"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional display name for the user. This can be empty or null during registration. If provided, it is used for personalized UI, notifications, or search within the application. Not enforced to be unique."},"avatar_uri":{"oneOf":[{"type":"string","maxLength":80000},{"type":"null"}],"description":"Optional URI for the user's avatar image. Can be empty or null if not provided. If set, it must be a valid URI referencing an image resource (e.g., https://example.com/image.jpg). Used for display in user interfaces and notifications. Maximum length is 80,000 characters as defined in the database schema."}},"required":["email","password"],"description":"Registration request details for creating a new user account. All fields are validated according to the todo_list_users Prisma schema. The password will be hashed server-side before actual persistence. The email must be unique, and optional profile fields may be set if desired."},"ITodoListUser.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated user from the todo_list_users table."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"user":{"$ref":"#/components/schemas/ITodoListUser","description":"The complete authenticated user profile record, excluding sensitive credential fields. Used to populate user context on client side."}},"required":["id","token","user"],"description":"Authorization response containing the authenticated user's id, full user record (excluding credentials), and JWT tokens. Returned after successful join, login, or refresh. Used by clients to maintain session context."},"ITodoListUser.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"The login email for the user. Must match a registered email in the todo_list_users table. Used for authentication only, and must follow the same email policy as registration."},"password":{"type":"string","description":"The plaintext password submitted for authentication. This value is never logged or stored as plain text and is only used to validate credentials at login."}},"required":["email","password"],"description":"User login request. The fields are used to authenticate an existing account, referencing the todo_list_users schema."},"ITodoListUser.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"A JWT refresh token issued to the user's session after successful login or registration. This token is used to authenticate the request for a new access/refresh token pair during session renewal. The token must be valid and not expired, revoked, or associated with a deleted or inactive account."}},"required":["refresh_token"],"description":"Request body structure for user session refresh. Accepts an issued refresh token and, if valid, returns a new set of authorization tokens. Follows best practices for session security and anti-replay enforcement."},"ITodoListUser.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique user identifier (UUID). Reference to todo_list_users.id in the database. This identifies the user and is required for all cross-entity references in business logic."},"email":{"type":"string","format":"email","description":"The user's unique email address. Acts as the primary login and communications channel. Must be unique in the system. Reference to todo_list_users.email."},"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Display name of the user for UI purposes. Optional and nullable. If not set, user interfaces may fall back to the email or show blank. Reference: todo_list_users.name."},"avatar_uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"URL for the user's avatar/profile image. May be used in lists, headers, or user search. Optional and nullable. Reference: todo_list_users.avatar_uri."},"status":{"type":"string","description":"The business status of the user account (e.g., 'active', 'locked'). Used for access management and support. Reference: todo_list_users.status."},"last_login_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of the user's most recent login (ISO 8601 UTC). Null if login never occurred. Useful for admin views, analytics, or support. Reference: todo_list_users.last_login_at."},"created_at":{"type":"string","format":"date-time","description":"User registration timestamp (ISO 8601 UTC). Used for sorting and age analysis. Reference: todo_list_users.created_at."}},"required":["id","email","status","created_at"],"description":"Summary information for a user account. Suitable for admin search/results listings where credential details are never exposed. Drawn from todo_list_users table; excludes password_hash and sensitive metadata. Contains enough information for high-level management/UI purposes, but omits profile edits, token data, and deletion markers. Aligns with business requirements to avoid leakage of secure or unnecessary fields."},"ITodoListAdmin.IJoin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Administrator's unique login email. Required for secure privileged access and identity. Must be unique per admin (see Prisma @@unique constraint on todo_list_admins.email). Used for authentication and admin communication channel. Example: admin@example.com."},"password_hash":{"type":"string","description":"Password hash for administrator authentication. This must be a cryptographically secure hashed password (bcrypt/argon2), never storing plaintext. Used for login checks (see Prisma password_hash field on todo_list_admins). Accepted by API only during admin registration, not exposed in any responses. Must meet application security requirements."},"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Administrator's display name for profile and audit log references. Optional for registration and profile personalization, but recommended for traceability (see Prisma name field on todo_list_admins). May be null or omitted if not specified. Example: \"Alex Admin\"."},"avatar_uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional admin profile/avatar image URI. Supports personalization of admin profile in UI. May be omitted, null, or a URI string up to 80,000 characters (see Prisma avatar_uri field). Example: \"https://cdn.example.com/avatar/234512849\"."},"status":{"type":"string","description":"Current admin account status. Governs access control and operational state. Examples: \"active\", \"locked\", \"disabled\", \"suspended\". Value set per business/custom logic (see Prisma status column). Optional on registration, defaulting to business logic if omitted."},"privilege_level":{"type":"string","description":"Business-defined privilege level (e.g., 'superadmin', 'support', 'auditor'). Optional on registration. Used for admin authorization tiering per Prisma privilege_level column. Example: \"support\"."}},"required":["email","password_hash"],"description":"Request body for registering a new administrator account. Reference to todo_list_admins Prisma table for validation, including email uniqueness and required password hash. Optional fields control profile personalization and access level. All validation uses business and schema-level rules."},"ITodoListAdmin.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Admin authentication email address. Must exist in todo_list_admins."},"password":{"type":"string","description":"Administrator's raw password, to be securely transmitted and compared to password hash. Not stored after verification."}},"required":["email","password"],"description":"Admin login form accepting login email and raw password for credential verification. References todo_list_admins."},"ITodoListAdmin.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Valid JWT refresh token issued to the admin session on prior login, join, or refresh. Used for session lifecycle management."}},"required":["refresh_token"],"description":"Request body for admin token refresh. Accepts a refresh token and, if valid, returns new access and refresh tokens for continued session."},"ITodoListAdmin.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The admin's unique identifier from todo_list_admins.id."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"admin":{"$ref":"#/components/schemas/ITodoListAdmin","description":"Full admin profile object, excluding sensitive credentials. Useful for admin dashboards and session context."}},"required":["id","token","admin"],"description":"Authorization payload for an administrator: unique id, JWT token structure, and the admin's full profile (excluding login credentials). Follows business convention for secure session establishment."},"ITodoListAdmin":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Admin's primary key identifier from todo_list_admins.id."},"email":{"type":"string","format":"email","description":"Unique login email (business/admin only) from todo_list_admins.email."},"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Display name for UI/audit; nullable."},"avatar_uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Admin profile/avatar image; nullable, supports personalization."},"status":{"type":"string","description":"Admin account status for security and controls."},"privilege_level":{"type":"string","description":"Admin operational privilege, e.g., superadmin/support/auditor."},"last_admin_action_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Datetime of most recent privileged admin operation."},"last_login_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Datetime of most recent login (null if never logged in)."},"created_at":{"type":"string","format":"date-time","description":"Admin account creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Last admin record update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-deletion timestamp (null = active)."}},"required":["id","email","status","privilege_level","created_at","updated_at"],"description":"Administrator profile record from todo_list_admins. Contains full non-credential business fields and operational audit markers, but never exposes password_hash. Used for secure dashboarding, session context, and privilege management."},"ITodoListUser.IRequest":{"type":"object","properties":{"email":{"type":"string","description":"User's login email address. This is used to filter the user list by an exact email match. Must conform to the email address format as defined by the todo_list_users.email column. If omitted, no filtering by email occurs."},"name":{"type":"string","description":"Optional partial or full match filter for the user's display name. Used in admin search and compliance review interfaces. Complies with the todo_list_users.name column (nullable)."},"status":{"type":"string","description":"Account status filter. Used to locate users by specific account lifecycle state (such as active, locked, or disabled). Must match values found in the todo_list_users.status column."},"created_from":{"type":"string","format":"date-time","description":"Include only records created after or at this UTC timestamp. For ranged registration-date queries. Must parse as ISO 8601 date-time."},"created_to":{"type":"string","format":"date-time","description":"Include only users created before or at this UTC timestamp. Defines the end boundary of registration date filtering in admin queries."},"last_login_from":{"type":"string","format":"date-time","description":"Lower bound filter for last successful login time, for account activity analysis."},"last_login_to":{"type":"string","format":"date-time","description":"Upper bound filter for last successful login time."},"sort_by":{"oneOf":[{"const":"email","description":"Sorting key. Specifies which field to sort the user list by. Acceptable values reference indexed columns in todo_list_users."},{"const":"created_at","description":"Sorting key. Specifies which field to sort the user list by. Acceptable values reference indexed columns in todo_list_users."},{"const":"last_login_at","description":"Sorting key. Specifies which field to sort the user list by. Acceptable values reference indexed columns in todo_list_users."},{"const":"name","description":"Sorting key. Specifies which field to sort the user list by. Acceptable values reference indexed columns in todo_list_users."},{"const":"status","description":"Sorting key. Specifies which field to sort the user list by. Acceptable values reference indexed columns in todo_list_users."}],"description":"Sorting key. Specifies which field to sort the user list by. Acceptable values reference indexed columns in todo_list_users."},"direction":{"oneOf":[{"const":"asc","description":"Sort order for listed users (ascending or descending). Default is descending for most recent-first orderings."},{"const":"desc","description":"Sort order for listed users (ascending or descending). Default is descending for most recent-first orderings."}],"description":"Sort order for listed users (ascending or descending). Default is descending for most recent-first orderings."},"page":{"type":"integer","minimum":1,"description":"Page number for paginated results, starting from 1. If omitted, defaults to 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of records per page. Default and maximum values subject to business rules."},"search":{"type":"string","description":"Free-text search term matching the user's name or email using text search index. Implements fuzzy/generic lookup in admin user queries."}},"description":"Advanced search, filtering, and pagination interface for admin APIs listing user accounts from todo_list_users. All properties correspond to columns or indexed fields in the user Prisma schema. Used for compliance reviews, operational dashboard queries, and administrative account management.","required":[]},"ITodoListUser":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"User's UUID primary key from todo_list_users.id."},"email":{"type":"string","format":"email","description":"Unique email for login and notifications (see Prisma todo_list_users.email)."},"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Display name of user (nullable)."},"avatar_uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Profile/avatar image URL, up to 80,000 characters; nullable."},"status":{"type":"string","description":"Current account status for business, lifecycle, or compliance (see Prisma 'status')."},"last_login_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Datetime of most recent successful login (null if never logged in)."},"created_at":{"type":"string","format":"date-time","description":"User record creation (UTC ISO 8601)."},"updated_at":{"type":"string","format":"date-time","description":"Most recent update timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp for soft deletion; null if not deleted. Used for regulatory compliance and retention controls."}},"required":["id","email","status","created_at","updated_at"],"description":"Full user profile, matching todo_list_users schema except for sensitive credentials. Used in admin dashboards, session authentication, and compliance. All business/deletion metadata included for audit and support visibility."},"ITodoListUser.IUpdate":{"type":"object","properties":{"email":{"type":"string","description":"Update the user's login email. Must pass business rules for uniqueness (across todo_list_users) and valid email formatting. Subject to permission restrictions."},"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Update to the user's display name. May be cleared (null) by admin. Adheres to naming/length business rules."},"avatar_uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Update the user's avatar/profile image URI. Null value removes avatar."},"status":{"type":"string","description":"Update the user's account status (e.g., activate, lock, suspend, disable). Only accessible to admin or system logic. Must conform to defined state values."},"password_hash":{"type":"string","description":"Update the user's password credential (stored as a bcrypt/argon2 hash). Only permitted by admin or dedicated credential reset endpoints."}},"description":"Admin or system interface to update permitted user fields on a todo_list_users row. Password hash and email updates require extra validation (uniqueness and security). All fields are optional (Partial<T> pattern). Used in PUT /users/{userId} for admin account maintenance.","required":[]},"ITodoListAdmin.IRequest":{"type":"object","properties":{"email":{"type":"string","description":"Admin login email filter. Restricts the listing to records with a matching email address (exact or partial match depending on UI/business rules)."},"name":{"type":"string","description":"Partial or full display name search filter for the admin listing."},"privilege_level":{"type":"string","description":"Filter for the admin privilege level (e.g., superadmin, support). Only returns records matching this privilege."},"status":{"type":"string","description":"Filter by current admin account status (active, suspended, etc.)."},"created_from":{"type":"string","format":"date-time","description":"Include only admins created after or at this UTC date-time. Format matches ISO 8601."},"created_to":{"type":"string","format":"date-time","description":"Include only admins created before or at this date."},"last_login_from":{"type":"string","format":"date-time","description":"Lower bound for last successful admin login, UTC."},"last_login_to":{"type":"string","format":"date-time","description":"Upper bound for last admin login, UTC."},"sort_by":{"oneOf":[{"const":"email","description":"Key to sort the admin list responses. Only pre-indexed fields allowed."},{"const":"created_at","description":"Key to sort the admin list responses. Only pre-indexed fields allowed."},{"const":"last_login_at","description":"Key to sort the admin list responses. Only pre-indexed fields allowed."},{"const":"name","description":"Key to sort the admin list responses. Only pre-indexed fields allowed."},{"const":"status","description":"Key to sort the admin list responses. Only pre-indexed fields allowed."},{"const":"privilege_level","description":"Key to sort the admin list responses. Only pre-indexed fields allowed."}],"description":"Key to sort the admin list responses. Only pre-indexed fields allowed."},"direction":{"oneOf":[{"const":"asc","description":"Sort direction (ascending or descending)."},{"const":"desc","description":"Sort direction (ascending or descending)."}],"description":"Sort direction (ascending or descending)."},"page":{"type":"integer","minimum":1,"description":"Page number of the results, starting from 1."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of admin records per result page. Bounded by business rules."},"search":{"type":"string","description":"Free-text search over admin name or email fields using full text index."}},"description":"Advanced search/filter, sorting, and pagination interface for listing admin users in the todo_list_admins table. Supports operational dashboards and compliance discovery endpoints.","required":[]},"ITodoListAdmin.IUpdate":{"type":"object","properties":{"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional new display name for admin profile.\n\nAdmin may update their profile name for easier identification in audit logs and dashboards. Mirrors the `name` column in `todo_list_admins`. Null clears profile display name."},"avatar_uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional new avatar image URL.\n\nUpdates the `avatar_uri` (profile picture) in `todo_list_admins`. Used for UI personalization; null value removes existing image."},"status":{"type":"string","description":"Optional new account status (e.g., active, suspended, locked).\n\nControls account accessibility for privileges. From `status` in `todo_list_admins`. Must follow valid values established by business logic."},"privilege_level":{"type":"string","description":"Optional new privilege_level (e.g., superadmin, support, auditor).\n\nAlters admin access rights and operational authority. Mirrors the `privilege_level` field in `todo_list_admins`."}},"required":[],"description":"Profile/status update DTO for an administrator account.\n\nAllows patching the name, avatar, status, or privilege_level for an admin via admin management UIs or operational workflows. Credential changes are not permitted here (see dedicated credential endpoints). Ensures controlled evolution of admin state in compliance with business and audit constraints."},"ITodoListTodo.IRequest":{"type":"object","properties":{"search":{"type":"string","description":"Text search filter for todo content (partial, case-insensitive).\n\nAllows keyword looking up across `content` field. Trims whitespace and ignores blank queries. Reference for productivity/task filtering in UI."},"completed":{"type":"boolean","description":"Optional: filter todos by completion state (true = only completed, false = only uncompleted).\n\nMaps to `completed` property of `todo_list_todos`. Used for filtering user's list by finished or unfinished tasks."},"due_date":{"type":"string","format":"date-time","description":"Optional: ISO8601 query for todos due on a specific day/date.\n\nFilters tasks whose `due_date` matches the provided value. Null or absent means no due date filtering."},"page":{"type":"integer","description":"Page number for pagination (1-based, default 1).\n\nUsed in paginated APIs for returning a subset (chunk) of the todo list. Applies to `todo_list_todos` listing endpoints, helping users and admins navigate large task sets."},"limit":{"type":"integer","description":"Number of records per page (default 20).\n\nAdjusts API result set size for productivity and performance. Linked to UI page size and user preference. Maps to corresponding limits in business policy."},"sort":{"type":"string","description":"Optional: sort order for query results (e.g., 'created_at:desc', 'due_date:asc').\n\nChanges the record order of listed todos. Defaults to business-defined sort (usually most recent first)."}},"required":[],"description":"Request DTO for searching/filtering user's todos (todo_list_todos).\n\nSupports advanced query parameters, including free-text content search, completion status filter, optional due date, pagination, and sort order. Used in user and admin task list endpoints to retrieve precisely the subset of tasks relevant for a specific operational context. Each parameter maps directly to a Prisma schema column for query safety."},"ITodoListTodo":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the todo record (UUID).\n\nServes as the primary key for referencing, updating, and deletion. Maps to `id` in `todo_list_todos`."},"todo_list_user_id":{"type":"string","format":"uuid","description":"Owner's user id (UUID).\n\nCorrelates the todo to its creator or owner (`todo_list_users.id`). Enforces row-level authorization and is used for partitioning user data and privacy enforcement."},"content":{"type":"string","description":"Main textual content for the todo (1-255 chars, trimmed, required).\n\nDirectly references the `content` column in `todo_list_todos`. All business validation performed here (no control characters, trimmed of whitespace, non-empty)."},"due_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional due date (ISO8601 date string).\n\nReferences the `due_date` in `todo_list_todos`. Nullable—null means no due date assigned. Used in UI and productivity features."},"completed":{"type":"boolean","description":"Is this todo completed?\n\nMaps to `completed` in `todo_list_todos`. True when marked as done by the user; false when active/incomplete. Drives productivity and progress logic."},"completed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp this todo was marked complete (null if not completed).\n\nReferences `completed_at` in `todo_list_todos`. Enables tracking completions for analytics and business reporting; null if active/uncompleted."},"created_at":{"type":"string","format":"date-time","description":"Created timestamp (UTC, ISO8601).\n\nRepresents the time when this todo was created (from `created_at` in `todo_list_todos`). Important for sorting, queries, and user timeline presentation."},"updated_at":{"type":"string","format":"date-time","description":"Last modification timestamp (UTC, ISO8601).\n\nTracks most recent updates to todo state or content (from `updated_at` in `todo_list_todos`). Used for timestamp-based queries and UI freshness indicators."}},"required":["id","todo_list_user_id","content","completed","created_at","updated_at"],"description":"Detailed representation of a single todo item, as defined in the `todo_list_todos` table.\n\nContains all user-owned task fields, metadata, and ownership. Used both for operational endpoints (retrieve, update, delete) and for returned data in listing, search, and reporting APIs. Fields track ownership, content, completion status, optional due date, and timing. All business constraints reflected here for enforcement of data correctness, privacy, and productivity rules."},"ITodoListTodo.ICreate":{"type":"object","properties":{"content":{"type":"string","maxLength":255,"description":"Main todo text, required. Must be trimmed, non-empty, maximum 255 characters, and not solely composed of whitespace or control characters. All entries are validated according to the business and database rules described in the functional requirements and Prisma schema column comments."},"due_date":{"oneOf":[{"type":"string","format":"date","description":"Optional due date for this todo in ISO 8601 yyyy-mm-dd format. May be null or omitted if unset. Business logic enforces date must be today or future; past dates are invalid."},{"type":"null"}],"description":"An optional due date for the todo. If not provided or null, the todo has no deadline. Must follow ISO format and cannot precede the todo's creation date."}},"required":["content"],"description":"Request body structure for creating a new todo item. This type defines the minimal content required by the todo list business rules and validation logic. The only required property is \"content\"; \"due_date\" is optional and must meet date validation if present. Ownership, completion, and timestamps are assigned by system logic."},"ITodoListTodo.IUpdate":{"type":"object","properties":{"content":{"type":"string","maxLength":255,"description":"Optional new content for this todo. If provided, it must be trimmed and non-empty, with no control characters, and up to 255 characters. Any update to this field must meet business validation (see functional requirements and schema docs)."},"due_date":{"oneOf":[{"type":"string","format":"date","description":"Optional new due date (ISO 8601 yyyy-mm-dd), must be today or a future date. Null if removing due date."},{"type":"null"}],"description":"Optional due date update for the todo. Null means remove the deadline. Must follow ISO 8601 format and cannot be set before todo creation."},"completed":{"type":"boolean","description":"If present, instructs the system to mark the todo as completed (true) or uncompleted (false). Omitted means no change."}},"required":[],"description":"Partial update type for a todo item. All fields are optional—only those present are changed. Ownership, id, and system meta fields are never accepted or updatable via this type. All changes undergo business rule and database schema validation."},"ITodoListAuditLog.IRequest":{"type":"object","properties":{"todo_list_admin_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter by acting admin id (uuid). Only audit logs matching this admin will be included if provided. Null or omitted means no filter."},"todo_list_user_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter by user id (uuid); selects logs associated with actions against this user. Null/omitted means any user."},"todo_list_todo_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional filter by todo id; restricts listing to actions on a specific todo. Null/omitted = no filter."},"action":{"oneOf":[{"const":"view"},{"const":"delete"},{"type":"null"}],"description":"Optional filter for action type; \"view\" or \"delete\". Null/omitted means any action."},"rationale":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional substring or keyword for rationale text filtering. Null or omitted disables content search."},"from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional filter for audit logs created at or after this ISO date-time. Null means no lower bound."},"to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional filter for audit logs created before or at this ISO date-time. Null means no upper bound."},"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Optional page number for pagination (1 = first). Default is 1."},"limit":{"oneOf":[{"type":"integer","minimum":1,"maximum":100},{"type":"null"}],"description":"Optional per-page limit (max 100). Default is 20."},"sort":{"oneOf":[{"const":"created_at"},{"const":"action"},{"const":"todo_list_admin_id"},{"const":"todo_list_user_id"},{"const":"todo_list_todo_id"},{"type":"null"}],"description":"Optional sort field. Typical values: created_at (default), action, admin/user ids. Null or omitted defaults to descending by created_at."},"direction":{"oneOf":[{"const":"asc"},{"const":"desc"},{"type":"null"}],"description":"Sort direction: \"asc\" for ascending, \"desc\" for descending; null/omitted for default ('desc')."}},"description":"Filtering and pagination input for audit log searching. All fields are optional and mutually combinable. Supports robust admin/operational compliance search as described in business requirements.","required":[]},"ITodoListAuditLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this audit log entry (matches id column in todo_list_audit_logs table)."},"todo_list_admin_id":{"type":"string","format":"uuid","description":"ID of the admin who performed the action (FK to todo_list_admins)."},"todo_list_user_id":{"type":"string","format":"uuid","description":"ID of the user whose todo was affected (FK to todo_list_users)."},"todo_list_todo_id":{"type":"string","format":"uuid","description":"ID of the todo item affected (FK to todo_list_todos)."},"action":{"oneOf":[{"const":"view","description":"The type of admin action on the todo—either 'view' or 'delete'; as defined in business rules and schema."},{"const":"delete","description":"The type of admin action on the todo—either 'view' or 'delete'; as defined in business rules and schema."}],"description":"The type of admin action on the todo—either 'view' or 'delete'; as defined in business rules and schema."},"rationale":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional free-form explanation or business rationale for the action; may be null or empty if not supplied."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when the audit log was created (audit trail)."}},"required":["id","todo_list_admin_id","todo_list_user_id","todo_list_todo_id","action","created_at"],"description":"Core audit log entity component, representing a single admin action on a user's todo (view or delete). All fields map directly to the todo_list_audit_logs table. Used for compliance, business monitoring, and security reviews."},"ITodoListAdmin.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique admin identifier (UUID). Reference to todo_list_admins.id in database. Used as the primary key for all administrator business actions and audit trails."},"email":{"type":"string","format":"email","description":"Admin account login email. Must be unique among all administrators. Used in admin authentication, notifications, and operations. Reference: todo_list_admins.email."},"name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Display name of the administrator for UI and management purposes. Nullable and optional. Pulled from todo_list_admins.name."},"avatar_uri":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Administrator profile/avatar image URL. May be displayed in dashboards/logs. Optional and nullable. Reference: todo_list_admins.avatar_uri."},"status":{"type":"string","description":"Operational status of the admin account (e.g., 'active', 'suspended'). Reference: todo_list_admins.status. Used for authorization checks."},"privilege_level":{"type":"string","description":"Business privilege level for this admin (e.g., 'superadmin', 'support'). Used to differentiate capability and access areas. Reference: todo_list_admins.privilege_level."},"last_admin_action_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of most recent privileged admin operation (ISO 8601 UTC). May be null if no actions yet. Reference: todo_list_admins.last_admin_action_at."},"last_login_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the admin last logged into their account (ISO 8601 UTC). Null if not yet logged in. Reference: todo_list_admins.last_login_at."},"created_at":{"type":"string","format":"date-time","description":"Admin account creation timestamp (ISO 8601 UTC). Used for onboarding/audit. Reference: todo_list_admins.created_at."}},"required":["id","email","status","privilege_level","created_at"],"description":"Summary record for an administrator account. Used in admin dashboard search, compliance listings, or management tables. Contains no authentication or password fields; only business metadata required for high-level views. All fields align with todo_list_admins schema definition and reflect administrative privilege without leaking security-sensitive fields. For full detail views or editing, use the main ITodoListAdmin schema."},"ITodoListTodo.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for the todo. Reference: todo_list_todos.id. Used for access, updates, and deletion."},"content":{"type":"string","maxLength":255,"description":"Main textual content of the todo. Required, plain text (no formatting). Must be 1–255 characters (business rule). Reference: todo_list_todos.content."},"due_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional due date for the todo (ISO 8601 format). Null if not set. Reference: todo_list_todos.due_date."},"completed":{"type":"boolean","description":"Whether this todo is marked as completed. Business rule: must default to false when created. Reference: todo_list_todos.completed."},"completed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of when this todo was completed (ISO 8601 UTC). Null if incomplete. Reference: todo_list_todos.completed_at."},"created_at":{"type":"string","format":"date-time","description":"When the todo was created (ISO 8601 UTC). Used for sorting and audit. Reference: todo_list_todos.created_at."}},"required":["id","content","completed","created_at"],"description":"Summary object for a todo task. Designed for list/search view in todo lists. Derived from todo_list_todos table fields, omitting user_id/owner, update timestamp, and audit details. Contains all user-visible aspects needed for standard UI views or admin search, but no security or meta fields. Ensures business rule compliance on content length."},"ITodoListAuditLog.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for this audit log record (todo_list_audit_logs.id). Unique identifier for finding this row in logs and audit trails."},"todo_list_admin_id":{"type":"string","format":"uuid","description":"ID (UUID) of admin account who performed the action. Reference to todo_list_admins.id. Used for cross-linking between audit log and admin records."},"todo_list_user_id":{"type":"string","format":"uuid","description":"ID (UUID) of the user whose todo was targeted. Reference: todo_list_users.id. Ensures traceability to the individual whose data was affected."},"todo_list_todo_id":{"type":"string","format":"uuid","description":"ID (UUID) of the todo item upon which the admin acted. Reference: todo_list_todos.id. Enables tracing the target of the admin action."},"action":{"oneOf":[{"const":"view","description":"Admin action performed on the todo. Enum values: 'view' (admin viewed todo), 'delete' (admin deleted todo). Business rule: Only these actions are allowed in the schema for audit logging purposes."},{"const":"delete","description":"Admin action performed on the todo. Enum values: 'view' (admin viewed todo), 'delete' (admin deleted todo). Business rule: Only these actions are allowed in the schema for audit logging purposes."}],"description":"Admin action performed on the todo. Enum values: 'view' (admin viewed todo), 'delete' (admin deleted todo). Business rule: Only these actions are allowed in the schema for audit logging purposes."},"rationale":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional explanation entered by the admin justifying this action. Free text (nullable). Useful for compliance review. Reference: todo_list_audit_logs.rationale."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this admin action occurred (ISO 8601 UTC). Reference: todo_list_audit_logs.created_at."}},"required":["id","todo_list_admin_id","todo_list_user_id","todo_list_todo_id","action","created_at"],"description":"Summary record for a single admin audit log entry. Used in filters/searches on audit_log lists. Includes all core references for tracking which admin did what, to which user/todo, for what action (with optional rationale). Pulled from todo_list_audit_logs schema, ensuring full traceability for compliance without exposing unrelated or sensitive records."}}}}