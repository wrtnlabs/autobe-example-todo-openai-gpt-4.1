{"operations":[{"specification":"Defines the registration process for new users in the minimal Todo list application. Tied to the 'todo_list_users' table, this operation allows anyone (public) to create an account by providing required fields: unique email and password (hashed via appropriate security procedures). On successful registration, a new record is inserted into 'todo_list_users' with 'email', 'password_hash', 'created_at', and 'updated_at' fields set. A new JWT access token and refresh token are issued if creation succeeds. No admin privileges are granted. All required validations for unique email and strong password are enforced, as noted in the database schema column comments. If the email is already registered, the operation returns an error.\n\nThe registration function is crucial for onboarding, supporting a minimal onboarding path aligned with the strict minimalism requirement—no profile, roles, or extra fields around registration.\n\nSecurity is managed by ensuring the password is never stored or returned in plain text, and the authentication token is built from verified credentials only. Rate limiting or additional anti-abuse controls can be added at the implementation level. Registration is required before any personal Todo management features are unlocked.\n\nThe primary business context for this operation is for new users creating their first identity in the system. No further workflow is required for 'user' registration. Related operations are 'login' and 'refresh', which complete the authentication workflow for subsequent accesses.","authorizationType":"join","description":"This operation enables public registration of a new user for the minimal Todo application. It creates a record in the 'todo_list_users' table with the provided email and hashed password. Both 'created_at' and 'updated_at' are set with the account creation timestamp (UTC ISO 8601).\n\nAll fields referenced (email, password_hash, created_at, updated_at) must be present and valid as per schema. The operation verifies email uniqueness and generates tokens upon successful join. The password is securely hashed as defined in the 'password_hash' column (never in plain text).\n\nNo privilege is granted beyond ordinary user (cannot access any other data). Account registration issues a user JWT token pair without any admin capability, precisely in line with minimalism principles for account management.\n\nSecurity practices require email uniqueness, password strength validation, secure token generation, and all onboarded fields are directly mapped to schema fields with no extension. This operation must be called only by unauthenticated/public clients.\n\nThis operation is always the first in the authentication flow, followed by login for future accesses or refresh for renewing tokens. It is related to the 'login' and 'refresh' operations for a complete authentication lifecycle.","summary":"Register a new user in the 'todo_list_users' table and receive JWT tokens for session start.","parameters":[],"requestBody":{"description":"User registration information for 'todo_list_users' (email, password)","typeName":"ITodoListUser.IJoin"},"responseBody":{"description":"JWT tokens and authorized user metadata after registration (authentication success)","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/user/join","method":"post"},{"specification":"Defines the user login flow for the minimal Todo application, corresponding to credential verification in the 'todo_list_users' table. Takes email and password as input, validates the credentials against 'todo_list_users.email' and 'password_hash'. On verification success, issues a new JWT access token and refresh token with payload fields reflecting user identity and permissions per schema. Updates the 'updated_at' field to record last activity timestamp. If login fails (email not registered or password mismatch), returns a clear error message without specifying which field was incorrect, following security best practices.\n\nThis operation is tightly bound to the core authentication workflow—users must log in before accessing any todo management operations. Rate limiting can be applied by implementation to protect against brute force attacks. All email and password checks use only actual schema fields—'email' and 'password_hash'.\n\nNo password or sensitive data is returned, only tokens and schema-mandated user information. This login operation is essential for member ('user') and admin flows.\n\nSecurity is managed by safe handling of credentials, correct password hashing, and non-disclosure of credentials. Only registered users should call this operation, not guests. The related operations are 'join' (for registration), and 'refresh' (for session renewal).","authorizationType":"login","description":"This operation authenticates users of the minimal Todo app by validating their provided email and password. It queries only 'todo_list_users', using fields 'email' and 'password_hash', and—upon successful credential match—issues new JWT tokens for access and refresh, following the strict security requirements.\n\nLogin updates the 'updated_at' field to log last login activity. No extra account or role information is returned; the authentication response includes only required fields.\n\nSecurity is ensured by: never revealing actual password or failure specifics, hashing all credentials, and rejecting all logins lacking valid schema-matching records. Each login attempt is isolated to the user account referenced by email.\n\nThe login process is the second step in end-user authentication workflows, after registration. Token refresh and logout are handled by additional endpoints. This operation is not accessible for admin or guest roles—it is only for member users as defined by the schema.","summary":"Authenticate a user in 'todo_list_users' with email/password and issue new JWT tokens.","parameters":[],"requestBody":{"description":"Login information (email and password) per 'todo_list_users' schema.","typeName":"ITodoListUser.ILogin"},"responseBody":{"description":"JWT tokens and authorized user metadata after successful login.","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/user/login","method":"post"},{"specification":"Defines the JWT token refresh operation for authenticated users in the minimal Todo list application. This is tied to the 'todo_list_users' table and is accessible only with a valid refresh token. The operation's input is a refresh token, which is verified for validity and activity status; upon successful verification, a new access/refresh token pair is issued to the user. No other account details are modified during refresh, but the 'updated_at' field of the user is updated to log the token renewal event.\n\nThe refresh endpoint supports stateless session renewal per business requirements, allowing seamless session continuation without repeated credential entry, as long as a valid refresh token exists. Token validation, revocation handling, and expiration enforcement are managed by back-end business logic, not exposed through this interface.\n\nSecurity is achieved through strict mapping of incoming tokens to actual user schema entries; no sensitive information is exposed. All fields referenced correspond precisely with the 'todo_list_users' schema, field names, and definitions. Related authentication operations include registration/join and login.\n\nThe refresh operation is a crucial part of JWT-based session longevity, allows short-lived access tokens, and supports secure, user-friendly authentication cycles without repeated manual login. No admin or guest privilege is available.","authorizationType":"refresh","description":"This endpoint allows authenticated users to renew their session by submitting a valid JWT refresh token. It references the 'todo_list_users' table for token validation and—if valid—generates new access and refresh tokens. The 'updated_at' field is updated to reflect token renewal.\n\nNo additional details are altered in the user record. Security is managed by fully verifying the refresh token, rejecting invalid or expired tokens, and exposing no extra account data.\n\nAll token operations are strictly mapped to real schema fields, and the response returns the minimal necessary authorized DTO with no extra information. This operation is essential for maintaining user login persistence under JWT strategies. Only available to users with valid refresh tokens issued by the system.\n\nThe refresh endpoint completes the authentication cycle in coordination with registration and login. Failure to provide a valid refresh token results in an authentication error with no account data disclosed.","summary":"Refresh JWT tokens for a user in 'todo_list_users', updating the session securely.","parameters":[],"requestBody":{"description":"Refresh token for renewing authentication in 'todo_list_users'.","typeName":"ITodoListUser.IRefresh"},"responseBody":{"description":"New JWT tokens and authorized user metadata after a successful refresh.","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/user/refresh","method":"post"},{"specification":"Implements administrator authentication and account management for the minimal Todo list application, mapped to the todo_list_admins table. This includes registration (join), login, and JWT token refresh based on admin records identified by unique email and password_hash. New admin accounts are registered with an email address and hashed password, and issued both access and refresh tokens on join. All passwords are securely stored via the password_hash field as specified, and email must be unique as enforced by the Prisma schema. Timestamps (created_at, updated_at) are included for audit purposes. This operation serves as the only entrypoint for creating admin-level access, and admin privileges are strictly separated from regular users at the table level. No additional account properties are referenced, as only essential identity and security fields exist in the schema.","authorizationType":"join","description":"This API registers a new admin account using the essential fields specified in the todo_list_admins schema: unique email and password_hash, issued at registration time. Each admin account is uniquely identified by the email and has its password securely stored as a hash. Upon successful registration, the endpoint issues a new access token and refresh token, embodying the authentication standard required for future privileged access by admins.\n\nThe implementation validates the email for uniqueness at the database level (@@unique on email field) and ensures the password is securely hashed before being persisted. The timestamps for creation and update (created_at, updated_at) are automatically managed for audit purposes and are not user-supplied.\n\nAdmin registration is functionally distinct from standard user registration: only entries in the todo_list_admins table can obtain admin-level access. There is no role overlap; admin accounts do not provide standard user functionality and have no reference to the todos or user tables. This precise separation is both a security and audit measure.\n\nFor security, registration input is validated for email uniqueness and password completeness. Passwords should be strong, and only hashes ever stored. Token issuance adheres to business rules for admin session management and access control.\n\nThis operation is necessary for all admin workflow authentication and is the exclusive way to add new admins. All subsequent admin login and session refresh flows rely on successful join.","summary":"Register a new admin account in todo_list_admins and issue initial admin tokens.","parameters":[],"requestBody":{"description":"Admin registration payload: email and hashed password (password_hash).","typeName":"ITodoListAdmin.ICreate"},"responseBody":{"description":"Authorized admin entity and authentication tokens.","typeName":"ITodoListAdmin.IAuthorized"},"authorizationRole":null,"name":"join","prerequisites":[],"path":"/auth/admin/join","method":"post"},{"specification":"Authenticate an administrator using email and password, validating against todo_list_admins. Issues new JWT access and refresh tokens for active sessions. Only admin records are considered (table: todo_list_admins) and authentication requires password matching via password_hash. No additional properties are referenced from the schema. Admin status is determined strictly by presence in the todo_list_admins table.","authorizationType":"login","description":"This API provides administrator login via email and password as defined in todo_list_admins. Email must be unique and previously registered. Password authentication is implemented by comparing the received password, securely hashed, to the stored password_hash field. Admin status is strictly enforced via membership in the todo_list_admins table; regular users are not permitted to authenticate as admins.\n\nUpon successful authentication, the endpoint generates and returns new access and refresh tokens, encapsulated as required for privileged sessions. JWT tokens contain admin role and identity claims to distinguish access scope.\n\nNo further user attributes are referenced, and only fields email and password_hash from the schema are required to validate credentials. The schema requires all admin emails to be unique, reducing impersonation risk.\n\nFor security, ensure passwords are always transmitted securely and never logged or exposed. Login attempts are limited to prevent brute-force attacks as dictated in higher-level security policy and business rules documents.\n\nThis endpoint is essential to admin authentication and is required before any privileged or system-wide access is granted. The tokens returned are used for all subsequent admin-level operations until expiration or revocation.","summary":"Authenticate an admin account from todo_list_admins and issue JWT access and refresh tokens.","parameters":[],"requestBody":{"description":"Authentication payload: admin email and password (plain).","typeName":"ITodoListAdmin.ILogin"},"responseBody":{"description":"Authorized admin identity and JWT authentication tokens.","typeName":"ITodoListAdmin.IAuthorized"},"authorizationRole":null,"name":"login","prerequisites":[],"path":"/auth/admin/login","method":"post"},{"specification":"Allows administrators to obtain fresh JWT access and refresh tokens using a valid refresh token. Supported by the todo_list_admins schema where admin identity is determined by stored refresh token validation. No additional table fields are required beyond unique admin identification. Tokens are reissued with current admin claims and expiration policies as per business rules for session management.","authorizationType":"refresh","description":"This API endpoint enables administrators to renew their session by presenting a valid refresh token, as per JWT session lifecycle for admin accounts managed in todo_list_admins. It uses the refresh token to validate the admin's identity and re-issues a new pair of access and refresh tokens on success. Only tokens mapped to an existing admin's identity in todo_list_admins are valid for refresh.\n\nNo extra data fields are referenced from the admin schema beyond identity linkage required by the token. This operation is essential for maintaining secure and continuous admin sessions without repeated credentials entry.\n\nSecurity best practices mandate that expired, revoked, or invalid refresh tokens must be rejected. Tokens are tied directly to admin accounts and cannot be shared or used cross-role or cross-user. The JWT contents encode admin role information and enforce privilege separation from regular users in the system.\n\nNo password or email is required for this operation—only the refresh token supplied by the client. This endpoint is a foundational part of admin authentication flows and supports stateless, scalable session management for admins.\n\nThis operation is necessary to maintain admin authentication state and avoid repeated logins. All advanced admin functions require a non-expired valid access token issued through the login or refresh endpoints.","summary":"Refresh an admin JWT access and refresh token set for ongoing sessions.","parameters":[],"requestBody":{"description":"Refresh token request, typically providing the current refresh token.","typeName":"ITodoListAdmin.IRefresh"},"responseBody":{"description":"Authorized admin data and renewed JWT tokens.","typeName":"ITodoListAdmin.IAuthorized"},"authorizationRole":null,"name":"refresh","prerequisites":[],"path":"/auth/admin/refresh","method":"post"},{"specification":"This operation retrieves a paginated, filtered list of user accounts registered in the minimal Todo List application. It is based on the todo_list_users table in the Prisma schema, with support for search (by email) and pagination (offset/limit), allowing administrators to audit or manage users efficiently. No sensitive business logic other than filtering and sorting is exposed; authentication ensures only privileged roles can use this endpoint.","path":"/todoList/admin/users","method":"patch","summary":"List all registered users with paging and search (admin only)","description":"Retrieve a paginated and optionally filtered list of all registered user accounts in the minimal Todo List application. This endpoint allows administrators to search by email and supports pagination for large numbers of users, leveraging the todo_list_users table as defined in the schema.\n\nThe endpoint enforces access restrictions: only authenticated administrators can use this operation. Regular users are forbidden from accessing this API. Results include all standard fields (user id, email, timestamps) but do not contain password hashes or other sensitive information.\n\nCommon use cases include system administration, maintenance, and audit reviews by privileged staff. Related endpoints manage creation, update, or deletion of users and their associated data.","parameters":[],"requestBody":{"description":"Request parameters for user search, including email filter and pagination controls","typeName":"ITodoListUser.IRequest"},"responseBody":{"description":"Paginated results containing summary information for user accounts","typeName":"IPageITodoListUser.ISummary"},"authorizationRoles":["admin"],"name":"index","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves the details of a single user account from the todo_list_users table by unique userId. It is used by administrators to view the profile and metadata of any registered user. Regular users are not allowed to use this endpoint for other users. The endpoint returns all standard user details except sensitive authentication data, and is protected for admin-only access.","path":"/todoList/admin/users/{userId}","method":"get","summary":"Get details for a specific user account (admin only)","description":"Retrieve full information about a single user registered in the minimal Todo List application, using the provided userId as a lookup. This endpoint accesses the todo_list_users table and is intended strictly for administrative use, enforcing security via authentication and role checks.\n\nReturned data includes the user's id, email, account creation and update timestamps, and does not include password hashes. Only administrators can access this endpoint for any userId; regular users may not use this endpoint.\n\nThis API complements other endpoints for user creation, update, and deletion, allowing administrators to inspect account-specific data as needed for auditing or maintenance.","parameters":[{"name":"userId","description":"Unique identifier for the user to be retrieved","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of the target user account, excluding sensitive authentication data","typeName":"ITodoListUser"},"authorizationRoles":["admin"],"name":"at","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates (replaces) the information of a specific registered user referenced by userId within the todo_list_users table. Only administrative accounts are authorized. The request body contains only mutable user fields (for example, email or password hash update). Immutable fields, such as creation date and user id, cannot be changed. Business logic enforces unique email addresses and triggers updated_at. Password hashes must be pre-hashed when supplied.","path":"/todoList/admin/users/{userId}","method":"put","summary":"Update a specific user's information by ID (admin only)","description":"Update the properties (e.g., email, password hash) of a registered user in the minimal Todo List app, targeting the user account identified by userId. This operation modifies the todo_list_users table, enforcing all business rules for uniqueness, permissions, and field validation.\n\nOnly administrators may perform this operation, and all field updates must comply with data constraints: unique, properly formatted email; hashed password; and required timestamps. Upon successful update, updated_at is set to the current timestamp. Sensitive operations are logged for audit purposes.\n\nThis API is designed for rare administrative corrections, security responses, or manual account management; regular users cannot update other user records via this endpoint.","parameters":[{"name":"userId","description":"Unique identifier of the user to be updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Object containing updatable user fields (such as email or password hash)","typeName":"ITodoListUser.IUpdate"},"responseBody":{"description":"The updated user account record reflecting all changes","typeName":"ITodoListUser"},"authorizationRoles":["admin"],"name":"update","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation completely removes a user account from the todo_list_users table, referencing the userId as primary key. It performs a hard delete: the user record and all their associated todos are permanently erased from the system. No soft delete mechanism is in use for user accounts. Only admins can call this operation. This ensures compliance with data integrity and privacy requirements, enforcing cascading deletes for all related todos and preventing orphaned task records.","path":"/todoList/admin/users/{userId}","method":"delete","summary":"Delete a user and cascade-remove all their todos (admin only)","description":"Permanently remove a user account, including all owned todo tasks, from the system. This operation acts on the todo_list_users table, using the provided userId as the target. It enforces security, allowing only authenticated administrators to invoke it. The delete is physically executed (hard delete), severing all related data rather than simply flagging records as deleted.\n\nUpon successful completion, the user account and all todos connected through the foreign key to todo_list_todos are erased. This supports privacy mandates and prevents orphaned or leaked records. No response body is returned if successful; errors are signaled with appropriate codes and messages in case of permission, referential, or internal failures.\n\nThis endpoint is to be used by administrators in the rare case of account removal due to user request, policy violation, or data privacy obligations. Irrecoverable data loss is a consequence, so extra audit logging or confirmation mechanisms should be employed by clients.","parameters":[{"name":"userId","description":"Unique identifier of the user to be deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"Retrieves a paginated list of administrator accounts for system-wide management of the minimal Todo application. Each record in this operation represents an admin user with full privileges, as defined in the todo_list_admins table of the Prisma schema. The operation supports searching, filtering, and sorting administrators by email or creation date, primarily for maintenance or emergency recovery purposes. Does not expose sensitive information like password hashes. Admins are responsible for overseeing users and todos, and this endpoint is key for audit and control.","path":"/todoList/admin/admins","method":"patch","summary":"Search and retrieve a paginated list of administrator accounts from todo_list_admins.","description":"This API operation returns a filtered and paginated list of administrator accounts registered in the system. It operates over the todo_list_admins table, providing system-wide visibility for superusers and allowing easy search, filtering, and sorting based on email or the account creation date.\n\nAuthorization is strictly required: only users with the admin role may access this endpoint, as regular users are never permitted to view or manage administrator information. The returned data excludes sensitive fields such as password hashes, focusing only on operational metadata.\n\nThe operation is essential for maintenance, emergency support, and security audits. It is typically paired with endpoints for viewing the details of a specific administrator or for performing create, update, or delete actions. Error scenarios include forbidden access for non-admins, validation failures on filter parameters, and unexpected server errors.","parameters":[],"requestBody":{"description":"Filtering and pagination criteria for listing administrators.","typeName":"ITodoListAdmin.IRequest"},"responseBody":{"description":"Paginated list of administrator account summaries matching search criteria.","typeName":"IPageITodoListAdmin.ISummary"},"authorizationType":null,"authorizationRole":"admin","name":"index","prerequisites":[]},{"specification":"Retrieves the detailed profile of a specific administrator user from the todo_list_admins table, identified by adminId. This operation presents relevant profile data except for sensitive fields (like password_hash), giving authorized admins the ability to view metadata and history for a particular admin account for maintenance, audit, or troubleshooting activities.","path":"/todoList/admin/admins/{adminId}","method":"get","summary":"Get detailed information for a specific administrator by adminId from todo_list_admins.","description":"This API operation provides authorized admin users with the full metadata profile of a particular administrator account, uniquely identified by adminId in the todo_list_admins table. It is used for viewing core attributes such as email, timestamps, and other audit-relevant fields, while ensuring that password hashes and other sensitive data remain undisclosed.\n\nAccess to this endpoint is restricted strictly to users with admin privileges. Security and privacy are enforced at the endpoint and service layer. The information supplied helps with system maintenance, user audits, or when troubleshooting admin privileges and actions.\n\nRelated operations include listing all admins and enabling update or delete actions by adminId. Error responses include forbidden access for non-admins, not found for missing adminId, and resource access violations for unauthorized requests.","parameters":[{"name":"adminId","description":"The unique identifier (UUID) of the administrator to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Administrator profile data matching the supplied adminId.","typeName":"ITodoListAdmin"},"authorizationType":null,"authorizationRole":"admin","name":"at","prerequisites":[{"endpoint":{"path":"/todoList/admin/todos","method":"post"},"description":"An admin must exist in the system before querying their administrator profile by adminId. The only available POST operation that creates an admin entity is POST /todoList/admin/todos; this must be completed to obtain a valid adminId for the GET operation."}]},{"specification":"Updates the metadata for a specific administrator account in the todo_list_admins table, targeted by adminId. Supports changing updatable attributes like email or password (hashed), and updates audit timestamps. This operation is available exclusively to users with the admin role to manage privileges, rotate credentials, or correct metadata. Does not support changing the adminId itself.","path":"/todoList/admin/admins/{adminId}","method":"put","summary":"Update administrator profile details for a target admin, identified by adminId.","description":"This API endpoint allows authorized admin users to update an administrator record in the todo_list_admins table, selected by the adminId parameter. Supported fields for update typically include the admin's email address and a new password hash, as well as tracking changes in the updated_at timestamp for audit.\n\nStrict access controls are in effect: only users with admin privileges may invoke this operation. Changing adminId is not permitted; all updates are constrained to permitted fields. The response supplies the new metadata profile after updating.\n\nRelated endpoints include detail retrieval, list, and delete actions. Errors include forbidden for non-admins, not found for invalid adminId, and validation errors on input data.","parameters":[{"name":"adminId","description":"The unique identifier (UUID) of the administrator to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New metadata for the administrator, such as email or password hash, to apply to the target adminId.","typeName":"ITodoListAdmin.IUpdate"},"responseBody":{"description":"The updated administrator profile after modification.","typeName":"ITodoListAdmin"},"authorizationType":null,"authorizationRole":"admin","name":"update","prerequisites":[{"endpoint":{"path":"/todoList/admin/todos","method":"post"},"description":"An admin account must be created before it can be updated. POST /todoList/admin/todos is required to obtain a valid adminId reference for this operation."}]},{"specification":"Removes a specific administrator account from the todo_list_admins table, targeted by adminId. This is a hard delete (no soft deletion fields present in schema). Only users with the admin role may invoke this operation. Permanently deletes the admin account and all associated privileges—a critical operation to be audited.","path":"/todoList/admin/admins/{adminId}","method":"delete","summary":"Delete a specific administrator account, identified by adminId (hard delete) from todo_list_admins.","description":"This API operation allows an authorized admin to permanently remove an administrator account from the todo_list_admins table, selecting the record by adminId. The deletion is irreversible: the record is physically removed, along with the associated email and password data. As there is no deleted_at or similar soft delete flag in the schema, this is a hard delete operation.\n\nAccess is strictly limited to admin users, and this action should only be performed with care, typically when an admin is leaving the organization or privileges must be revoked. The operation will log the deletion for audit purposes and enforce all necessary security checks.\n\nPotential errors include forbidden access for non-admins, not found for invalid adminId, and resource conflicts (e.g., if last remaining admin; business logic must ensure at least one admin remains).","parameters":[{"name":"adminId","description":"The unique identifier (UUID) of the administrator to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"admin","name":"erase","prerequisites":[{"endpoint":{"path":"/todoList/admin/todos","method":"post"},"description":"An admin account must exist before it can be deleted. Use POST /todoList/admin/todos to create an admin before performing the DELETE operation on adminId."}]},{"specification":"This operation retrieves a paginated, filtered list of Todo items for the currently authenticated user, or for all users if the requester has 'admin' permissions. It operates on the todo_list_todos table from the Prisma schema. Filtering criteria may include completion status and search on task title, and results are sorted reverse-chronologically by creation date. The returned results are limited to a page size for performance and usability, supporting pagination and sorting options consistent with minimal Todo list requirements. Only the essential fields from the schema (id, title, is_completed, timestamps, etc.) are exposed. Admin users can access all todos; regular users see only their own.","description":"Retrieve a filtered, paginated list of Todo items using advanced search capabilities. This operation is available to authenticated users wishing to view their own todos, or to administrators wishing to view all users' todos. The returned data is sorted in reverse-chronological order by creation date, as described in the requirements.\n\nAuthorization and role validation are enforced so that standard users can access only their own todos, while admins can access the entire dataset. Text search for task titles and filtering by completion status are included based on application-level logic. Validation ensures users may not access data outside their permission scope.\n\nResults are paginated for efficiency and may be further sorted or filtered as required by client use cases. The type definitions for both the request and response DTOs are based directly on the minimal todo_list_todos schema structure, including PK, title, completion status, timestamps, and ownership references (for admin views).","summary":"Search and retrieve a filtered, paginated list of Todo items.","authorizationRoles":["user","admin"],"path":"/todoList/user/todos","method":"patch","name":"index","parameters":[],"requestBody":{"description":"Filter, search, and pagination options for retrieving Todo items.","typeName":"ITodoListTodo.IRequest"},"responseBody":{"description":"Paginated list of Todo summary items matching search/authorization criteria.","typeName":"IPageITodoListTodo.ISummary"},"authorizationRole":"user","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves a paginated, filtered list of Todo items for the currently authenticated user, or for all users if the requester has 'admin' permissions. It operates on the todo_list_todos table from the Prisma schema. Filtering criteria may include completion status and search on task title, and results are sorted reverse-chronologically by creation date. The returned results are limited to a page size for performance and usability, supporting pagination and sorting options consistent with minimal Todo list requirements. Only the essential fields from the schema (id, title, is_completed, timestamps, etc.) are exposed. Admin users can access all todos; regular users see only their own.","description":"Retrieve a filtered, paginated list of Todo items using advanced search capabilities. This operation is available to authenticated users wishing to view their own todos, or to administrators wishing to view all users' todos. The returned data is sorted in reverse-chronological order by creation date, as described in the requirements.\n\nAuthorization and role validation are enforced so that standard users can access only their own todos, while admins can access the entire dataset. Text search for task titles and filtering by completion status are included based on application-level logic. Validation ensures users may not access data outside their permission scope.\n\nResults are paginated for efficiency and may be further sorted or filtered as required by client use cases. The type definitions for both the request and response DTOs are based directly on the minimal todo_list_todos schema structure, including PK, title, completion status, timestamps, and ownership references (for admin views).","summary":"Search and retrieve a filtered, paginated list of Todo items.","authorizationRoles":["user","admin"],"path":"/todoList/admin/todos","method":"patch","name":"index","parameters":[],"requestBody":{"description":"Filter, search, and pagination options for retrieving Todo items.","typeName":"ITodoListTodo.IRequest"},"responseBody":{"description":"Paginated list of Todo summary items matching search/authorization criteria.","typeName":"IPageITodoListTodo.ISummary"},"authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation retrieves the detailed information for a single Todo item identified by ID, from the todo_list_todos table in the Prisma schema. The authenticated user may only request their own Todo items unless they have 'admin' role, in which case any Todo is accessible. The operation returns all relevant fields per the schema, including id, title, is_completed, timestamps, and relational owner ID. Proper validation ensures that only authorized access is permitted, with clear error handling for forbidden or missing resources.","description":"Retrieve the details of a specific Todo item given its unique identifier. This operation enforces security by confirming that the requester is either the owner of the Todo (standard user) or has administrative privileges. The detailed response includes all relevant schema fields: id, belonged user id, title, completion status, creation timestamp, last updated timestamp, completion timestamp, and deleted timestamp (for soft-deleted items).\n\nIf the Todo is not found or the requesting user lacks permission, the system returns an appropriate error. This function is essential to enable clients to display or further manipulate a single Todo item in detail. Any fields not present in the minimal schema are excluded from the response.","summary":"Retrieve the details of a specific Todo item by ID.","authorizationRoles":["user","admin"],"path":"/todoList/user/todos/{todoId}","method":"get","name":"at","parameters":[{"name":"todoId","description":"Unique identifier for the target Todo item.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information for the requested Todo item, if permitted.","typeName":"ITodoListTodo"},"authorizationRole":"user","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/user/todos","method":"post"},"description":"A Todo item must be created before its details can be retrieved by ID."}]},{"specification":"This operation retrieves the detailed information for a single Todo item identified by ID, from the todo_list_todos table in the Prisma schema. The authenticated user may only request their own Todo items unless they have 'admin' role, in which case any Todo is accessible. The operation returns all relevant fields per the schema, including id, title, is_completed, timestamps, and relational owner ID. Proper validation ensures that only authorized access is permitted, with clear error handling for forbidden or missing resources.","description":"Retrieve the details of a specific Todo item given its unique identifier. This operation enforces security by confirming that the requester is either the owner of the Todo (standard user) or has administrative privileges. The detailed response includes all relevant schema fields: id, belonged user id, title, completion status, creation timestamp, last updated timestamp, completion timestamp, and deleted timestamp (for soft-deleted items).\n\nIf the Todo is not found or the requesting user lacks permission, the system returns an appropriate error. This function is essential to enable clients to display or further manipulate a single Todo item in detail. Any fields not present in the minimal schema are excluded from the response.","summary":"Retrieve the details of a specific Todo item by ID.","authorizationRoles":["user","admin"],"path":"/todoList/admin/todos/{todoId}","method":"get","name":"at","parameters":[{"name":"todoId","description":"Unique identifier for the target Todo item.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information for the requested Todo item, if permitted.","typeName":"ITodoListTodo"},"authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/admin/todos","method":"post"},"description":"A Todo item must be created before its details can be retrieved by ID."}]},{"specification":"This operation creates a new Todo item for the authenticated user, persisting it into the todo_list_todos table per the Prisma schema. It requires a valid title up to 100 characters and initializes related fields, such as completion state (defaults to incomplete), creation, and update timestamps. The item is associated with the requesting user via foreign key. Input validation prevents empty titles or titles exceeding length, and ownership is enforced by server-side association. The response returns the created Todo object.","description":"Create a new Todo item for the authenticated user. The title field is mandatory, must be trimmed, non-empty, and no longer than 100 characters. On creation, the item is marked incomplete, and all timestamps (creation, update) are set to the current time. Ownership association is automatic, ensuring users cannot create Todos for others; admin users can also create Todos for their own admin account.\n\nAny business-rule or validation violations, such as duplicate titles (if such logic is enforced in application), title length issues, or whitespace-only titles, are reported with clear error messages. Only fields defined in the minimal schema (id, title, is_completed, timestamps, user ownership) are processed. The operation does not support setting completed or deleted fields upon creation; these fields are managed by update endpoints or internal logic.","summary":"Create a new Todo item for the current authenticated user.","authorizationRoles":["user","admin"],"path":"/todoList/user/todos","method":"post","name":"create","parameters":[],"requestBody":{"description":"Data required for creating a new Todo item: minimal, only title required.","typeName":"ITodoListTodo.ICreate"},"responseBody":{"description":"The created Todo item with all schema fields, as stored in the database.","typeName":"ITodoListTodo"},"authorizationRole":"user","authorizationType":null,"prerequisites":[]},{"specification":"This operation creates a new Todo item for the authenticated user, persisting it into the todo_list_todos table per the Prisma schema. It requires a valid title up to 100 characters and initializes related fields, such as completion state (defaults to incomplete), creation, and update timestamps. The item is associated with the requesting user via foreign key. Input validation prevents empty titles or titles exceeding length, and ownership is enforced by server-side association. The response returns the created Todo object.","description":"Create a new Todo item for the authenticated user. The title field is mandatory, must be trimmed, non-empty, and no longer than 100 characters. On creation, the item is marked incomplete, and all timestamps (creation, update) are set to the current time. Ownership association is automatic, ensuring users cannot create Todos for others; admin users can also create Todos for their own admin account.\n\nAny business-rule or validation violations, such as duplicate titles (if such logic is enforced in application), title length issues, or whitespace-only titles, are reported with clear error messages. Only fields defined in the minimal schema (id, title, is_completed, timestamps, user ownership) are processed. The operation does not support setting completed or deleted fields upon creation; these fields are managed by update endpoints or internal logic.","summary":"Create a new Todo item for the current authenticated user.","authorizationRoles":["user","admin"],"path":"/todoList/admin/todos","method":"post","name":"create","parameters":[],"requestBody":{"description":"Data required for creating a new Todo item: minimal, only title required.","typeName":"ITodoListTodo.ICreate"},"responseBody":{"description":"The created Todo item with all schema fields, as stored in the database.","typeName":"ITodoListTodo"},"authorizationRole":"admin","authorizationType":null,"prerequisites":[]},{"specification":"This operation updates an existing Todo item for which the authenticated user is the owner, or (if admin) for any Todo. It operates on the todo_list_todos table from the Prisma schema. The request can update the title (validating required constraints) and/or the completion status. The operation also updates the updated_at timestamp, and the completed_at timestamp if the is_completed flag is set. All fields are validated per schema and requirements. Ownership is checked; standard users may update only their own todos, while admins may update any Todo.","description":"Update the details of an existing Todo item, as specified by its UUID. The operation enforces strict validation for title updates: the title must be non-empty, without leading or trailing whitespace, and within the 100-character schema constraint. The operation supports updating the is_completed flag, managing the completed_at timestamp accordingly: if a Todo is marked complete, completed_at is set; if marked as incomplete, completed_at is cleared.\n\nOnly users who own the Todo can update it, except for admin users who may update any item. All changes are subject to full field validation as specified in the business rules. The updated Todo is returned in the response. If permission is denied, or if the item does not exist, the operation returns a clear error.","summary":"Update a specific Todo item’s title or completion status.","authorizationRoles":["user","admin"],"path":"/todoList/user/todos/{todoId}","method":"put","name":"update","parameters":[{"name":"todoId","description":"Unique identifier for the Todo item to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New values for the Todo's fields: title and/or completion status.","typeName":"ITodoListTodo.IUpdate"},"responseBody":{"description":"The updated Todo item after changes are saved.","typeName":"ITodoListTodo"},"authorizationRole":"user","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/user/todos","method":"post"},"description":"Todo item must be created before it can be updated. The item is referenced by todoId, which can only exist if the Todo has already been created."}]},{"specification":"This operation updates an existing Todo item for which the authenticated user is the owner, or (if admin) for any Todo. It operates on the todo_list_todos table from the Prisma schema. The request can update the title (validating required constraints) and/or the completion status. The operation also updates the updated_at timestamp, and the completed_at timestamp if the is_completed flag is set. All fields are validated per schema and requirements. Ownership is checked; standard users may update only their own todos, while admins may update any Todo.","description":"Update the details of an existing Todo item, as specified by its UUID. The operation enforces strict validation for title updates: the title must be non-empty, without leading or trailing whitespace, and within the 100-character schema constraint. The operation supports updating the is_completed flag, managing the completed_at timestamp accordingly: if a Todo is marked complete, completed_at is set; if marked as incomplete, completed_at is cleared.\n\nOnly users who own the Todo can update it, except for admin users who may update any item. All changes are subject to full field validation as specified in the business rules. The updated Todo is returned in the response. If permission is denied, or if the item does not exist, the operation returns a clear error.","summary":"Update a specific Todo item’s title or completion status.","authorizationRoles":["user","admin"],"path":"/todoList/admin/todos/{todoId}","method":"put","name":"update","parameters":[{"name":"todoId","description":"Unique identifier for the Todo item to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New values for the Todo's fields: title and/or completion status.","typeName":"ITodoListTodo.IUpdate"},"responseBody":{"description":"The updated Todo item after changes are saved.","typeName":"ITodoListTodo"},"authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/admin/todos","method":"post"},"description":"Todo item must be created before it can be updated. The operation is performed using todoId, which can only exist after the Todo item has been created for the admin."}]},{"specification":"This operation permanently deletes an existing Todo task from the database. It targets the todo_list_todos table in the Todo List application's Prisma schema. The operation is designed to enable either the owner (user) of the todo or an administrator to remove a specific todo item by its unique identifier. The deletion is a hard delete, as indicated by business requirements and the absence of any persistent soft-delete business rule (though a deleted_at column exists for potential future use). Related permission and audit constraints should be handled in the service layer: a user may only delete their own todos, while an admin can delete any todo.","path":"/todoList/user/todos/{todoId}","method":"delete","summary":"Permanently delete a Todo task from the todo_list_todos table by its ID.","description":"This API operation deletes a specific Todo task from the todo_list_todos table. Only authenticated users can invoke this endpoint, and business logic must ensure either that the requester is the owner of the todo or has admin privileges. If the user is not the owner and is not an administrator, the operation is denied.\n\nThe operation takes the todoId as a path parameter. The todoId must be a valid UUID corresponding to an existing Todo task. If no such Todo exists, the service should return an error or not-found status. Upon successful deletion, the Todo task is permanently removed from the database and cannot be recovered via standard means. The operation does not return a response body; a successful status code confirms deletion.\n\nThe todo_list_todos table defines the association between Todo tasks and users. Owning users are identified by the todo_list_user_id foreign key. The deleted_at column exists for potential future extensibility regarding soft deletes, but this operation performs a true hard delete, erasing both data and all related links. Admin users may invoke this operation on any todo, and all permission management should be implemented in business/service logic.","parameters":[{"name":"todoId","description":"Unique identifier of the Todo task to be deleted (UUID format).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["user","admin"],"name":"erase","authorizationRole":"user","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/user/todos","method":"post"},"description":"A Todo item must be created before it can be deleted by its ID."}]},{"specification":"This operation permanently deletes an existing Todo task from the database. It targets the todo_list_todos table in the Todo List application's Prisma schema. The operation is designed to enable either the owner (user) of the todo or an administrator to remove a specific todo item by its unique identifier. The deletion is a hard delete, as indicated by business requirements and the absence of any persistent soft-delete business rule (though a deleted_at column exists for potential future use). Related permission and audit constraints should be handled in the service layer: a user may only delete their own todos, while an admin can delete any todo.","path":"/todoList/admin/todos/{todoId}","method":"delete","summary":"Permanently delete a Todo task from the todo_list_todos table by its ID.","description":"This API operation deletes a specific Todo task from the todo_list_todos table. Only authenticated users can invoke this endpoint, and business logic must ensure either that the requester is the owner of the todo or has admin privileges. If the user is not the owner and is not an administrator, the operation is denied.\n\nThe operation takes the todoId as a path parameter. The todoId must be a valid UUID corresponding to an existing Todo task. If no such Todo exists, the service should return an error or not-found status. Upon successful deletion, the Todo task is permanently removed from the database and cannot be recovered via standard means. The operation does not return a response body; a successful status code confirms deletion.\n\nThe todo_list_todos table defines the association between Todo tasks and users. Owning users are identified by the todo_list_user_id foreign key. The deleted_at column exists for potential future extensibility regarding soft deletes, but this operation performs a true hard delete, erasing both data and all related links. Admin users may invoke this operation on any todo, and all permission management should be implemented in business/service logic.","parameters":[{"name":"todoId","description":"Unique identifier of the Todo task to be deleted (UUID format).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["user","admin"],"name":"erase","authorizationRole":"admin","authorizationType":null,"prerequisites":[{"endpoint":{"path":"/todoList/admin/todos","method":"post"},"description":"A Todo item must be created before it can be deleted by its ID through the admin operation."}]}],"components":{"authorization":[{"name":"user","description":"A registered user who can log in, log out, and manage their own personal todo list, but cannot access or modify other users’ data. Can create, update, mark as complete/incomplete, and delete their own tasks.","kind":"member"},{"name":"admin","description":"An administrator who can view and manage all users and todos in the system, has permission to perform maintenance and emergency recovery tasks.","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageITodoListUser.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoListUser.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITodoListAdmin.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoListAdmin.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageITodoListTodo.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoListTodo.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"ITodoListUser.IJoin":{"type":"object","properties":{"email":{"type":"string","format":"email","maxLength":255,"description":"User's unique email address for registration and authentication.\n\nThis field corresponds to the 'email' column in the 'todo_list_users' table of the minimal Todo app's database. Email addresses must be unique, properly formatted, and trimmed of any leading or trailing whitespace during validation. The application enforces uniqueness and format checks for security and usability. Example: user@example.com.\n\nCannot be empty and is required during user registration."},"password":{"type":"string","minLength":8,"maxLength":72,"description":"Plaintext password for user registration. This field is required in the join (registration) operation only, and is NOT stored in the database. At the service layer, this password will be securely hashed and persisted as 'password_hash'. Minimum length enforced for basic security.\n\nThe password must be strong enough to satisfy current business rules and is never returned in any response. Example: P@ssw0rd123. Cannot be empty, and must NOT be shorter or longer than the defined constraints."}},"required":["email","password"],"description":"Request body for registering a new end user account in the minimal Todo app.\n\nThis schema represents only the inputs necessary for user onboarding: unique email and plaintext password. No optional or extra fields are permitted, strictly maintaining minimalism. Format and uniqueness validations are handled server-side during registration. The password will be stored as a hash after initial handling; never returned or stored in plain text."},"ITodoListUser.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier of the newly registered user, mapped from 'todo_list_users.id'.\n\nThis value is a UUID and can be used as a stable user reference throughout the application."},"email":{"type":"string","format":"email","description":"Authorized user's email address after successful registration, login, or refresh operation.\n\nThis field is sourced from the 'todo_list_users.email' column, guaranteed to be unique and valid."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was created (ISO 8601 UTC). Set automatically at registration."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to the user account (ISO 8601 UTC). Set automatically when account metadata changes. Used for audit and concurrency purposes."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","created_at","updated_at","token"],"description":"Authorization response structure for end-user registration, login, or token refresh.\n\nThis schema is returned whenever a user successfully authenticates through join, login, or refresh operations. All sensitive values, such as the plain password or underlying hash, are omitted. Only public data and the JWT token group are returned, in compliance with minimal security best practices."},"ITodoListUser.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Registered email address used to identify the end user during login.\n\nCorresponds directly to the 'email' field in 'todo_list_users'. This value is used as the primary lookup credential and must be unique within users."},"password":{"type":"string","description":"The plaintext password entered by the user at login time.\n\nThis value must match the user's password before hashing. It is not stored, is not returned in any response, and is compared securely only during authentication. After hashing and verification, this value is discarded."}},"required":["email","password"],"description":"Request body for authenticating a user with login credentials.\n\nThis schema is required for user login operations in the minimal Todo app. The server processes these values, validates credentials against 'todo_list_users', and never returns them in plain text or in any output."},"ITodoListUser.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Existing refresh token associated with the authenticated user.\n\nThis token is provided to extend and maintain the user session, subject to validation and expiration rules."}},"required":["refresh_token"],"description":"Request body for renewing an authentication session with a refresh token.\n\nThis schema must be provided when requesting a new set of authentication tokens using a previously issued refresh token.\n\nOnly the 'refresh_token' property is required, and structure follows best practices for secure JWT session renewal."},"ITodoListAdmin.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Admin's unique email address for login. This field must be unique within the todo_list_admins table and is required for identification and authentication.\n\nThe email is used as the primary credential for admin login and must conform to standard email formatting rules. Uniqueness is enforced at the database level, ensuring no duplicate admin accounts can use the same email address. Examples: admin@example.com, system.owner@mail.com.\n\nRefer to Prisma schema field: email in todo_list_admins."},"password":{"type":"string","minLength":8,"description":"Plaintext password for the new admin account, submitted for registration only. The system will hash this password according to security best practices before persisting it in the password_hash field in the database.\n\nThis field is required for initial registration and should never be returned or stored in plaintext. Validation for minimum length and password strength occurs before hashing and storage.\n\nExamples: \"StrongP@ssword123\", \"adminPassword!2025\".\n\nRefer to security best practices in requirements analysis."}},"required":["email","password"],"description":"Payload required to create a new administrator account in the minimal Todo application. Includes only the essential fields: a unique email address and a plaintext password (which will be hashed by the system before storage).\n\nThis structure enforces minimum security and uniqueness standards for administrator registration. It should never include output-only or system-generated fields such as id, created_at, or password_hash. See Prisma schema 'todo_list_admins', field comments."},"ITodoListAdmin.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated administrator. This value comes from the id column in todo_list_admins and is assigned at registration.\n\nThis property is used for identity in authorization, logging, and audit trails. Format: standard RFC 4122 UUID, e.g., \"6b9f1ce0-3622-47c3-8591-061430c4e8f9\"."},"email":{"type":"string","format":"email","description":"Admin user's unique email address for login and identification.\n\nReferenced in the 'email' column of the 'todo_list_admins' table. Each admin must have a unique email address. Changing this value may impact loginability and security logging. Used for authentication and system notifications when necessary."},"created_at":{"type":"string","format":"date-time","description":"Timestamp marking the admin account creation.\n\nMatches the 'created_at' field in the 'todo_list_admins' table. Timezone is UTC, formatted according to ISO 8601. Used for auditing, tracking account history, and system monitoring."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp representing the last modification of the administrator record.\n\nMatches the 'updated_at' column in the 'todo_list_admins' table (ISO 8601, UTC). Updated whenever significant changes to the admin profile, password, or core metadata are made."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","email","created_at","updated_at","token"],"description":"Authorization response for an authenticated Todo List application administrator. Returned upon successful registration (join), login, or token refresh. Includes the administrator's unique ID and session JWT tokens for continued access.\n\nThe structure complies with best security practices by not returning any password or sensitive credential fields. Description aligns with business rules for IAuthorized types per requirements analysis."},"ITodoListAdmin.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"The admin's unique email address for login. This must correspond to a registered administrator account in todo_list_admins.\n\nValidation is enforced for proper email formatting and existence in the database. This is a required property in the login process."},"password":{"type":"string","minLength":8,"description":"The plaintext password submitted for authentication. This is verified against the stored credential (password_hash) for the admin account after hashing.\n\nPasswords must meet minimum length and strength criteria and are never stored or returned in plaintext. This field is only accepted at login; it is not part of responses.\n\nRefer to field-level constraints in business and security requirements."}},"required":["email","password"],"description":"Payload structure for administrator login requests in the Todo List minimal application. Must include the registered email address and the corresponding plaintext password for authentication.\n\nNo extra properties are included. This structure adheres strictly to schema and security requirements, referencing only the credentials needed for login."},"ITodoListAdmin.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"JWT refresh token required to renew an admin session and obtain new access/refresh tokens. Provided only by the authentication system and expected to match a valid issued token for the admin in question.\n\nThis property must be non-empty and must conform to the format of tokens issued by the system under previous successful authentication or registration."}},"required":["refresh_token"],"description":"Payload required for administrator token refresh operations in the minimal Todo List app. Must supply a currently valid refresh token issued for the admin account.\n\nNo extraneous properties are accepted; the structure is secured and minimal, mapped directly to backend session management logic."},"ITodoListUser.IRequest":{"type":"object","properties":{"page":{"type":"integer","format":"uint32","description":"Page number (starting at 1). Used for pagination when listing users. Must be a positive integer. Optional. Defaults to 1 if not provided."},"limit":{"type":"integer","format":"uint32","description":"Maximum number of users returned per page. Used for pagination when listing users. Optional. Defaults to 100. Should not exceed application-enforced page size limits."},"email":{"type":"string","description":"Optional email filter for user search. If provided, only users whose email contains or matches this value will be included. Supports partial matching or case-insensitive search depending on implementation."},"sort":{"oneOf":[{"const":"created_at","description":"Sort field for user list. Allows sorting users by 'created_at' timestamp or 'email' address. Enum constraint: only 'created_at' or 'email' accepted. Optional."},{"const":"email","description":"Sort field for user list. Allows sorting users by 'created_at' timestamp or 'email' address. Enum constraint: only 'created_at' or 'email' accepted. Optional."}],"description":"Sort field for user list. Allows sorting users by 'created_at' timestamp or 'email' address. Enum constraint: only 'created_at' or 'email' accepted. Optional."},"order":{"oneOf":[{"const":"asc","description":"Sort order direction: use 'asc' for ascending and 'desc' for descending results. Default is 'desc' for reverse-chronological ordering. Optional."},{"const":"desc","description":"Sort order direction: use 'asc' for ascending and 'desc' for descending results. Default is 'desc' for reverse-chronological ordering. Optional."}],"description":"Sort order direction: use 'asc' for ascending and 'desc' for descending results. Default is 'desc' for reverse-chronological ordering. Optional."}},"required":[],"description":"Request parameters for searching and paginating the user list. Used by administrators to retrieve a filtered and ordered list of user accounts from the 'todo_list_users' table.\n\nUse page and limit for paginated fetches, email to filter for a specific address, and sort/order to control presentation for admin audit or maintenance screens."},"ITodoListUser":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique user identifier (UUID, version 4, generated at registration). Corresponds to the 'id' primary key in the 'todo_list_users' table. Read-only; never user supplied."},"email":{"type":"string","description":"User's unique email address for login and identification. Enforced unique at the database level in 'todo_list_users'. Required at registration; must remain unique in updates."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user account was created (ISO 8601 UTC). Set automatically at registration."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to the user account (ISO 8601 UTC). Set automatically when account metadata changes. Used for audit and concurrency purposes."}},"required":["id","email","created_at","updated_at"],"description":"Represents a registered user in the minimal Todo List application. Maps directly to the 'todo_list_users' Prisma table. Contains core user account data for display, administration, or identification in downstream operations.\n\nSensitive data, such as password hashes, are strictly excluded. Only business logic and audit-relevant fields (id, email, timestamps) are exposed. Intended for use in account views for both administrators and users themselves."},"ITodoListUser.IUpdate":{"type":"object","properties":{"email":{"type":"string","description":"New email address for the user. If provided, must be unique within the system and comply with standard email formatting requirements. Optional—if omitted, the email remains unchanged."},"password_hash":{"type":"string","description":"New password hash to replace the existing password for secure login. Must be a valid output of the configured password hashing algorithm (never plain text). Optional; if omitted, password remains unchanged."}},"required":[],"description":"Object for specifying updates to a user account by an administrator. Used in the PUT operation for /todoList/admin/users/{userId}. Allows changes to mutable fields only, as per the underlying Prisma schema constraints. The only updatable fields are 'email' and 'password_hash'; id and timestamps are immutable or set by the backend. Password_hash must be pre-hashed before using this interface. Any field not included will remain unchanged.\n\nBusiness logic must validate uniqueness, non-emptiness, and format rules for updated values."},"ITodoListAdmin.IRequest":{"type":"object","properties":{"page":{"type":"integer","format":"uint32","description":"Page number (starting at 1). Used for administrator listing pagination. Optional. Defaults to 1."},"limit":{"type":"integer","format":"uint32","description":"Maximum number of admins returned per page. Pagination support for scalability and performance. Optional. Defaults to 100."},"email":{"type":"string","description":"Optional email address filter for admin search. Allows partial or case-insensitive matches depending on backend implementation. Used for maintenance, audit, or admin account discovery."},"sort":{"oneOf":[{"const":"created_at","description":"Sort field for administrator list. Use 'created_at' for chronological sorting and 'email' for alphabetic presentation. Enum constraint. Optional."},{"const":"email","description":"Sort field for administrator list. Use 'created_at' for chronological sorting and 'email' for alphabetic presentation. Enum constraint. Optional."}],"description":"Sort field for administrator list. Use 'created_at' for chronological sorting and 'email' for alphabetic presentation. Enum constraint. Optional."},"order":{"oneOf":[{"const":"asc","description":"Sort order: 'asc' for ascending, 'desc' for descending. Default may be 'desc' for recent-first. Enum constraint. Optional."},{"const":"desc","description":"Sort order: 'asc' for ascending, 'desc' for descending. Default may be 'desc' for recent-first. Enum constraint. Optional."}],"description":"Sort order: 'asc' for ascending, 'desc' for descending. Default may be 'desc' for recent-first. Enum constraint. Optional."}},"required":[],"description":"Request object for paginated, sorted administrator list retrieval and searching on '/todoList/admin/admins' API. Used only by admin users for operational, maintenance, or audit purposes.\n\nSupports advanced admin search, email filtering, and sorting needs. Matches constraints and capabilities defined in business rules and Prisma schema."},"ITodoListAdmin":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the admin account.\n\nRepresents the primary key in the 'todo_list_admins' table. Used to uniquely distinguish administrator users and manage their access rights. This value is generated by the system at registration and is not mutable."},"email":{"type":"string","format":"email","description":"Admin user's unique email address for login and identification.\n\nReferenced in the 'email' column of the 'todo_list_admins' table. Each admin must have a unique email address. Changing this value may impact loginability and security logging. Used for authentication and system notifications when necessary."},"created_at":{"type":"string","format":"date-time","description":"Timestamp marking the admin account creation.\n\nMatches the 'created_at' field in the 'todo_list_admins' table. Timezone is UTC, formatted according to ISO 8601. Used for auditing, tracking account history, and system monitoring."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp representing the last modification of the administrator record.\n\nMatches the 'updated_at' column in the 'todo_list_admins' table (ISO 8601, UTC). Updated whenever significant changes to the admin profile, password, or core metadata are made."}},"required":["id","email","created_at","updated_at"],"description":"Administrator entity schema for the minimal Todo list application.\n\nRepresents a registered admin user as defined in the 'todo_list_admins' table, containing only essential identification and audit fields. This structure excludes sensitive authentication information, instead providing a secure, audit-focused, minimal representation of admin account metadata.\n\nAll properties directly correspond to columns in the Prisma schema, facilitating system-wide administration and access management while enforcing strict minimalism."},"ITodoListAdmin.IUpdate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"New email address for the administrator account.\n\nUpdates the 'email' field in 'todo_list_admins'. Value must be unique and properly formatted (validated as email). Optional in update, but if provided must adhere to all uniqueness and syntax business rules."},"password_hash":{"type":"string","description":"New password hash for setting or rotating administrator credentials.\n\nCorresponds to the 'password_hash' column in 'todo_list_admins'. Must be the result of a secure hashing procedure by the backend. Never plain text. Optional in update, only provided if password is actually changed."}},"required":[],"description":"Update DTO for administrator records in the minimal Todo system.\n\nAllows modification of certain admin attributes: email and (hashed) password. All fields are optional to allow partial updates. Only system-assigned properties are changeable; id and timestamps are managed by the backend and are immutable in this structure. All modifications are audited in created_at/updated_at timestamps, as defined in the Prisma schema."},"ITodoListTodo.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Current page number for paginated results.\n\nControls paging when listing Todo items. Must be a positive integer if present. Default determined by implementation."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of Todo items to return in a single page of results.\n\nOptional. Capped for minimal app at 100 to prevent excessive resource usage. Defaults may apply in implementation."},"search":{"type":"string","description":"Text query for matching Todo 'title' (case-insensitive, partial match).\n\nEnables searching Todos via substring or pattern-match against the 'title' field, using advanced database filtering as supported by backend."},"is_completed":{"type":"boolean","description":"Filter by completed/incomplete status of Todos.\n\nWhen provided, restricts results to Todos marked as either completed (true) or active (false). Optional; omitting will not filter by status."}},"required":[],"description":"Request DTO for searching and paginating Todo items in the minimal Todo list application.\n\nSupports both member and admin search over the 'todo_list_todos' table, based on authorization context. Provides pagination, full-text search on 'title', and optional filtering by completion status. All parameters are strictly optional to support both simple and advanced querying.\n\nEach property is mapped to a column or filter supported by the Prisma schema and backend API.\n\nBusiness rules and security filtering based on authentication are expected to be applied before query execution."},"ITodoListTodo":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier for a Todo item. Corresponds to the 'id' field in the 'todo_list_todos' table. Used for lookups, updates, and deletion. System generated, never client supplied."},"todo_list_user_id":{"type":"string","format":"uuid","description":"Foreign key identifying the owner user for this Todo.\n\nReferences 'todo_list_users.id'. Enforced for ownership validation and cascading deletes when user is removed. Used for admin/system queries; regular users only see their own id here."},"title":{"type":"string","maxLength":100,"description":"The label or title describing the Todo task.\n\nSourced from the 'title' field in 'todo_list_todos'. Application logic requires it to be non-empty, trimmed, and at most 100 characters in length. Used for display and search."},"is_completed":{"type":"boolean","description":"Whether the Todo item is marked as completed (true) or is still active (false).\n\nMapped to the 'is_completed' field in the schema. Drives UI display logic and filter options in queries."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of when the Todo item was created (UTC, ISO 8601).\n\nMatches 'created_at' in the database. Immutable. Used for auditing, ordering, and filtering."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the most recent modification to the Todo (UTC, ISO 8601).\n\nSourced from 'updated_at' in the schema. Updated on edit or status change. Used for syncing and tracking changes."},"completed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the Todo was marked as complete, or null if not completed.\n\nNull when is_completed is false. Set to date-time (ISO 8601, UTC) when task is completed. Sourced from 'completed_at' field."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"If present, records the (soft) deletion timestamp for the Todo item. Null if not deleted.\n\nMapped to 'deleted_at' field in 'todo_list_todos' for future extensibility. Hard deletes are currently performed, so this will usually be null."}},"required":["id","todo_list_user_id","title","is_completed","created_at","updated_at"],"description":"Main schema for an individual Todo item in the minimal Todo List application.\n\nAll fields directly correspond to columns in the 'todo_list_todos' Prisma schema, defining ownership, content, completion status, and auditing information. The presence of required fields is enforced by database and application logic."},"ITodoListTodo.ICreate":{"type":"object","properties":{"title":{"type":"string","maxLength":100,"description":"Title of the Todo item. Must be non-empty, trimmed of whitespace, cannot include line breaks or special formatting. Maximum length after trimming is 100 characters. Required when creating a new Todo item. This property implements field-level validation as described in the business rules and mapped directly to the 'title' column in the todo_list_todos table. Example: 'Buy groceries'.\n\nThis property is validated at the application logic layer for minimalism and must never be omitted in the creation DTO."}},"required":["title"],"description":"Create DTO for adding a new Todo item to the user's list.\n\nThis schema defines the minimal required fields to create a Todo: only 'title' is accepted, matching the strict business rules of the minimal Todo app. Ownership and system-managed fields (is_completed, timestamps, user ID) are not client-supplied and are set automatically by the backend. No extraneous or optional properties are present, enforcing absolute simplicity. All business validation (non-empty, max length, trimmed) applies."},"ITodoListTodo.IUpdate":{"type":"object","properties":{"title":{"type":"string","maxLength":100,"description":"Optional updated title for the Todo item. If provided, must be non-empty after trimming, maximum 100 characters, and contain no line breaks or formatting. Mapped to the 'title' column in todo_list_todos. Null or omitted means no title update.\n\nValidation ensures the updated title is consistent with creation rules, aligning with business rules that only allow description/title and status to be modified in updates."},"is_completed":{"type":"boolean","description":"Optional updated completion status for this Todo item. True marks the task as completed, false sets it as active/incomplete. If set, the completed_at timestamp is updated or cleared automatically by business logic as required. Directly tied to the is_completed column in todo_list_todos. Null or omission leaves status unchanged.\n\nUpdate business rules dictate only status and title can be modified."}},"required":[],"description":"Update DTO for an existing Todo item.\n\nAllows partial updates: title and/or completion status can be changed. No system-managed fields (owner, timestamps, ID) are present. Properties are optional and may be supplied in any combination. Business rules enforce application of all validation on supplied fields. Only permitted fields for update are included, in line with minimalism and business requirements."},"ITodoListUser.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the user (UUID format). Serves as the primary key in the todo_list_users table. This value is never mutable and always required in the summary. Used to reference this user in administrative views.\n\nSee also 'id' column documentation in the Prisma schema."},"email":{"type":"string","description":"The registered email address of the user. Must be unique within todo_list_users, follows standard email format constraints. Only exposed in summary/admin contexts (not publicly visible). Used to identify login credentials and for display in administrative lists.\n\nDirectly corresponds to the 'email' column in the Prisma schema."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the account was created (UTC ISO 8601). Used for auditing and administrative purposes, may be used for sorting user lists. Directly corresponds to the 'created_at' column in todo_list_users. Never null, always present for every user."}},"required":["id","email","created_at"],"description":"Summary (ISummary) DTO for listing user accounts. This schema is used when displaying user information in admin or audit contexts, such as paginated user lists. It includes only safe, non-sensitive, and business-critical fields: id, email, and created_at. Security: does not expose password hashes or internal fields.\n\nEvery property directly maps to core columns in todo_list_users, ensuring complete data integrity and privacy."},"ITodoListAdmin.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the admin record. This value is the primary key for the todo_list_admins table and is assigned automatically at creation. UUID format, never changes after creation.\n\nReferenced in administrative audit trails and security logs."},"email":{"type":"string","description":"Registered email for the admin account. Must be unique within todo_list_admins and is used for login and identification in all admin operations. Has format and uniqueness enforced through schema."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the admin account was created (UTC ISO 8601). Used for auditing and tracking admin onboarding dates. Sourced from the 'created_at' column of todo_list_admins."}},"required":["id","email","created_at"],"description":"Summary (ISummary) DTO for displaying minimal administrator account information, commonly used in paginated or search admin lists. Only essential fields are included (id, email, created_at)—internal fields such as password hash are partially or completely omitted for security. This summary exposes no sensitive credentials or system-only metadata.\n\nAll properties are direct mappings from the todo_list_admins schema, supporting transparent system management while preserving privacy."},"ITodoListTodo.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the Todo item. This is the primary key for todo_list_todos in the database schema, defined as a UUID.\n\nThis field is used to reference, update, or delete a specific Todo. It must never be reused or guessed and is automatically generated by the database upon creation. Used throughout the application as the unique handle for each task."},"title":{"type":"string","description":"The title or label of the Todo item. This is a short string representing the task description, limited to 100 characters and trimmed of whitespace according to business validation rules.\n\nThe title must be non-empty and concise to ensure rapid review by users. Invalid or long titles are rejected at the application layer. When presented in summary (list) views, this is the canonical field the user sees."},"is_completed":{"type":"boolean","description":"Indicates whether the Todo item has been marked as complete (true) or is still active/incomplete (false).\n\nThis status controls list display filters and determines whether the completed_at field is populated. Summarized views always show the completion status to allow users to quickly scan finished versus pending items."},"created_at":{"type":"string","format":"date-time","description":"The ISO 8601 UTC timestamp when the Todo was created in the system. This field is set automatically by the database/server and is used for sorting items in reverse-chronological order as per requirements.\n\nThis timestamp is essential for user audit trails and is always provided, ensuring consistent experience for chronological browsing."},"updated_at":{"type":"string","format":"date-time","description":"The ISO 8601 UTC timestamp for the latest time the Todo was modified (title or completion status was changed). Always applied and updated server-side, never directly editable by end users.\n\nThis is used for sorting or display purposes in some UI flows and for audit throughout the application."}},"required":["id","title","is_completed","created_at","updated_at"],"description":"Summary information about a single Todo task, suitable for list or overview views in a minimal Todo list application.\n\nThis schema corresponds directly to the todo_list_todos table in the database, providing only the essential properties needed to identify and render a Todo in list contexts. It intentionally omits detail or soft delete tracking. All properties are non-sensitive, public, and mapped 1:1 with the minimal entity fields required for the business function."}}}}