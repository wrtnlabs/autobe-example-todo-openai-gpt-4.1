{"operations":[{"specification":"Implements registration for new users in the Todo List application. This operation enables a prospective user to create an account by supplying the required email and password, which are then securely stored in the todo_list_user table. The email must be unique, serving as the primary authentication credential, while the password is stored as a secure hash for security. Upon successful registration, the service issues initial JWT tokens, enabling immediate authenticated access for the user. Only fields present in the todo_list_user schema (id, email, password_hash, created_at, updated_at) are handled. The response returns authorization data as defined by the authentication schema. Security best practices are enforced: passwords are never returned, and duplicate emails are rejected. Related operations include login (authenticate existing user) and refresh (JWT session renewal).","authorizationType":"join","description":"This registration endpoint allows users to sign up for the Todo List application by providing a unique email address and password. The process creates a record in the todo_list_user table, which is the main actor entity representing all regular users and owners of todo items.\n\nRegistration utilizes the 'email' as the core identifier, enforcing uniqueness as per schema constraints. Passwords submitted are hashed and stored in the 'password_hash' column, ensuring no plain text passwords are ever persisted or exposed in responses, aligning with security requirements.\n\nRole-based business logic restricts this operation to unauthenticated clients only. Permissions enforce that already-registered (authenticated) users are blocked from accessing this operation for themselves, promoting single-account policy by design.\n\nUpon successful registration, initial JWT access/refresh tokens are provided, granting full authenticated session rights matching the 'user' role, as allowed in the permissions matrix.\n\nThis endpoint is tightly coupled with the login and token refresh operations, forming the core user account lifecycle. All error handling around uniqueness, validation, and secure storage is derived directly from the todo_list_user schema fields.","summary":"Register a new todo_list_user account and issue authentication tokens.","parameters":[],"requestBody":{"description":"Registration information for a new user (email, password).","typeName":"ITodoListUser.IJoin"},"responseBody":{"description":"Authorized session and user credentials upon successful registration.","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/user/join","method":"post"},{"specification":"Implements login (authentication) for already registered users in the Todo List application. Verifies supplied credentials (email and password), authenticates against the todo_list_user table using stored hashes, and, on success, issues fresh JWT tokens. All authentication fields (email, password_hash) are directly reflected in the todo_list_user schema. No additional business features are available at this endpoint; only users with a record in the table and correct credentials may use it. The response structure returns authorization data supporting ongoing session management. Login failure scenarios are limited to credential mismatch or non-existence of user. This operation is closely tied to join and refresh endpoints, forming the standard authentication workflow.","authorizationType":"login","description":"Authenticates a registered Todo List user by verifying submitted email and password credentials against the todo_list_user table. Matches the supplied email, then compares the provided password (after hashing) with the stored password_hash. Authentication success results in the issuance of JWT access and refresh tokens compliant with session policies for the 'user' role.\n\nAll fields handled map directly to the todo_list_user tableâ€”primarily 'email' and 'password_hash' (used internally). Authentication tokens returned are constructed without exposing any sensitive fields or database identifiers.\n\nRole-based business logic ensures this operation is available only to unauthenticated users. Existing sessions must be invalidated or expired before invoking login again.\n\nSecurity is paramount: rate limiting may be applied to repeated failed attempts per system policy (not encoded in this schema). All error returns are generic, never indicating which field was incorrect, to minimize information leakage.\n\nThis login operation is the required companion to join (registration) and refresh (token renewal) for complete account/session lifecycle management.","summary":"Authenticate a todo_list_user and issue new tokens.","parameters":[],"requestBody":{"description":"Login credentials for existing user (email, password).","typeName":"ITodoListUser.ILogin"},"responseBody":{"description":"Authorized session and user credentials upon successful login.","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":null,"name":"login","path":"/auth/user/login","method":"post"},{"specification":"Implements JWT token refreshing for authenticated users in the Todo List application. Supports session continuation using valid refresh tokens obtained previously from join (registration) or login. This operation verifies the supplied refresh token, matches it to a valid todo_list_user account, and, upon validation, issues new access and refresh tokens. No schema fields are modified or exposed; only the token grant logic interacts with user IDs and permissions mapped to the user role. Security constraints and session expiry checks derived from business rules and token payload properties. Related endpoints are login (credential authentication) and join (registration).","authorizationType":"refresh","description":"This token refresh endpoint provides authenticated Todo List users a means to renew their session by presenting a valid refresh token issued during previous login or registration. It validates the refresh token, confirms its association with an existing todo_list_user, and, if valid and unexpired, issues a new set of access and refresh tokens for seamless session continuation.\n\nToken logic is implemented per security and session policy: access tokens are short-lived (30 minutes), while refresh tokens may be valid up to 30 days, conforming to the requirements in the business documentation and permission matrix.\n\nThe token refresh process is stateless regarding the underlying todo_list_user schema; it does not alter, create, or remove table records. It simply reads and verifies minimal identifying fields linked to the user's identity. No sensitive info is returned.\n\nSecurity and session enforcement is maintained: expired, invalid, or tampered tokens result in error responses and session invalidation, supporting robust access control.\n\nThis operation is required to maintain authenticated user workflows, supporting login and join (registration) as the main entry points for session initialization.","summary":"Refresh JWT tokens for a todo_list_user session.","parameters":[],"requestBody":{"description":"Refresh token for session renewal process.","typeName":"ITodoListUser.IRefresh"},"responseBody":{"description":"Renewed session and user credentials upon successful refresh.","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":null,"name":"refresh","path":"/auth/user/refresh","method":"post"},{"specification":"This POST operation enables system administrators to register a new admin account in the Todo List application. The API endpoint is designed for the creation of a privileged user (admin), granting them the capability to manage user accounts and moderate all todo items in the system. The request requires a unique email and a securely hashed password as specified by the 'todo_list_admin' Prisma schema, which defines 'email' (unique) and 'password_hash' fields. The operation automatically sets 'created_at' and 'updated_at' timestamps, ensuring auditability and consistent record keeping for admin profiles. This function is accessible without prior authentication, as the goal is to allow initial admin onboarding, but access should be restricted according to deployment and security policy to avoid unauthorized privilege escalation. Errors are returned for duplicate emails or invalid input. Related operations are 'admin login' for authentication and 'refresh' for token management.","authorizationType":"join","description":"This API operation allows for the creation of a new admin account in the Todo List application, using the 'todo_list_admin' table as its persistent store. The endpoint is intended as the main entry point for onboarding administrators who will oversee user management, todo moderation, and enforce business compliance.\n\nAccount creation requires input fields for a unique 'email' and a securely hashed 'password_hash', both enforced at the database and application layers for unique constraint and non-reversible security, respectively. The admin registration flow is independent from ordinary user account management, providing role isolation for privileged operations.\n\nTimestamps for 'created_at' and 'updated_at' are set automatically on the backend for audit logs and compliance traceability, as indicated by the schema.\n\nSecurity considerations include strict uniqueness checks on 'email', the requirement that passwords are never stored or returned in plain text, and awareness that admin accounts created require further protection (e.g., protected enrollment, invitation, or separate admin channel) in production deployments.\n\nThis operation is related to admin authentication and the admin login endpoint and is required as a precursor for 'admin login' and token refresh workflows.","summary":"Register a new admin account (todo_list_admin table).","parameters":[],"requestBody":{"description":"Admin registration information (unique email, password hash).","typeName":"ITodoListAdmin.ICreate"},"responseBody":{"description":"Information for the newly registered admin and issued auth tokens.","typeName":"ITodoListAdmin.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/admin/join","method":"post"},{"specification":"This POST operation issues authentication tokens for admin login in the Todo List application. Admins authenticate using their unique email and password, with credentials validated against the 'todo_list_admin' table, specifically using the 'email' and 'password_hash' fields as defined in the Prisma schema. Upon successful authentication, the system issues secure JWT tokens (access and refresh) encapsulating the admin's role, identity, and session claim information. Timestamp fields ('created_at', 'updated_at') are used for audit but do not participate in authentication. Login failures (invalid credentials or unauthorized user) return specific error messages. This operation should be used in conjunction with 'admin join' to onboard new admins and 'admin refresh' for session renewal.","authorizationType":"login","description":"This API enables system administrators to authenticate and obtain access tokens in the Todo List application, interacting directly with the persistence layer defined by the 'todo_list_admin' schema. Admins must provide their registered email and correct password, which is hashed and checked against the 'password_hash' field. Successful login provides JWT access and refresh tokens with the admin's identity, role, and permitted session claims.\n\nSecurity practices enforced here include never returning raw password data (all password handling is via hashes) and always auditing authentication attempts using the schema-defined timestamps and audit infrastructure. Login errors cover invalid credentials or non-existent admin accounts.\n\nRole-specific session controls are implemented, granting access only to admin endpoints after successful authentication. This process is distinct from user login, targeting only records in 'todo_list_admin'.\n\nSession token payloads include admin ID, issued-at and expiry timestamps, and the 'admin' role claim as per business policy.\n\nUsed in tandem with admin registration ('join') and session refresh endpoints for a complete authentication lifecycle.","summary":"Authenticate admin with email and password (todo_list_admin table).","parameters":[],"requestBody":{"description":"Admin login credentials (email, password).","typeName":"ITodoListAdmin.ILogin"},"responseBody":{"description":"Admin authentication response with tokens and session info.","typeName":"ITodoListAdmin.IAuthorized"},"authorizationRole":null,"name":"login","path":"/auth/admin/login","method":"post"},{"specification":"This POST operation renews JWT tokens for authenticated admins in the Todo List application by validating a valid refresh token and issuing updated session credentials. It consults the 'todo_list_admin' table for admin identity and session validity, as defined in the Prisma schema. The operation helps preserve secure, uninterrupted privileged access for admins while enforcing token expiration and refresh policies. This endpoint requires a valid refresh token associated with an admin account. Expired or invalid refresh tokens result in appropriate error responses, and new tokens issued include admin role and claim details for role-based access control. It is a core part of the authentication flow alongside admin registration and login operations.","authorizationType":"refresh","description":"This API operation allows authenticated admins to refresh their access and refresh JWT tokens using a valid, non-expired refresh token, as prescribed by the 'todo_list_admin' Prisma schema. Token rotation is critical to maintain secure privileged access while enforcing session limitations, as required by business compliance policies.\n\nThe refresh logic uses the admin's identity from the refresh token, validates session eligibility, and issues a new token pair, with no password or credential resubmission needed. Token refresh can only be performed for existing, authenticated admin accounts; no schema fields beyond 'id' and uniqueness constraints are directly referenced in the operation.\n\nExpired, revoked, or tampered refresh tokens result in failed authentication and informative business error reporting. New tokens' payload includes admin ID, session timestamps, and 'admin' role as determined from the 'todo_list_admin' table.\n\nToken management is integral to the admin authentication workflow, providing session continuity following initial registration ('join') and authentication ('login'). Security includes rate limits, logging, and session integrity checks, with no sensitive credential leakage at any step.\n\nThis operation complements the admin login flow and is required for secure session renewal and sustained system access.","summary":"Refresh admin JWT session tokens using valid refresh token (todo_list_admin).","parameters":[],"requestBody":{"description":"Admin refresh token request payload.","typeName":"ITodoListAdmin.IRefresh"},"responseBody":{"description":"Updated admin authentication tokens and session info.","typeName":"ITodoListAdmin.IAuthorized"},"authorizationRole":null,"name":"refresh","path":"/auth/admin/refresh","method":"post"},{"specification":"This operation enables authenticated users to search, filter, and paginate their own todo items in the Todo List application. It operates on the todo_list_todos table, returning a paginated list based on filter criteria such as completion status, due date, and sorting preferences. Admin users may view todos for all users. Response includes metadata on pagination and total count.","path":"/todoList/user/todos","method":"patch","summary":"Search, filter, and paginate todo items for the authenticated user (or admin for all users) from the todo_list_todos table.","description":"This operation returns a filtered, sorted, and paginated list of todo items owned by the authenticated user or by any user if the requesting account has 'admin' privileges. It corresponds to the todo_list_todos table in the Prisma schema and supports searching by title/description, filtering by completion status (is_completed), due date, and custom sorting.\n\nSecurity is enforced such that regular users see only their own todos, while admins may view all todos in the system. Pagination defaults to 20 items per page with an upper limit of 100. Sorting by created_at (default), due_date, and is_completed is supported.\n\nRequest validation includes checking correct data types for filters and ranges (e.g., valid ISO 8601 for due_date). Only fields returned by the Prisma schema are included. Response contains todo item summary fields suitable for listing and identification. Related detail endpoints can be used to fetch full todo data as needed.","parameters":[],"requestBody":{"description":"Filtering, search, sorting, and pagination parameters for listing todo items.","typeName":"ITodoListTodos.IRequest"},"responseBody":{"description":"Paginated list of todo item summaries matching the filtering and sorting criteria.","typeName":"IPageITodoListTodos.ISummary"},"authorizationRole":"user","authorizationType":null,"name":"index"},{"specification":"This operation enables authenticated users to search, filter, and paginate their own todo items in the Todo List application. It operates on the todo_list_todos table, returning a paginated list based on filter criteria such as completion status, due date, and sorting preferences. Admin users may view todos for all users. Response includes metadata on pagination and total count.","path":"/todoList/admin/todos","method":"patch","summary":"Search, filter, and paginate todo items for the authenticated user (or admin for all users) from the todo_list_todos table.","description":"This operation returns a filtered, sorted, and paginated list of todo items owned by the authenticated user or by any user if the requesting account has 'admin' privileges. It corresponds to the todo_list_todos table in the Prisma schema and supports searching by title/description, filtering by completion status (is_completed), due date, and custom sorting.\n\nSecurity is enforced such that regular users see only their own todos, while admins may view all todos in the system. Pagination defaults to 20 items per page with an upper limit of 100. Sorting by created_at (default), due_date, and is_completed is supported.\n\nRequest validation includes checking correct data types for filters and ranges (e.g., valid ISO 8601 for due_date). Only fields returned by the Prisma schema are included. Response contains todo item summary fields suitable for listing and identification. Related detail endpoints can be used to fetch full todo data as needed.","parameters":[],"requestBody":{"description":"Filtering, search, sorting, and pagination parameters for listing todo items.","typeName":"ITodoListTodos.IRequest"},"responseBody":{"description":"Paginated list of todo item summaries matching the filtering and sorting criteria.","typeName":"IPageITodoListTodos.ISummary"},"authorizationRole":"admin","authorizationType":null,"name":"index"},{"specification":"This operation retrieves a single, fully-detailed todo item by its unique identifier from the todo_list_todos table. It is accessible to the todo's owner or to any admin. Returns all business fields present in the Prisma schema, enabling users to view, edit, or act upon their own todo, while admins may use it for moderation or auditing.","path":"/todoList/user/todos/{todoId}","method":"get","summary":"Retrieve a single todo item by identifier (for owner or admin) from the todo_list_todos table.","description":"This operation fetches the complete details of a specific todo item, identified via its unique todoId (UUID primary key, per the Prisma schema). Ownership and permission checks are enforced: regular users may access only their own todos, while admins are authorized to view any todo.\n\nReturned fields include: id, todo_list_user_id (owner's id), title, description, due_date, is_completed, created_at, updated_at, and completed_at, all as defined in the todo_list_todos Prisma table. This operation is used in tandem with the list, update, and delete endpoints. Errors occur if the todo does not exist or the user lacks access rights.\n\nSecurity best practices require explicit validation of the todoId and enforcement of privacy boundaries. This endpoint does not expose sensitive user information beyond the todo's owner reference.","parameters":[{"name":"todoId","description":"The unique identifier of the todo item to retrieve (UUID, per todo_list_todos Prisma schema).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All todo details for the specified todoId if allowed by permission control.","typeName":"ITodoListTodos"},"authorizationRole":"user","authorizationType":null,"name":"at"},{"specification":"This operation retrieves a single, fully-detailed todo item by its unique identifier from the todo_list_todos table. It is accessible to the todo's owner or to any admin. Returns all business fields present in the Prisma schema, enabling users to view, edit, or act upon their own todo, while admins may use it for moderation or auditing.","path":"/todoList/admin/todos/{todoId}","method":"get","summary":"Retrieve a single todo item by identifier (for owner or admin) from the todo_list_todos table.","description":"This operation fetches the complete details of a specific todo item, identified via its unique todoId (UUID primary key, per the Prisma schema). Ownership and permission checks are enforced: regular users may access only their own todos, while admins are authorized to view any todo.\n\nReturned fields include: id, todo_list_user_id (owner's id), title, description, due_date, is_completed, created_at, updated_at, and completed_at, all as defined in the todo_list_todos Prisma table. This operation is used in tandem with the list, update, and delete endpoints. Errors occur if the todo does not exist or the user lacks access rights.\n\nSecurity best practices require explicit validation of the todoId and enforcement of privacy boundaries. This endpoint does not expose sensitive user information beyond the todo's owner reference.","parameters":[{"name":"todoId","description":"The unique identifier of the todo item to retrieve (UUID, per todo_list_todos Prisma schema).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"All todo details for the specified todoId if allowed by permission control.","typeName":"ITodoListTodos"},"authorizationRole":"admin","authorizationType":null,"name":"at"},{"specification":"This operation creates a new todo item for the authenticated user, writing a record to the todo_list_todos table. Supports title (required), description (optional), due_date (optional), and sets initial completion status to false unless specified otherwise. Input validation strictly enforced as per business rules and schema constraints. Returns the complete created todo item.","path":"/todoList/user/todos","method":"post","summary":"Create a new todo item for the authenticated user in the todo_list_todos table.","description":"Allows an authenticated user to create a new todo, setting ownership via their user account (todo_list_user.id). The operation inserts into the todo_list_todos table, requiring a non-empty title (max 255 chars, whitespace-trimmed), optional description (max 2000 chars), and optional due_date (must be today or future, ISO 8601 UTC; past dates are rejected). is_completed defaults to false if unspecified. All other fields (created_at, updated_at) are set automatically by the system.\n\nSecurity and privacy are enforced: users can only create todos for themselves. The system responds with validation errors for missing/invalid title, field lengths, or improper due dates. Returns the full created todo item, including system-generated fields such as id and timestamps.","parameters":[],"requestBody":{"description":"Fields required to create a new todo item, enforcing business validation logic.","typeName":"ITodoListTodos.ICreate"},"responseBody":{"description":"Newly created todo item with all fields populated, as stored in todo_list_todos.","typeName":"ITodoListTodos"},"authorizationRole":"user","authorizationType":null,"name":"create"},{"specification":"This operation creates a new todo item for the authenticated user, writing a record to the todo_list_todos table. Supports title (required), description (optional), due_date (optional), and sets initial completion status to false unless specified otherwise. Input validation strictly enforced as per business rules and schema constraints. Returns the complete created todo item.","path":"/todoList/admin/todos","method":"post","summary":"Create a new todo item for the authenticated user in the todo_list_todos table.","description":"Allows an authenticated user to create a new todo, setting ownership via their user account (todo_list_user.id). The operation inserts into the todo_list_todos table, requiring a non-empty title (max 255 chars, whitespace-trimmed), optional description (max 2000 chars), and optional due_date (must be today or future, ISO 8601 UTC; past dates are rejected). is_completed defaults to false if unspecified. All other fields (created_at, updated_at) are set automatically by the system.\n\nSecurity and privacy are enforced: users can only create todos for themselves. The system responds with validation errors for missing/invalid title, field lengths, or improper due dates. Returns the full created todo item, including system-generated fields such as id and timestamps.","parameters":[],"requestBody":{"description":"Fields required to create a new todo item, enforcing business validation logic.","typeName":"ITodoListTodos.ICreate"},"responseBody":{"description":"Newly created todo item with all fields populated, as stored in todo_list_todos.","typeName":"ITodoListTodos"},"authorizationRole":"admin","authorizationType":null,"name":"create"},{"specification":"This operation updates an existing todo item identified by todoId in the todo_list_todos table. Supported for the todo's owner or admin. Permits modifications to title, description, due_date, and completion status, enforcing ownership/privilege checks and field validations as per the schema and business logic. Updates timestamps accordingly and returns the updated todo record.","path":"/todoList/user/todos/{todoId}","method":"put","summary":"Update a todo item by identifier (allowed to owner or admin) from the todo_list_todos table.","description":"Updates a specific todo item (by todoId/UUID) with new values for title, description, due_date, or is_completed. Applies field-level validation rules: title required (max 255 chars, trimmed), description (optional, max 2000 chars), due_date (optional, today/future only, ISO 8601 UTC), and is_completed (boolean). Business logic ensures only the owner or an admin can update the item.\n\nOn successful update, the operation writes to the todo_list_todos table, updates the updated_at timestamp, and sets or clears completed_at according to the completion status. Returns the full updated todo item. Attempts to edit non-owned or non-existent items result in permission or not found errors.","parameters":[{"name":"todoId","description":"The unique identifier of the todo item to update (UUID, as defined in todo_list_todos).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Field updates for the target todo item, enforcing validation and business rules.","typeName":"ITodoListTodos.IUpdate"},"responseBody":{"description":"The updated todo item, with all fields reflecting current system state.","typeName":"ITodoListTodos"},"authorizationRole":"user","authorizationType":null,"name":"update"},{"specification":"This operation updates an existing todo item identified by todoId in the todo_list_todos table. Supported for the todo's owner or admin. Permits modifications to title, description, due_date, and completion status, enforcing ownership/privilege checks and field validations as per the schema and business logic. Updates timestamps accordingly and returns the updated todo record.","path":"/todoList/admin/todos/{todoId}","method":"put","summary":"Update a todo item by identifier (allowed to owner or admin) from the todo_list_todos table.","description":"Updates a specific todo item (by todoId/UUID) with new values for title, description, due_date, or is_completed. Applies field-level validation rules: title required (max 255 chars, trimmed), description (optional, max 2000 chars), due_date (optional, today/future only, ISO 8601 UTC), and is_completed (boolean). Business logic ensures only the owner or an admin can update the item.\n\nOn successful update, the operation writes to the todo_list_todos table, updates the updated_at timestamp, and sets or clears completed_at according to the completion status. Returns the full updated todo item. Attempts to edit non-owned or non-existent items result in permission or not found errors.","parameters":[{"name":"todoId","description":"The unique identifier of the todo item to update (UUID, as defined in todo_list_todos).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Field updates for the target todo item, enforcing validation and business rules.","typeName":"ITodoListTodos.IUpdate"},"responseBody":{"description":"The updated todo item, with all fields reflecting current system state.","typeName":"ITodoListTodos"},"authorizationRole":"admin","authorizationType":null,"name":"update"},{"specification":"This operation permanently deletes a todo item from the todo_list_todos table, using its unique todoId. Only the item's owner or an admin may perform this action. The record is irreversibly removed (no soft delete logic involved, per schema), and no further access is allowed post-deletion. Confirmation is returned upon success.","path":"/todoList/user/todos/{todoId}","method":"delete","summary":"Permanently delete a todo item by identifier from the todo_list_todos table (owner or admin only).","description":"Removes a todo item from the todo_list_todos table based on the specified todoId (UUID). Strict permission checks are enforced: only the item's owner or admin can delete. This is a hard delete; the record is physically removed from the database with no soft-delete or recovery mechanism in the schema or business rules. Attempts to delete non-existent or non-owned todos result in not found or permission errors.\n\nOn successful deletion, a confirmation response is provided. All business and schema constraints are enforced, including cascade rules for related data if applicable. The system never exposes sensitive user data in the response.","parameters":[{"name":"todoId","description":"Unique identifier of the todo to be deleted (UUID, referencing the todo_list_todos primary key).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"user","authorizationType":null,"name":"erase"},{"specification":"This operation permanently deletes a todo item from the todo_list_todos table, using its unique todoId. Only the item's owner or an admin may perform this action. The record is irreversibly removed (no soft delete logic involved, per schema), and no further access is allowed post-deletion. Confirmation is returned upon success.","path":"/todoList/admin/todos/{todoId}","method":"delete","summary":"Permanently delete a todo item by identifier from the todo_list_todos table (owner or admin only).","description":"Removes a todo item from the todo_list_todos table based on the specified todoId (UUID). Strict permission checks are enforced: only the item's owner or admin can delete. This is a hard delete; the record is physically removed from the database with no soft-delete or recovery mechanism in the schema or business rules. Attempts to delete non-existent or non-owned todos result in not found or permission errors.\n\nOn successful deletion, a confirmation response is provided. All business and schema constraints are enforced, including cascade rules for related data if applicable. The system never exposes sensitive user data in the response.","parameters":[{"name":"todoId","description":"Unique identifier of the todo to be deleted (UUID, referencing the todo_list_todos primary key).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRole":"admin","authorizationType":null,"name":"erase"}],"components":{"authorization":[{"name":"user","description":"A registered user who can authenticate, create, view, update, and delete their own todo items.","kind":"member"},{"name":"admin","description":"A system administrator who can manage user accounts and moderate todos (including deleting inappropriate content).","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageITodoListTodos.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoListTodos.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"ITodoListUser.IJoin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"User's unique email address for registration and login. Must comply with RFC 5322 format for emails. This is the primary business identifier for authentication, as specified in the todo_list_user schema and requirements documentation.\n\nThe email address must be unique across all users in the system. The system enforces uniqueness and will reject registration if the email already exists."},"password":{"type":"string","minLength":8,"maxLength":100,"description":"User-supplied plain text password. Must meet business requirements for strength, length (typically at least 8 characters), and is never stored or returned in responses. The backend hashes this password and persists only the hash (password_hash). In case of registration failure or errors, this value is never exposed externally."}},"required":["email","password"],"description":"Input body for new user registration in the Todo List application. Mapped to the todo_list_user entity for creation, with email uniqueness constraint and secure password handling. Only email and password fields are accepted from the client. All business rules for registration, validation, and internal storage/processing are enforced as defined in the requirements analysis and Prisma schema."},"ITodoListUser.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"User's email address for login. Must already be present in the database as a registered user. Used as the primary credential for authentication, as explicitly defined in the todo_list_user table."},"password":{"type":"string","minLength":8,"maxLength":100,"description":"Plain text password supplied for authentication. Must meet security policy requirements for password strength. The value is never returned in responses, only checked against the stored password_hash for verification."}},"required":["email","password"],"description":"Request body for user login (authentication) in the Todo List application. Contains only email and password properties, as required by business rules for authenticating a user against the todo_list_user schema."},"ITodoListUser.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token previously issued to the user for session renewal. Must be valid, non-expired, and mapped to an existing authenticated user as per business policy. Required for secure, stateless session continuation process."}},"required":["refresh_token"],"description":"Request body for session token renewal for a Todo List user. Accepts only a refresh token string as input, as required for continuing an authenticated session. See business documentation on JWT lifecycle and refresh process."},"ITodoListUser.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier of the authenticated user, as defined in the todo_list_user Prisma schema (id, UUID v4). Used for later client-side API interactions."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","token"],"description":"Response body for successful authentication or registration of a user. Contains only id and token properties for security. No password or hash fields are ever returned as per schema and requirements."},"ITodoListAdmin.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Admin's unique email address for registration. Required as the credential for privileged access in the system, and subject to unique constraint in the todo_list_admin table. This is never shared with regular users and must follow secure onboarding rules."},"password":{"type":"string","minLength":8,"maxLength":100,"description":"Admin's plain text password for registration. Must meet higher security requirements suitable for privileged accounts. Only supplied on creation, never stored or returned. Backend hashes and stores this value securely as password_hash in the database."}},"required":["email","password"],"description":"Request body for registering a new admin account in the Todo List application. Contains only the unique email and supplied password to be hashed and persisted securely as defined in the todo_list_admin Prisma schema."},"ITodoListAdmin.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Admin's unique email address for authentication. Must be unique per admin and used as primary login credential for privileged access. (Prisma: todo_list_admin.email)"},"password":{"type":"string","description":"Admin's raw password for authentication. Not persisted; used only for login, where it is securely hashed and compared to `password_hash` from the database. Must meet minimum security criteria as defined by business rules. Never returned in responses."}},"required":["email","password"],"description":"Defines the input required to authenticate an admin for the Todo List system. These are mapped directly to the todo_list_admin entity, controlling privileged access."},"ITodoListAdmin.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token, as issued in previous authorization response. Used for session renewal."}},"required":["refresh_token"],"description":"Defines the input required for admin JWT token refresh. Only the previously issued refresh_token is accepted."},"ITodoListAdmin.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the authenticated admin user (UUID)."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","token"],"description":"Authorization response for admin login/join/refresh. Returns the admin user id and a JWT token structure for session management."},"ITodoListTodos.IRequest":{"type":"object","properties":{"is_completed":{"type":"boolean","description":"Filter: Only return todos matching this completion status. If omitted, all statuses are included."},"due_date_from":{"type":"string","format":"date-time","description":"Filter by due date range. Only return todos with due_date greater than or equal to this value. (ISO 8601 UTC)"},"due_date_to":{"type":"string","format":"date-time","description":"Filter by due date range. Only return todos with due_date less than or equal to this value. (ISO 8601 UTC)"},"search":{"type":"string","description":"Search by keyword in title or description. (Case-insensitive)"},"sort_by":{"oneOf":[{"const":"created_at","description":"Sort field: created_at | due_date | is_completed. Default: created_at"},{"const":"due_date","description":"Sort field: created_at | due_date | is_completed. Default: created_at"},{"const":"is_completed","description":"Sort field: created_at | due_date | is_completed. Default: created_at"}],"description":"Sort field: created_at | due_date | is_completed. Default: created_at"},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order: asc (oldest/soonest/false first) | desc (newest/nearest/true first). Default: desc"},{"const":"desc","description":"Sort order: asc (oldest/soonest/false first) | desc (newest/nearest/true first). Default: desc"}],"description":"Sort order: asc (oldest/soonest/false first) | desc (newest/nearest/true first). Default: desc"},"page":{"type":"integer","description":"Pagination: page number (1-based)"},"limit":{"type":"integer","description":"Pagination: items per page (max 100)"}},"required":[],"description":"Request payload for searching, filtering, sorting, and paging todo_list_todos records. All fields are optional; default behavior is to return most recent records for the current user."},"ITodoListTodos":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the todo item. Uniquely identifies a record in the todo_list_todos table. Referenced in all item-specific API operations."},"todo_list_user_id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) of the user who owns this todo. Maps to todo_list_user.id and is set automatically by the backend on creation for proper privacy and permission enforcement."},"title":{"type":"string","maxLength":255,"description":"Title of the todo item. Required, used for display and search. Limited to 255 characters, trimmed of whitespace. Maps to todo_list_todos.title."},"description":{"oneOf":[{"type":"string","maxLength":2000},{"type":"null"}],"description":"Optional details about the todo item (max 2000 chars, whitespace-trimmed). Maps to todo_list_todos.description."},"due_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Due date for the todo. Must be today or a future date (ISO 8601 UTC) if present. Used for overdue, upcoming, and filtering workflows. Maps to todo_list_todos.due_date."},"is_completed":{"type":"boolean","description":"Completion status. True if finished, false if still pending. Used for filtering and marking completion in business logic. Maps to todo_list_todos.is_completed."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when todo was created (ISO 8601 UTC, system managed). Maps to todo_list_todos.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of most recent modification (ISO 8601 UTC, system managed). Maps to todo_list_todos.updated_at."},"completed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp marking when this todo was completed, if present (ISO 8601 UTC). Maps to todo_list_todos.completed_at."}},"required":["id","todo_list_user_id","title","is_completed","created_at","updated_at"],"description":"Complete data model for a todo item in the system, based on the todo_list_todos Prisma schema. Includes all workflow, ownership, and business fields required by end-user and admin operations. Optional fields may be omitted/null according to business logic and system state."},"ITodoListTodos.ICreate":{"type":"object","properties":{"title":{"type":"string","maxLength":255,"description":"Title of the todo item.\n\nRequired upon creation. Must be non-empty, trimmed of leading/trailing whitespace prior to validation and storage. Used for display, searching, and identification. Maximum length is 255 characters, as enforced by schema and business rules.\n\nFailures to provide a valid title result in request rejection, with explicit validation error response. Title must NOT be null or missing."},"description":{"type":"string","maxLength":2000,"description":"Optional details about the todo item.\n\nMay be omitted. When present, the description is trimmed of whitespace before validation and storage. Supports searching and filtering. Maximum length is 2000 characters.\n\nShould provide user with space for elaboration on the todo's intent."},"due_date":{"type":"string","format":"date-time","description":"Optional due date by which the todo should be completed.\n\nIf present, must be a valid ISO 8601 date-time string, representing a UTC timestamp that is either today or a future date. Used for filtering and overdue/upcoming logic. Null or missing value indicates no due date.\n\nPast dates will be rejected by the service's input validation. The field is optional in the creation request."},"is_completed":{"type":"boolean","description":"Completion status. True if todo is created as completed, otherwise false.\n\nIf omitted, will default to false per system logic and business rules. Indicates whether the todo should be initially marked as completed at creation, or as incomplete (default).\n\nStrongly recommended to leave unset unless creating already-completed items is explicitly required."}},"required":["title"],"description":"Input schema for creating a new todo item as represented by the ITodoListTodos.ICreate TypeScript definition.\n\nEnforces all field requirements, validations, optional fields, and business logic for todo creation. Excludes system-generated fields (id, timestamps) and ownership (todo_list_user_id), as ownership is assigned by context, not client request. Fields must adhere to business and schema-level constraints (max length, date validity, etc.)."},"ITodoListTodos.IUpdate":{"type":"object","properties":{"title":{"type":"string","maxLength":255,"description":"New title for the todo item, if updating.\n\nOptional for update. If provided, must be non-empty, trimmed, and not exceed 255 characters after trimming. Subject to same business validation checks as creation. Omitted fields leave current value unchanged."},"description":{"type":"string","maxLength":2000,"description":"New description for the todo item, if updating.\n\nMay be set to an empty string to intentionally clear the description. Trims whitespace, max length 2000 characters, and supports rich-text display or basic search filtering. Optional field, omitted if no update is intended."},"due_date":{"type":"string","format":"date-time","description":"Updated due date for the todo item, if applicable.\n\nOptional for updates. If provided, must be a valid ISO 8601 date-time (UTC) and be today or a future date at time of update. Null or omitted means \"do not modify due date\". Business logic enforces constraint that past dates are rejected."},"is_completed":{"type":"boolean","description":"Updated completion status for the todo item.\n\nOptional for updates. If omitted, current value is left unchanged. When set, triggers logic to update completed_at timestamp accordingly (set if true; clear if false)."}},"required":[],"description":"Input schema for updating a todo item as represented by the ITodoListTodos.IUpdate TypeScript interface.\n\nAllows optional updates to title, description, due_date, and is_completed only. All fields may be omitted to perform a no-op. System/ownership fields are excluded. Strict business rules enforced for validation and permissible updates. Fields updated conform to the same validation and constraints as applied at creation."},"ITodoListTodos.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the todo item, as defined by the id primary key in todo_list_todos.\n\nServes as a consistent, immutable identifier for referencing a todo from the client side, via API calls for update, view, or delete."},"title":{"type":"string","maxLength":255,"description":"Title of the todo item.\n\nEssential display field in summary listings and the main business identifier for client usage.\n\nTrimmed and validated as per creation and update rules. Value never null or missing; used in combination with id as natural key for summaries."},"is_completed":{"type":"boolean","description":"Current completion status for the todo item.\n\nTrue if todo is marked completed, false if still pending or incomplete. Used to display status indicators and filter/search options. Always present in summary format."},"due_date":{"type":"string","format":"date-time","description":"Optional due date for the todo item.\n\nValid ISO 8601 UTC timestamp if present, null or omitted otherwise. Used for deadline visualization, overdue logic, and summary filtering. Field MAY be omitted if no due date set."},"completed_at":{"type":"string","format":"date-time","description":"Timestamp at which the todo was completed, if set. Null or omitted if incomplete.\n\nISO 8601 UTC format. Provides audit/compliance for marking completion, and can be used to support reporting/business KPI calculations."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp as assigned by the database and business process.\n\nRead-only system field, always present in output. ISO 8601 UTC format, used for chronological sorting, audit log, and display in summaries."},"updated_at":{"type":"string","format":"date-time","description":"Most recent update timestamp for the todo item.\n\nSet by the system at each update, edit, or modification event. Read-only field, ISO 8601 UTC format, always included in output. Used for recency-based sorting, display, and audit."}},"required":["id","title","is_completed","created_at","updated_at"],"description":"Summary type for listing or searching todo items (ITodoListTodos.ISummary).\n\nContains key business fields suitable for high-speed result display, omitting non-essential or potentially large text. Used for paginated listing, search results, and summary views. Includes required identifiers and status fields per business and schema constraints."}}}}