{"operations":[{"specification":"This is the registration (join) operation for the Todo List application's 'user' role. The operation creates a new user account in the 'todo_list_users' table using a unique, case-insensitive email address and a password. The email field is required and must be unique; the password is transformed into a secure salted hash (password_hash) before storage, ensuring that no plain passwords are ever persisted. Created accounts set 'is_email_verified' to false, requiring subsequent email verification before full access. Timestamp fields 'created_at' and 'updated_at' are populated at creation. Business logic enforces account uniqueness, validates required fields, and initiates the email verification process. Security-sensitive information like 'password_hash' is never returned in the response. On success, returns an authorized authentication response including JWT tokens as per business rules. This operation is part of the core authentication flow and may be linked to subsequent login and email verification flows required for access. Permanent account deletion (with cascading data removal) triggered by user-initiated account deletion is handled via separate endpoints. This endpoint does not permit account updates or deletions; those use separate operations.","authorizationType":"join","description":"This endpoint registers a new user in the 'todo_list_users' table, storing email and a securely hashed password. The 'email' field is required, must be unique, and is used for authentication and communication. The 'password_hash' field stores a salted hash of the user's password, never the plain password; validation and hashing are performed prior to persistence, protecting against common security attacks. The 'is_email_verified' flag is initialized to false, requiring users to complete an email verification flow before full access is granted, as referenced by the schema description. Timestamps for account creation and updates ('created_at', 'updated_at') are managed automatically to enable auditing and compliance.\n\nThis operation requires strict validation to enforce unique emails (case-insensitive) and strong password rules as dictated by business policy. Attempts to register using an existing email return a specific error. Upon successful registration, email verification is initiated, and access tokens are only issued after successful confirmation. Sensitive information, such as 'password_hash' and internal audit fields, are excluded from API responses.\n\nSecurity is paramount; all fields are verified for proper format, uniqueness, and strength prior to account creation. No authentication is required to access this operation, but access is rate-limited to prevent abuse. Directly integrates with login and password reset flows to enable secure credential management for the user role.\n\nDeletion of the created account or updates to email/password are handled by separate endpoints. This operation's activity is logged for audit and privacy compliance. All authentication workflows for 'user' originate here, and all user-owned resources in related tables cascade upon full account deletion.","summary":"Register a new user account in the todo_list_users table (authentication join operation) for registration and onboarding.","parameters":[],"requestBody":{"description":"Registration information for creating a new user account (email, password).","typeName":"ITodoListUser.IJoin"},"responseBody":{"description":"Authorized authentication tokens and user identification upon successful registration for the 'user' role.","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/user/join","method":"post"},{"specification":"This is the login/authentication operation for the Todo List application's 'user' role. It validates credentials (email, password) against the 'todo_list_users' table, specifically checking for a matching email (case-insensitive), ensuring the account is not soft-deleted (deleted_at is null), and confirming that 'is_email_verified' is true. The provided password is securely validated against the stored 'password_hash' using best practice salting and hashing procedures. Upon successful authentication, issues short-lived access and long-lived refresh tokens using information from the 'todo_list_auth_sessions' table, and logs session device/user_agent data for auditing purposes. Authentication failures provide generic error messages for privacy; never disclose which field was incorrect. Security logic includes brute force protection and session management. Successful authentication returns an authorized response with all required JWT data (access/refresh tokens and their expiry details), and creates a new row in todo_list_auth_sessions for active session tracking. Revocation, password change, and account recovery are handled separately. This operation does not retrieve or expose password hashes, even on failure.","authorizationType":"login","description":"This endpoint authenticates a user via credentials (email and password) using 'todo_list_users'. It enforces case-insensitive email lookup, explicit null-check of 'deleted_at' (account must not be soft-deleted), and confirms 'is_email_verified' is true before issuing authentication tokens. Passwords are validated against the 'password_hash' field using a secure, salted comparison that prevents timing attacks or credential leaks. On success, issues JWT tokens and records a session in the 'todo_list_auth_sessions' table for session auditing and active login management.\n\nUnsuccessful attempts are handled by business rules: generic error messages are returned (never revealing if email or password was incorrect) and repeated failed attempts are rate-limited to mitigate brute-force attacks. If 'is_email_verified' is false, no login is permitted and a verification-needed message is issued. If 'deleted_at' is not null, login is also prohibited, indicating the account is disabled or deleted.\n\nNo password hash or credential details are ever exposed to clients, and successful authentications update last-used session information for security monitoring. Password changes and global logout by session are handled via other endpoints using the session and password reset tables described in the schema. Logs authentication attempts for audit purposes and integrates closely with join/registration and password reset operations.\n\nOperation requires no authentication to call, but all tokens and credentials returned are subject to strict validation and business session expiration policies. Only intended for the 'user' role as defined by the database schema.","summary":"User login/authentication for the todo_list_users table (login to receive JWT access and refresh tokens).","parameters":[],"requestBody":{"description":"Credentials for user authentication: email and password.","typeName":"ITodoListUser.ILogin"},"responseBody":{"description":"Authenticated session tokens and user identification data for the 'user' role upon successful login.","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":null,"name":"login","path":"/auth/user/login","method":"post"},{"specification":"This is the JWT token refresh operation for the 'user' role in the Todo List application. It uses the todo_list_auth_sessions table to validate a submitted refresh token, ensuring the session is unexpired, not revoked ('revoked_at' is null), and linked to an active user (todo_list_users) without a soft-deleted account ('deleted_at' is null). Validations include checking the expiration (expires_at) and ensuring the session_token provided matches a current, active session. On successful validation, new access and refresh tokens are issued, and session metadata (updated_at, user_agent, ip_address) is updated as appropriate. Operations are logged for audit purposes. Invalidated, expired, or revoked refresh tokens result in an explicit error and require re-authentication. This operation is essential for long-lived sessions and mobile clients, maintaining a seamless user experience without requiring re-login credentials until absolute expiry or account status change (e.g., deletion or password reset).","authorizationType":"refresh","description":"This endpoint refreshes JWT authentication tokens for an authenticated 'user'. It uses the 'todo_list_auth_sessions' table to validate the provided session_token (refresh token) by checking for matching, active, unexpired, and non-revoked session. It also confirms the linked user exists and is not soft-deleted ('deleted_at' is null). Session expiration ('expires_at') and revocation logic are strictly enforced per schema and business rules, ensuring users can only refresh tokens when all security conditions are satisfied.\n\nIf the submitted refresh token is expired, revoked, or does not correspond to a valid, active session, the operation fails with a specific error requiring re-authentication via the login endpoint. Successful refreshes update relevant session metadata (updated_at, user_agent, ip_address) and return new JWT access/refresh tokens per the established session policy. All activity is logged for compliance and security review, referencing the corresponding user account.\n\nOperation is only available to authenticated users presenting a valid refresh token (session_token); it does not require explicit authentication on call but uses token validation per security best practices. Tightly integrated with the login and join/register operations to provide seamless authentication for the 'user' role defined in the schema.","summary":"Refresh JWT authentication tokens for 'user' role using todo_list_auth_sessions (refresh token operation).","parameters":[],"requestBody":{"description":"Refresh token request with session_token for the 'user'.","typeName":"ITodoListUser.IRefresh"},"responseBody":{"description":"Refreshed JWT access and refresh tokens for the 'user' role on successful validation.","typeName":"ITodoListUser.IAuthorized"},"authorizationRole":null,"name":"refresh","path":"/auth/user/refresh","method":"post"},{"specification":"This is the email verification operation for new user accounts in the 'todo_list_users' table. After registration, users must verify email ownership; this endpoint accepts the unique verification token and user ID, and upon success, updates the field 'is_email_verified' to true. The endpoint ensures the user exists, is not soft-deleted ('deleted_at' is null), and that 'is_email_verified' is currently false. Upon successful verification, an audit log is created, and the verified timestamp is optionally recorded for compliance (recorded by the backend in updated_at). Failed or expired verification tokens return explicit errors. The endpoint does not issue JWT tokens; successful verification enables subsequent login via the usual authentication process. Email re-verification flows are handled by resending a new verification token and are managed via separate operations. This operation is critical for security and regulatory compliance, especially when accounts may be created using unverified emails.","authorizationType":null,"description":"This endpoint verifies ownership of a user's email address post-registration, operating on the todo_list_users table. Upon successful submission of a valid token and user identification (id), the field 'is_email_verified' is set to true, unlocking authentication and full service access for the user. This operation rejects attempts for already-verified accounts, deleted users ('deleted_at' not null), or invalid/expired verification tokens, returning error details as per business policy.\n\nThe email verification process is required by business authentication rules and supports compliance with common account lifecycle management practices. Timestamps are updated accordingly in 'updated_at' for the user record. The endpoint produces change audit logs for traceability but does not issue tokens; users must subsequently login/refresh using other endpoints. This operation is critical for onboarding/anti-abuse and may be required after email changes or account migration scenarios.","summary":"Verify new user email post-registration in todo_list_users (sets is_email_verified to true for authentication enablement).","parameters":[],"requestBody":{"description":"User email verification request, typically includes user ID and a verification token.","typeName":"ITodoListUser.IVerifyEmail"},"responseBody":{"description":"Empty response indicating success or failure of email verification request.","typeName":"ITodoListUser.IVerifyEmailResult"},"authorizationRole":null,"name":"verifyEmail","path":"/auth/user/verify-email","method":"post"},{"specification":"This is the password reset request initiation operation for accounts in 'todo_list_users'. When a registered user requests a password reset (via email), this operation generates and persists a single-use, time-limited password reset token ('todo_list_password_reset_tokens'), associates it to the user's id/email, and emails the token to the user. It validates that the provided email exists, that the targeted user is not soft-deleted ('deleted_at' is null), and rate-limits requests to prevent abuse. No authentication is required to request a password reset. The operation produces audit logs and never reveals whether the email exists for privacy. Token expiry ('expires_at') is set per business policy (typically 30–60 minutes). No password is changed until the reset token is subsequently verified via the separate reset/confirm endpoint. The generated token is not returned in the API response; all communication is managed by email integration in backend.","authorizationType":null,"description":"This endpoint initiates a password reset flow for accounts in 'todo_list_users'. It accepts an email address, validates existence (without revealing lookup results for privacy), and generates a secure, single-use password reset token persisted to 'todo_list_password_reset_tokens'. If the user account is soft-deleted ('deleted_at' is not null), no token is issued. The reset token is emailed to the user with a limited expiry time per business rules, and no sensitive token data is ever returned in the API response. Rate limiting and audit logging protect against abuse and enable compliance monitoring.\n\nNo authentication is needed for this operation. Receipt of this reset token by the user (via email) is required for subsequent execution of the password reset. Operation is fully compliant with business security policy, ensuring no information about email existence is leaked to the caller. Password is only changed upon valid completion of the separate reset/confirm endpoint.","summary":"Request password reset for a 'user' via email (creates/reset token in todo_list_password_reset_tokens table).","parameters":[],"requestBody":{"description":"Password reset request containing the user's email address.","typeName":"ITodoListUser.IRequestPasswordReset"},"responseBody":{"description":"Empty result on successful initiation of the password reset email workflow.","typeName":"ITodoListUser.IRequestPasswordResetResult"},"authorizationRole":null,"name":"requestPasswordReset","path":"/auth/user/request-password-reset","method":"post"},{"specification":"This is the password reset confirmation operation for accounts in 'todo_list_users'. It accepts a password reset token (from 'todo_list_password_reset_tokens'), the new password, and user identification. The endpoint validates that the token is valid, not expired ('expires_at' in future), unused ('used_at' null), and belongs to the same user who submitted the reset request; also ensures the target user account is not soft-deleted ('deleted_at' null). On successful validation, the new password is securely hashed, and the user's 'password_hash' is updated, 'updated_at' timestamp is refreshed, and the token is marked as used ('used_at' now). All other active sessions in 'todo_list_auth_sessions' are revoked for security compliance. This operation does not issue tokens; users must login again post-reset.","authorizationType":null,"description":"This endpoint finalizes the password reset process for a user by accepting the reset token, new password, and relevant user ID. The token must be valid and match an entry in 'todo_list_password_reset_tokens', not be expired ('expires_at' future), and not already used ('used_at' null). The targeted user must be active (soft-deleted status checked against 'deleted_at') and is required to match both the token and user email. Upon successful completion, the user's password is changed with a secure, salted hash stored in 'password_hash', the 'updated_at' time is refreshed, the reset token is marked 'used', and all outstanding session tokens in 'todo_list_auth_sessions' are revoked for security. Auditing information is retained. No JWT or session tokens are issued in this operation; users must authenticate through login/refresh to continue access.","summary":"Complete password reset for 'user' (validate and consume reset token, set new password, revoke all sessions).","parameters":[],"requestBody":{"description":"Password reset confirmation payload (reset token, user ID, new password).","typeName":"ITodoListUser.IResetPassword"},"responseBody":{"description":"Success result or explicit error after password reset confirmation for 'user'.","typeName":"ITodoListUser.IResetPasswordResult"},"authorizationRole":null,"name":"resetPassword","path":"/auth/user/reset-password","method":"post"},{"specification":"This operation enables authenticated users to retrieve a paginated, filtered, and searchable list of their own todo items. It acts on the todo_list_todos table, enforcing strict user ownership as required by privacy and data isolation rules. Supports business filtering—by completion status, due date, and partial title (case-insensitive)—with customizable pagination and sorting on creation or due dates. No other users’ data is ever exposed. The response structure adheres to domain requirements for list displays with summary fields.","path":"/todoList/user/todos","method":"patch","prisma_schemas":"model todo_list_todos {\n  id String @id @db.Uuid\n  todo_list_user_id String @db.Uuid\n  title String\n  description String?\n  due_date DateTime? @db.Timestamptz\n  is_completed Boolean\n  completed_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  user todo_list_users @relation(fields: [todo_list_user_id], references: [id], onDelete: Cascade)\n  @@unique([todo_list_user_id, title])\n  @@index([todo_list_user_id, created_at])\n  @@index([todo_list_user_id, due_date])\n  @@index([todo_list_user_id, is_completed])\n  @@index([title(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n  @@index([description(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Retrieve a paginated and filtered list of todo items for the authenticated user. This operation queries the todo_list_todos table, strictly limiting results to the caller's own records in compliance with the application's ownership enforcement policies. Multiple search capabilities are available—sort by due date or creation time, filter by completion status (complete, incomplete, all), and search titles via case-insensitive substring matching.\n\nPagination parameters control page size and number, with defaults and limits aligning with business rules (e.g., 20 items per page, up to 100 per page, reasonable maximums applied). If the authenticated user requests a page beyond available results, an empty result set with bounds information is returned. No data from any other user is ever included.\n\nSecurity is paramount: authorization checks ensure only logged-in users can access this endpoint, and all queries are scope-restricted to the user's own todos by user ID. The response contains todo item summaries suitable for list display, with sufficient detail for client navigation and further item interaction.","summary":"Paginated, searchable list of the authenticated user's todos from todo_list_todos.","parameters":[],"requestBody":{"description":"Filter, pagination, status, search, and sorting parameters for todo list retrieval.","typeName":"ITodoListTodo.IRequest"},"responseBody":{"description":"Paginated list of user's todo item summaries matching query criteria.","typeName":"IPageITodoListTodo.ISummary"},"authorizationRoles":["user"],"name":"index","model_name":"todo_list_todos","soft_delete_column":null,"authorizationRole":"user","authorizationType":null},{"specification":"This endpoint allows an authenticated user to retrieve detailed information about a single todo item they own, by todoId. Validates user ownership for privacy and security before exposing confidential data. Fetches all available fields (title, description, completion status, due date, timestamps) from the todo_list_todos table. Ensures precise business domain rules—item must exist and belong to the requesting user, or a not-found/permission error is returned.","path":"/todoList/user/todos/{todoId}","method":"get","prisma_schemas":"model todo_list_todos {\n  id String @id @db.Uuid\n  todo_list_user_id String @db.Uuid\n  title String\n  description String?\n  due_date DateTime? @db.Timestamptz\n  is_completed Boolean\n  completed_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  user todo_list_users @relation(fields: [todo_list_user_id], references: [id], onDelete: Cascade)\n  @@unique([todo_list_user_id, title])\n  @@index([todo_list_user_id, created_at])\n  @@index([todo_list_user_id, due_date])\n  @@index([todo_list_user_id, is_completed])\n  @@index([title(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n  @@index([description(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Retrieve a single todo's full detail for the authenticated user. This operation fetches a todo item by its unique identifier (todoId), ensuring it belongs to the caller according to privacy compliance and ownership enforcement. All detail fields are included in the response (title, optional description, due date, completion status and timestamp, creation and update times).\n\nStrict authorization and permission checks mean that only the owner can view this resource; queries for nonexistent or non-owned todoId result in a not-found or permission-denied error. Implementation must not expose whether a missing todoId ever existed if not owned by the current user.\n\nResponse data is suitable for detailed todo views, edit forms, or item inspection in client UIs.","summary":"Retrieve details for a single todo owned by the user from todo_list_todos.","parameters":[{"name":"todoId","description":"Unique identifier of the todo item to retrieve. Must be a valid UUID string.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full todo details for the specified todoId, if owned by user.","typeName":"ITodoListTodo"},"authorizationRoles":["user"],"name":"at","model_name":"todo_list_todos","soft_delete_column":null,"authorizationRole":"user","authorizationType":null},{"specification":"Allows an authenticated user to create a new todo item. Requires mandatory title (1–255 characters, unique among incomplete todos per user), with optional description (up to 1000 characters) and due date (must be future date if provided). Acts on todo_list_todos table, associating the item to the authenticated owner. The created todo is returned with all relevant business fields.","path":"/todoList/user/todos","method":"post","prisma_schemas":"model todo_list_todos {\n  id String @id @db.Uuid\n  todo_list_user_id String @db.Uuid\n  title String\n  description String?\n  due_date DateTime? @db.Timestamptz\n  is_completed Boolean\n  completed_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  user todo_list_users @relation(fields: [todo_list_user_id], references: [id], onDelete: Cascade)\n  @@unique([todo_list_user_id, title])\n  @@index([todo_list_user_id, created_at])\n  @@index([todo_list_user_id, due_date])\n  @@index([todo_list_user_id, is_completed])\n  @@index([title(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n  @@index([description(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Create a new todo item for the authenticated user. Requires a title (business-constrained: 1–255 characters, unique per user among incomplete todos), with optional description (up to 1000 characters) and optional due date (future only, strict format).\n\nThe operation ensures the owning user is always the caller, ignoring or rejecting foreign or forged ownership claims. All necessary business validations (field lengths, unique constraint, per-user active todo limit if enforced by implementation) are performed. Upon success, the newly created todo item is returned in detail, with all persistence-generated fields populated.","summary":"Create a new todo for the user in todo_list_todos.","parameters":[],"requestBody":{"description":"Todo creation data: title (required), description, due date, and optional completion status at creation.","typeName":"ITodoListTodo.ICreate"},"responseBody":{"description":"Details of the created todo item, including all fields from todo_list_todos.","typeName":"ITodoListTodo"},"authorizationRoles":["user"],"name":"create","model_name":"todo_list_todos","soft_delete_column":null,"authorizationRole":"user","authorizationType":null},{"specification":"Allows an authenticated user to update a todo item the user owns, modifying fields such as title, description, due date, and completion status. Enforces business rules: title remains unique per active/incomplete todo, valid lengths/constraints on text, and due date rules. Updates both domain and audit timestamps. Acts only if the todo exists and is owned by the current user.","path":"/todoList/user/todos/{todoId}","method":"put","prisma_schemas":"model todo_list_todos {\n  id String @id @db.Uuid\n  todo_list_user_id String @db.Uuid\n  title String\n  description String?\n  due_date DateTime? @db.Timestamptz\n  is_completed Boolean\n  completed_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  user todo_list_users @relation(fields: [todo_list_user_id], references: [id], onDelete: Cascade)\n  @@unique([todo_list_user_id, title])\n  @@index([todo_list_user_id, created_at])\n  @@index([todo_list_user_id, due_date])\n  @@index([todo_list_user_id, is_completed])\n  @@index([title(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n  @@index([description(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Update an existing todo item, modifying fields such as title (with per-user incomplete uniqueness enforced, 1–255 chars), description (max 1000), due date (must be valid/future), is_completed status, and completed_at where appropriate. All ownership and existence rules apply: only allows modification if the todo exists and belongs to the caller.\n\nTimestamps for last update are strictly set by the service. Any attempted modification of created_at/user_id is ignored and treated as invalid. Violations of validation rules or business invariants (such as duplicate incomplete-title) result in error responses.","summary":"Update a user-owned todo by todoId in todo_list_todos.","parameters":[{"name":"todoId","description":"Unique identifier of the todo to update. Must be a valid UUID string.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on the todo (title, description, status, due date).","typeName":"ITodoListTodo.IUpdate"},"responseBody":{"description":"Updated details of the todo item after modification.","typeName":"ITodoListTodo"},"authorizationRoles":["user"],"name":"update","model_name":"todo_list_todos","soft_delete_column":null,"authorizationRole":"user","authorizationType":null},{"specification":"Permits an authenticated user to permanently delete a todo item they own by todoId. Deletes are hard by default, with audit log recorded elsewhere per domain rules (see deleted_todo_logs). Ensures existence and strict ownership before removal. Both business referential integrity and privacy are enforced—no cross-user deletes, no leakage of others’ resource presence. This is a hard delete—not a soft delete or logical tombstone on todo_list_todos.","path":"/todoList/user/todos/{todoId}","method":"delete","prisma_schemas":"model todo_list_todos {\n  id String @id @db.Uuid\n  todo_list_user_id String @db.Uuid\n  title String\n  description String?\n  due_date DateTime? @db.Timestamptz\n  is_completed Boolean\n  completed_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  user todo_list_users @relation(fields: [todo_list_user_id], references: [id], onDelete: Cascade)\n  @@unique([todo_list_user_id, title])\n  @@index([todo_list_user_id, created_at])\n  @@index([todo_list_user_id, due_date])\n  @@index([todo_list_user_id, is_completed])\n  @@index([title(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n  @@index([description(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Permanently delete a todo the user owns. This is a destructive, non-reversible removal from todo_list_todos. Before performing the delete, ensures that the specified todoId exists and belongs to the calling user—no cross-user or foreign deletes allowed. No 'soft delete' or logical deletion marker is set: once removed, the todo disappears from active lists. However, a separate append-only deletion audit log (todo_list_deleted_todo_logs) records the event for business compliance and transient self-service history.\n\nAttempts to delete a non-existent or non-owned todo return a generic not-found error (do not reveal details about resources not owned by the caller). No response body is required on success.","summary":"Permanently remove a todo item by todoId from todo_list_todos (hard delete).","parameters":[{"name":"todoId","description":"Unique identifier of the todo to be deleted. Must be a valid UUID string.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["user"],"name":"erase","model_name":"todo_list_todos","soft_delete_column":null,"authorizationRole":"user","authorizationType":null},{"specification":"Retrieve a paginated, filtered list of deleted todo items for the authenticated user, sourced from the todo_list_deleted_todo_logs table. This operation allows users to view an audit log of their deleted todos within the 30-day retention window after deletion. Supports advanced filtering options such as deletion date range, title search, and completion status at time of deletion. Implements business logic enforcing strict ownership, so only the requesting user's deleted todos are accessible. Relies on the relational link between todo_list_deleted_todo_logs and todo_list_users for permission enforcement. Pagination, sorting, and search are supported as per standard requirements.","prisma_schemas":"model todo_list_users {\n  id String @id @db.Uuid\n  email String\n  password_hash String\n  is_email_verified Boolean\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  todo_list_password_reset_tokens todo_list_password_reset_tokens[]\n  todo_list_auth_sessions todo_list_auth_sessions[]\n  todo_list_todos todo_list_todos[]\n  todo_list_deleted_todo_logs todo_list_deleted_todo_logs[]\n}\nmodel todo_list_deleted_todo_logs {\n  id String @id @db.Uuid\n  todo_list_user_id String @db.Uuid\n  original_todo_id String @db.Uuid\n  title String\n  description String?\n  due_date DateTime? @db.Timestamptz\n  is_completed Boolean\n  completed_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime @db.Timestamptz\n  user todo_list_users @relation(fields: [todo_list_user_id], references: [id], onDelete: Cascade)\n}\n","authorizationRoles":["user"],"description":"This operation retrieves a paginated list of deleted todos for the currently authenticated user from the todo_list_deleted_todo_logs table. It allows users to review deleted todos for self-auditing or potential recovery actions within the allowed 30-day audit window after deletion. Each log entry preserves a snapshot of business-relevant information at deletion time (title, description, due date, completion status, etc.). \n\nAll results are strictly scoped to the requesting user as enforced by the todo_list_user_id foreign key. The operation supports advanced search, time-range filtering (e.g., recently deleted items), and sorting by deletion date or original creation time. For privacy and compliance, only the authenticated user's deleted todos are visible, and records older than the retention period are automatically purged from results. Errors are returned if invalid filters are supplied or pagination is out of bounds.\n\nThis API ensures compliance with business rules regarding user auditability, strict ownership isolation, and secure history browsing. Related API operations include restoration (if supported), permanent erasure after retention, and normal todo list retrieval for active items.","summary":"Paginated, filtered list of the user's deleted todos within audit retention window.","parameters":[],"requestBody":{"description":"Search, filter, and pagination criteria for retrieving deleted todos.","typeName":"ITodoListDeletedTodoLog.IRequest"},"responseBody":{"description":"Paginated result of deleted todo logs matching search criteria and user context.","typeName":"IPageITodoListDeletedTodoLog"},"name":"index","method":"patch","path":"/todoList/user/todos/deleted","model_name":"todo_list_deleted_todo_logs","soft_delete_column":null,"authorizationRole":"user","authorizationType":null},{"specification":"Retrieve a single deleted todo log entry corresponding to the specified deletedTodoLogId, belonging to the authenticated user. The resource is sourced from the todo_list_deleted_todo_logs table, representing a detailed historical snapshot of a formerly active todo that was deleted. Business logic ensures that only the owner may access this record, and access is only possible within the system's audit-logging retention period. Full field details are returned to support user self-auditing and history review workflows. Strict ownership enforcement is mandatory by verifying todo_list_user_id.","prisma_schemas":"model todo_list_users {\n  id String @id @db.Uuid\n  email String\n  password_hash String\n  is_email_verified Boolean\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  todo_list_password_reset_tokens todo_list_password_reset_tokens[]\n  todo_list_auth_sessions todo_list_auth_sessions[]\n  todo_list_todos todo_list_todos[]\n  todo_list_deleted_todo_logs todo_list_deleted_todo_logs[]\n}\nmodel todo_list_deleted_todo_logs {\n  id String @id @db.Uuid\n  todo_list_user_id String @db.Uuid\n  original_todo_id String @db.Uuid\n  title String\n  description String?\n  due_date DateTime? @db.Timestamptz\n  is_completed Boolean\n  completed_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime @db.Timestamptz\n  user todo_list_users @relation(fields: [todo_list_user_id], references: [id], onDelete: Cascade)\n}\n","authorizationRoles":["user"],"description":"Fetch a single deleted todo log from todo_list_deleted_todo_logs based on the specified deletedTodoLogId path parameter. The returned record contains all relevant business fields as preserved at the time of deletion (title, description, status, timestamps, etc.), supporting user-facing audit and history capabilities.\n\nAccess control is enforced by checking that the log belongs to the currently authenticated user. If the deletedTodoLogId is not found, access is outside the audit retention window, or the user does not own the log, a not-found error is returned. This endpoint is intended for audit history review, compliance support, or detailed inspection by users of previously deleted items.","summary":"Retrieve a single deleted todo record by ID for the authenticated user.","parameters":[{"name":"deletedTodoLogId","description":"Unique identifier of the deleted todo log to return.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed snapshot of the deleted todo at the time of removal.","typeName":"ITodoListDeletedTodoLog"},"name":"at","method":"get","path":"/todoList/user/todos/deleted/{deletedTodoLogId}","model_name":"todo_list_deleted_todo_logs","soft_delete_column":null,"authorizationRole":"user","authorizationType":null},{"specification":"Retrieve a paginated, filtered list of deleted todo logs for the authenticated user. This alternative path serves the same underlying entity/model (todo_list_deleted_todo_logs) and enables advanced search, filter, and navigation through audit logs of deleted todos within the allowed retention window. This endpoint is fully scoped to strict user ownership, enforcing privacy and audit compliance by leveraging the todo_list_user_id foreign key relationship. Offers full pagination, filtering by fields such as deletion date, completion status, and title search, and supports navigation beyond standard active todo lists for user self-audit.","prisma_schemas":"model todo_list_users {\n  id String @id @db.Uuid\n  email String\n  password_hash String\n  is_email_verified Boolean\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  todo_list_password_reset_tokens todo_list_password_reset_tokens[]\n  todo_list_auth_sessions todo_list_auth_sessions[]\n  todo_list_todos todo_list_todos[]\n  todo_list_deleted_todo_logs todo_list_deleted_todo_logs[]\n}\nmodel todo_list_deleted_todo_logs {\n  id String @id @db.Uuid\n  todo_list_user_id String @db.Uuid\n  original_todo_id String @db.Uuid\n  title String\n  description String?\n  due_date DateTime? @db.Timestamptz\n  is_completed Boolean\n  completed_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime @db.Timestamptz\n  user todo_list_users @relation(fields: [todo_list_user_id], references: [id], onDelete: Cascade)\n}\n","authorizationRoles":["user"],"description":"This operation retrieves a paginated and optionally filtered set of deleted todo audit logs from the todo_list_deleted_todo_logs model for the authenticated user. Business rules enforce that only the requesting user's deleted todos (linked by todo_list_user_id) are visible. Filters may include title, deletion date range, completion status, and other business-relevant fields. Pagination and sorting are supported as per the general audit log browsing needs.\n\nUsers can utilize this endpoint to audit, review, or validate previous deletion actions, ensuring compliance with transparency and privacy business requirements. Only deleted items still within the system-defined retention window are returned, and attempts to query outside this scope yield empty results. Related operations include retrieving an individual deleted log and normal todo list queries for currently active items.","summary":"Search and browse user's deleted todo logs with pagination and advanced filters.","parameters":[],"requestBody":{"description":"Search and pagination options for browsing deleted todo logs.","typeName":"ITodoListDeletedTodoLog.IRequest"},"responseBody":{"description":"Paginated set of deleted todo logs for the requesting user.","typeName":"IPageITodoListDeletedTodoLog"},"name":"index","method":"patch","path":"/todoList/user/deletedTodoLogs","model_name":"todo_list_deleted_todo_logs","soft_delete_column":null,"authorizationRole":"user","authorizationType":null},{"specification":"Fetch a single audit log entry for a deleted todo by its identifier, ensuring the record belongs to the currently authenticated user and is still within the business-mandated retention period. Uses the todo_list_deleted_todo_logs table and enforces strict per-user privacy. Returns all fields preserved at deletion time to support detailed history review, self-service audit, and compliance workflows. Verifies that the resource exists, belongs to the user, and has not yet been purged after retention deletion. If not found or access is denied, responds with a not-found error without disclosing resource existence.","prisma_schemas":"model todo_list_users {\n  id String @id @db.Uuid\n  email String\n  password_hash String\n  is_email_verified Boolean\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  todo_list_password_reset_tokens todo_list_password_reset_tokens[]\n  todo_list_auth_sessions todo_list_auth_sessions[]\n  todo_list_todos todo_list_todos[]\n  todo_list_deleted_todo_logs todo_list_deleted_todo_logs[]\n}\nmodel todo_list_deleted_todo_logs {\n  id String @id @db.Uuid\n  todo_list_user_id String @db.Uuid\n  original_todo_id String @db.Uuid\n  title String\n  description String?\n  due_date DateTime? @db.Timestamptz\n  is_completed Boolean\n  completed_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime @db.Timestamptz\n  user todo_list_users @relation(fields: [todo_list_user_id], references: [id], onDelete: Cascade)\n}\n","authorizationRoles":["user"],"description":"Retrieve a single deleted todo log by the specified deletedTodoLogId from the todo_list_deleted_todo_logs model. The operation ensures that the returned audit log entry belongs to the currently authenticated user and is within the allowed retention window for deleted item records.\n\nThe returned object contains all snapshot fields as of deletion, enabling detailed user history reviews and facilitating audit transparency. An error is returned if the resource is not found, access is denied, or the log has been purged due to expiration (after the retention period). Use this operation for viewing detailed deleted todo data, not for active todo management.","summary":"Get detailed info for a deleted todo log by its ID, scoped to the current user.","parameters":[{"name":"deletedTodoLogId","description":"The unique identifier of the deleted todo log record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The full audit snapshot of the deleted todo's state at the time of deletion.","typeName":"ITodoListDeletedTodoLog"},"name":"at","method":"get","path":"/todoList/user/deletedTodoLogs/{deletedTodoLogId}","model_name":"todo_list_deleted_todo_logs","soft_delete_column":null,"authorizationRole":"user","authorizationType":null}],"components":{"authorization":[{"name":"user","description":"A registered, authenticated user who can create, read, update, and delete their own todo items. Cannot access or modify other users' data. Can manage personal account settings (password, email).","kind":"member"}],"schemas":{"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"ITodoListUser.IJoin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"User's email address for registration (must be unique and required). Used for account login and communication."},"password":{"type":"string","minLength":8,"maxLength":128,"description":"User's password for registration (never stored in plain form; must meet business security requirements)."}},"required":["email","password"],"description":"Registration request body for user join (account creation). The email and password fields are mandatory; email must be unique across all users (case-insensitive), and password must meet minimum business security policies. No additional fields are accepted."},"ITodoListUser.ILogin":{"type":"object","description":"Credentials for user authentication (login operation).\n\nRequires email and password; returns error if invalid or if user not verified or inactive. Does not accept/return security tokens or any auth/session data on input.","properties":{"email":{"type":"string","format":"email","description":"Registered email for login."},"password":{"type":"string","description":"Password for credential challenge (never stored or logged in plain form)."}},"required":["email","password"]},"ITodoListUser.IRefresh":{"type":"object","properties":{"session_token":{"type":"string","description":"Session refresh token for the user (session_token field as stored in todo_list_auth_sessions)."}},"required":["session_token"],"description":"JWT refresh token request body. Supplies the session_token to obtain new access and refresh tokens for the authenticated user."},"ITodoListUser.IVerifyEmail":{"type":"object","description":"Request for email verification on user registration or change.\n\nRequires both user_id (UUID) and associated email verification token. Event cannot occur if already verified, already deleted, or token expired/inactive.","properties":{"user_id":{"type":"string","format":"uuid","description":"Verifying user account UUID."},"token":{"type":"string","description":"Unique email verification token."}},"required":["user_id","token"]},"ITodoListUser.IVerifyEmailResult":{"type":"object","description":"Empty result object indicating success on email verification; errors use API error format.","properties":{},"required":[]},"ITodoListUser.IAuthorized":{"type":"object","description":"Authorization response schema for successful auth (registration or login or refresh).\n\nReturns session token and quick user summary. Excludes password and any sensitive credentials.","properties":{"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"user":{"$ref":"#/components/schemas/ITodoListUser.ISummary","description":"Session context user info."}},"required":["token","user"]},"ITodoListUser.ISummary":{"type":"object","description":"Minimal display-safe user data for auth response.\n\nIncludes id, email, is_email_verified, and created_at – all fields required for quick user context or session display after login. No sensitive user data is present.\n","properties":{"id":{"type":"string","format":"uuid","description":"User's database UUID."},"email":{"type":"string","format":"email","description":"User's display email."},"is_email_verified":{"type":"boolean","description":"Whether email is confirmed for the registered user."},"created_at":{"type":"string","format":"date-time","description":"Registration timestamp (ISO 8601 UTC), for account age/status."}},"required":["id","email","is_email_verified","created_at"]},"ITodoListUser":{"type":"object","description":"Represents a registered user account in the Todo List application, as defined in Prisma model `todo_list_users`. \n\nHandles user identity, core authentication properties, email verification, and account audit information. Each user is uniquely identified by a UUID, with additional business properties: a unique email address (case-insensitive), `is_email_verified` flag, and audit-relevant timestamps (`created_at`, `updated_at`, `deleted_at`).\n\nSensitive details (like password hashes) are not exposed in this schema. This entity forms the heart of ownership relationships for todos and session management. All business logic for authentication, registration, and email lifecycle centers on this entity. When a user is deleted, all related data (todos, sessions, logs) is purged per privacy policy.\n\nThis schema includes only fields safe for client exposure.\n","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the user (UUID). References Prisma `id` column."},"email":{"type":"string","format":"email","description":"User's unique email address for authentication and communication. References Prisma `email` column."},"is_email_verified":{"type":"boolean","description":"Has the user confirmed ownership of their email address? Used for account enable/disable gating. References Prisma `is_email_verified`."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for account creation. Prisma `created_at` column, ISO 8601 UTC."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for the most recent profile/account update. Prisma `updated_at` column, ISO 8601 UTC."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp for soft deletion/block/removal of the account (if any). Prisma `deleted_at` column, ISO 8601 UTC."},{"type":"null"}],"description":"Timestamp for soft deletion/block/removal of the account (if any). Prisma `deleted_at` column, ISO 8601 UTC."}},"required":["id","email","is_email_verified","created_at","updated_at"]},"ITodoListUser.ICreate":{"type":"object","description":"Request schema for user registration (join): fields required to create an account.\n\nEmail (unique, case-insensitive) and password (never plain, only for credential validation/hashing) are required. All other information is managed by backend. No user_id or audit/system fields accepted by client. Fails if email is duplicate or invalid per business logic.\n","properties":{"email":{"type":"string","format":"email","description":"New user's email address (must be unique); login/communication identifier."},"password":{"type":"string","description":"User plain password for registration (min/max length business rules enforced)."}},"required":["email","password"]},"ITodoListUser.IUpdate":{"type":"object","description":"Request schema for updating user profile settings (email and/or password). All fields optional. \n\nNo system, actor, or audit fields allowed. All ownership/admin audit handled by backend context.\nEmail and password must independently pass business rules if present; at least one must be included for update attempt.\n","properties":{"email":{"type":"string","format":"email","description":"New user's email, if being changed."},"password":{"type":"string","description":"Change password to this value, if specified."}},"required":[]},"ITodoListUser.IRequest":{"type":"object","description":"Search and filter criteria for user list/lookup operations.\n\nSupports pagination (page, limit), filtering by email, is_email_verified, and status. Intended primarily for admin/system-side usage (not relevant for app clients).\n","properties":{"page":{"type":"integer","minimum":1,"description":"Pagination: page number (min 1)"},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Pagination: number of results per page (default/business-capped at 100)."},"email":{"type":"string","format":"email","description":"Filter by registered email address (case-insensitive match)."},"is_email_verified":{"type":"boolean","description":"Filter for verified/unverified status."}},"required":[]},"IPageITodoListUser":{"type":"object","description":"Paginated container for user entities. Returned in multi-user administration/list queries. \n\nStrictly contains pagination metadata and user array.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information (current, limit, records, pages)."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoListUser"},"description":"Array of user entities on this page."}},"required":["pagination","data"]},"IPageITodoListUser.ISummary":{"type":"object","description":"Paginated set of summary user data, suitable for session lists, access logs, and lightweight user panels.\n\nContains only safe summary info.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination context."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoListUser.ISummary"},"description":"Summary user array data."}},"required":["pagination","data"]},"ITodoListUser.IRequestPasswordReset":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Registered email address for the user requesting a password reset. Must correspond to an existing account. For privacy protection, even if the address does not exist, a generic success reply is sent. Used to identify the user and generate a password reset token per password recovery business rules."}},"required":["email"],"description":"Request body object for initiating a password reset (forgot password flow) for a user account. Contains only the user's registered email address, which is used to look up the account and trigger token/email delivery logic. Business logic must not disclose whether the email exists. Response always indicates that the request has been accepted if the email is syntactically valid."},"ITodoListUser.IRequestPasswordResetResult":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates success status of the password reset initiation. True if request is accepted (to avoid account enumeration in API response)."}},"required":["success"],"description":"Response for password reset request initiation. Always returns success=true if the submission is accepted for processing, regardless of email presence in the system, to comply with privacy and anti-enumeration best practices."},"ITodoListUser.IResetPassword":{"type":"object","properties":{"token":{"type":"string","description":"The unique password reset token received via email for verifying the request. This is typically a random, cryptographically-secure string mapped to the user in the password reset tokens table, validated to prevent reuse and enforce expiry."},"user_id":{"type":"string","format":"uuid","description":"The UUID of the user account associated with this reset action. Used to validate ownership of the reset token and ensure action is performed by the account owner."},"new_password":{"type":"string","description":"The new password to set for the account; must meet current system security criteria (e.g., minimum length, character types, etc.)."}},"required":["token","user_id","new_password"],"description":"Request object for completing a password reset operation, containing the password reset token (from user's email), the target user's UUID, and the new password to set. All properties are required for successfully resetting the password. Security logic strictly enforces token expiration, one-time use, and correct user association."},"ITodoListUser.IResetPasswordResult":{"type":"object","properties":{"success":{"type":"boolean","description":"Indicates whether the password was successfully reset. True if completed; false for invalid/expired token or failure."},"error":{"oneOf":[{"type":"string","description":"Optional error code or message for failure conditions (e.g., token expired, invalid password, etc.), null if successful."},{"type":"null","description":"Optional error code or message for failure conditions (e.g., token expired, invalid password, etc.), null if successful."}],"description":"Optional error code or message for failure conditions (e.g., token expired, invalid password, etc.), null if successful."}},"required":["success"],"description":"Response for password reset completion, indicating overall success (true/false) and optionally including an error code or descriptive message if the operation failed. Used to signal clients about error recovery steps or next actions."},"ITodoListAuthSession":{"type":"object","description":"Active session records for user authentication in the Todo List app.\n\nThis entity stores per-session issued tokens, audit metadata (user agent, IP address), timestamps, and session status fields. Used for login audit, global logout, and active session tracking.\n\nSensitive session tokens are never exposed on client APIs outside of controlled authentication responses.","properties":{"id":{"type":"string","format":"uuid","description":"Session ID (UUID) in the database."},"todo_list_user_id":{"type":"string","format":"uuid","description":"Foreign key to the owning user."},"session_token":{"type":"string","description":"Opaque authentication token for this session (JWT, etc.)."},"user_agent":{"oneOf":[{"type":"string","description":"User agent string (browser/device/OS details) for the session."},{"type":"null"}],"description":"User agent string (browser/device/OS details) for the session."},"ip_address":{"oneOf":[{"type":"string","description":"IP address (if captured under privacy rules), for audit only."},{"type":"null"}],"description":"IP address (if captured under privacy rules), for audit only."},"expires_at":{"type":"string","format":"date-time","description":"Session expiration timestamp."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the session was established."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"When / if this session was revoked, or null if active."},{"type":"null"}],"description":"When / if this session was revoked, or null if active."}},"required":["id","todo_list_user_id","session_token","expires_at","created_at"]},"ITodoListPasswordResetToken":{"type":"object","description":"Schema for single-use password reset tokens associated with a user, generated on password reset request.\n\nContains secure token value, expiry timestamp, and audit information. Only used in password reset flows. No sensitive data is exposed outside controlled flows.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the password reset token."},"todo_list_user_id":{"type":"string","format":"uuid","description":"User ID associated with this reset token."},"token":{"type":"string","description":"Secure, randomly generated token string."},"expires_at":{"type":"string","format":"date-time","description":"Token expiration timestamp."},"used_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when the token was used, or null if not used."},{"type":"null"}],"description":"Timestamp when the token was used, or null if not used."},"created_at":{"type":"string","format":"date-time","description":"Time when the reset token was created."}},"required":["id","todo_list_user_id","token","expires_at","created_at"]},"ITodoListTodo":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for the todo item. Assigned on creation and immutable. References the corresponding row in the database table. Sourced from the 'id' column of the 'todo_list_todos' table. Used as the primary resource key for retrieval, update, and deletion operations."},"title":{"type":"string","minLength":1,"maxLength":255,"description":"Title of the todo item as entered by the user. Required for all todos. Must be unique among incomplete todos for the same user. 1–255 characters in length, case-insensitive for uniqueness. Sourced from the 'title' column of the database entity."},"description":{"type":"string","maxLength":1000,"description":"Optional user-provided description of the todo, allowing up to 1000 characters. May be empty or omitted. References the 'description' field in the Prisma schema, used for personal notes or task instructions."},"due_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional due date for the todo item. If specified, must be a valid ISO 8601 UTC date-time in the future. Null or omitted if unset by user. Maps to the 'due_date' column in the database schema and enables reminder or prioritization workflows."},"is_completed":{"type":"boolean","description":"Indicates whether the todo has been marked as completed by its owner. Defaults to false on creation. May be toggled via update operations. Directly references the 'is_completed' column in the table."},"completed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp (in ISO 8601 format) for when the todo item was marked as completed. Null until marked completed. Always updates when is_completed transitions to true. Sourced from 'completed_at' in the schema."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp in ISO 8601 UTC format. Set automatically when the todo item is created. Sourced from the 'created_at' column. Not modifiable by clients."},"updated_at":{"type":"string","format":"date-time","description":"Last updated timestamp (ISO 8601 UTC), modified after any field change. Populated from 'updated_at' column in the 'todo_list_todos' table."}},"required":["id","title","is_completed","created_at","updated_at"],"description":"A detailed representation of a todo item as stored in the system, matching the todo_list_todos table structure in the database schema. Includes all relevant business fields: unique identifier (UUID), mandatory title, optional description, due date, completion state, associated timestamps, and a completion marker. Output format for retrieval/query endpoints. Sensitive fields (owner identity, internal audit fields) are omitted for privacy; all fields correspond to actual columns in the source Prisma schema."},"ITodoListTodo.ICreate":{"type":"object","properties":{"title":{"type":"string","minLength":1,"maxLength":255,"description":"Title for the new todo item. Required. Must be unique among incomplete todos for the user (case-insensitive within business constraints). Maps to the 'title' column in the 'todo_list_todos' table."},"description":{"type":"string","maxLength":1000,"description":"Optional description or details for the todo. May be empty or omitted. Limited to 1000 characters. Sourced from database schema's 'description' field."},"due_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Optional due date for the todo item. If specified, must be a valid ISO 8601 future date-time; null or omitted if unset."},"is_completed":{"type":"boolean","description":"Set to true to mark the todo as completed on creation (optional, defaults to false). Business logic will populate completed_at timestamp if true. Directly maps to 'is_completed' in schema."}},"required":["title"],"description":"Request body to create a new todo item for the authenticated user. Accepts a required title, optional description (up to 1000 characters), optional future due date, and an optional completed flag (default: false). Ignores user identity—ownership is implicit from authentication. Validates title uniqueness among incomplete todos and field constraints exactly as described in the business requirements and database schema."},"ITodoListTodo.IUpdate":{"type":"object","properties":{"title":{"type":"string","minLength":1,"maxLength":255,"description":"(Optional) New title for the todo item. Must be unique among incomplete todos (1–255 chars, case-insensitive, per user). Will overwrite current title if provided. Sourced from 'title' in the schema."},"description":{"type":"string","maxLength":1000,"description":"(Optional) New description. Up to 1000 characters. Maps to 'description' in DB. Will overwrite existing description if present."},"due_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"(Optional) New due date (if provided, future-only, ISO 8601). Null or omission removes the due date. Maps to 'due_date' field in schema."},"is_completed":{"type":"boolean","description":"(Optional) New completion flag for the todo. Setting to true will mark completed and populate 'completed_at'; setting false marks incomplete."}},"description":"Request body for updating selected business fields of an existing todo. All fields are optional and, if omitted, do not change. Supports modifying title, description, due date, and completion status, each validated according to business rules and field constraints sourced from the Prisma schema. Client must never set ownership/user ID—backend assigns that via authentication. System-generated and relation keys are immutable by this operation. Title remains uniqueness-constrained among incomplete todos owned by the user.","required":[]},"ITodoListTodo.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the todo item. Used for linking, navigation, and further CRUD operations. Matches id in the main table."},"title":{"type":"string","maxLength":255,"description":"Title of the todo (required, 1-255 chars). Main field for display and search. Uniqueness is preserved among active todos per user, but not enforced in the summary response."},"is_completed":{"type":"boolean","description":"Whether this todo is completed (true) or not (false). Used for filtering, grouping, and UI indication."},"due_date":{"oneOf":[{"type":"string","format":"date-time","description":"Optional due date for the todo if set, in ISO 8601 date-time format. Null if not provided or unset."},{"type":"null","format":"date-time","description":"Optional due date for the todo if set, in ISO 8601 date-time format. Null if not provided or unset."}],"description":"Optional due date for the todo if set, in ISO 8601 date-time format. Null if not provided or unset."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of todo creation (ISO 8601 UTC). Useful for sorting and audit tracking in list views."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp of the todo (ISO 8601 UTC). Used for sort order and change tracking."}},"required":["id","title","is_completed","created_at","updated_at"],"description":"Summary object for a todo item, as returned within paginated list APIs. Contains fields needed for display (id, title, completion status, due date, timestamps), omitting large descriptions or ownership info for privacy and efficiency."},"ITodoListTodo.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number for pagination (starts at 1). Required for paginated queries."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Maximum number of todos to return per page. Default 20, max 100."},"status":{"oneOf":[{"const":"all","description":"Filter by completion status. Allowed values: 'all', 'complete', 'incomplete'."},{"const":"complete","description":"Filter by completion status. Allowed values: 'all', 'complete', 'incomplete'."},{"const":"incomplete","description":"Filter by completion status. Allowed values: 'all', 'complete', 'incomplete'."}],"description":"Filter by completion status. Allowed values: 'all', 'complete', 'incomplete'."},"sort_by":{"oneOf":[{"const":"due_date","description":"Sort results by 'due_date' or 'created_at'. Corresponds to main business fields for todo sorting."},{"const":"created_at","description":"Sort results by 'due_date' or 'created_at'. Corresponds to main business fields for todo sorting."}],"description":"Sort results by 'due_date' or 'created_at'. Corresponds to main business fields for todo sorting."},"sort_direction":{"oneOf":[{"const":"asc","description":"Sort order. Allowed values: 'asc' (ascending) or 'desc' (descending). Default is 'desc'."},{"const":"desc","description":"Sort order. Allowed values: 'asc' (ascending) or 'desc' (descending). Default is 'desc'."}],"description":"Sort order. Allowed values: 'asc' (ascending) or 'desc' (descending). Default is 'desc'."},"search":{"type":"string","description":"Optional substring filter for todo title. Applies case-insensitive, partial matching to the title field."},"due_date_after":{"oneOf":[{"type":"string","format":"date-time","description":"Optional filter for todos with due_date greater than or equal to this ISO 8601 datetime. Used for time range filtering."},{"type":"null","format":"date-time","description":"Optional filter for todos with due_date greater than or equal to this ISO 8601 datetime. Used for time range filtering."}],"description":"Optional filter for todos with due_date greater than or equal to this ISO 8601 datetime. Used for time range filtering."},"due_date_before":{"oneOf":[{"type":"string","format":"date-time","description":"Optional filter for todos with due_date less than or equal to this ISO 8601 datetime. Used for time range filtering."},{"type":"null","format":"date-time","description":"Optional filter for todos with due_date less than or equal to this ISO 8601 datetime. Used for time range filtering."}],"description":"Optional filter for todos with due_date less than or equal to this ISO 8601 datetime. Used for time range filtering."}},"description":"Request object for filtering, searching, and paginating the user's todo list. Supports combination of status, date range, substring search, sorting, and pagination according to business requirements for efficient todo management.","required":[]},"IPageITodoListTodo":{"type":"object","description":"Paginated result schema for detailed todo list API. Contains full todo entity records in data array, along with pagination context (page/current/total).\n\nUsed only where detailed full-entity lists are appropriate, e.g., admin workspace or full-edit workflow.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page context: page, limit, records, pages."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoListTodo"},"description":"Array of todo entity records."}},"required":["pagination","data"]},"IPageITodoListTodo.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata describing the current result set, page position, total records, and navigation cues. Required in all paginated responses."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoListTodo.ISummary"},"description":"Array of todo summary objects in this paginated page. Each entry is a summary representation of a user's todo for fast list views."}},"required":["pagination","data"],"description":"Paginated response for todo item summaries. Contains both metadata about query position (pagination details) and the list of user's todos matching the current filter/sort. Suitable for paged navigation and client-side rendering of list views."},"ITodoListDeletedTodoLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the deleted todo log/audit entry. Assigned on todo deletion. Always globally unique and persistently references the audit record for the deletion event."},"original_todo_id":{"type":"string","format":"uuid","description":"The ID of the original todo item prior to deletion. This UUID uniquely ties the log record back to the historical instance. Cannot collide with any active or former todo ID for user audit traceability."},"title":{"type":"string","maxLength":255,"description":"Title of the deleted todo at the time of deletion. Maximum 255 characters. Sourced directly from the historical record prior to deletion. Must not be empty according to business rules imposed on active todos."},"description":{"type":"string","maxLength":1000,"description":"(Optional) Description field captured at time of deletion. Copied from transient field and may be empty or omitted."},"due_date":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"(Optional) Due date that was set at time of deletion. If unspecified, null. Remains valid as an ISO 8601 date-time snapshot."},"is_completed":{"type":"boolean","description":"True if the todo was marked completed at time of deletion, else false. Fiduciary snapshot for accurate audit and self-service recovery."},"completed_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"(Optional) Timestamp of completion, if the todo was completed before deletion. ISO8601, null if never completed."},"created_at":{"type":"string","format":"date-time","description":"Original creation timestamp of the todo (ISO 8601). Persisted as an unmodifiable copy from the source table at deletion."},"updated_at":{"type":"string","format":"date-time","description":"Last 'update' timestamp of the todo, at the moment immediately prior to deletion. Allows accurate post-mortem and user history review. Always in ISO 8601 UTC."},"deleted_at":{"type":"string","format":"date-time","description":"Timestamp of deletion action (ISO 8601), accurately reflecting when user triggered permanent removal. Used for purge logic and compliance with retention period."}},"required":["id","original_todo_id","title","is_completed","created_at","updated_at","deleted_at"],"description":"Audit log entry for a deleted todo. Captures a complete business snapshot of the todo at time of permanent deletion, including all user-facing and compliance tracking fields from the source record. Used for audit reporting, user history view, and retention window enforcement. Never includes relational identity fields or security-sensitive information (passwords, owner id, etc.)."},"ITodoListDeletedTodoLog.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Pagination: page number (1-based). Optional, defaults to 1. Used for navigating multi-page result sets."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Pagination: maximum records per page (min 1, max 100, business defaults applied if omitted)."},"deleted_since":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"(Optional) Filter to deleted logs where 'deleted_at' is equal to or after this ISO 8601 date-time."},"deleted_before":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"(Optional) Filter to deleted logs where 'deleted_at' is equal to or before this ISO 8601 date-time."},"search":{"type":"string","maxLength":255,"description":"(Optional) Case-insensitive search string to match against the 'title' field of deleted todos. Enables filtered navigation through audit logs."},"sort_by":{"oneOf":[{"const":"deleted_at"},{"const":"created_at"}],"description":"Sort criteria for the deleted log list. Accepts 'deleted_at' or 'created_at'. Defaults to 'deleted_at' if omitted."},"sort_direction":{"oneOf":[{"const":"asc"},{"const":"desc"}],"description":"Sort order: 'asc' for ascending or 'desc' for descending (default: 'desc' if omitted)."},"is_completed":{"type":"boolean","description":"(Optional) Filter records by completion status at deletion time. True: completed, False: incomplete. Null/undefined: any status."}},"description":"Request body for retrieving a filtered, sorted, and paginated list of deleted todo logs for the authenticated user. Supports pagination (page/limit), date range filters, completion status filter, and partial title text search. Used for audit and history views within the permitted data retention window as enforced by business and legal requirements.","required":[]},"IPageITodoListDeletedTodoLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination state information for the current result set of deleted todo logs. Includes page, per-page limit, record and page totals as required by standard pagination schema."},"data":{"type":"array","items":{"$ref":"#/components/schemas/ITodoListDeletedTodoLog"},"description":"Array of deleted todo log records, each representing an audit snapshot of a formerly active todo at time of deletion."}},"required":["pagination","data"],"description":"Paginated collection of deleted todo logs. Wraps array of audit log resources in a list display format with pagination and navigation support. Used by all endpoints returning multi-record result sets for deleted todo audit/history operations."},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","description":"Current page number in this paginated query (starts at 1)."},"limit":{"type":"integer","description":"Maximum number of records per page."},"records":{"type":"integer","description":"Total number of matching records found for this query."},"pages":{"type":"integer","description":"Total number of pages available based on record count and per-page limit."}},"required":["current","limit","records","pages"],"description":"Pagination information for paginated data responses. Includes navigation data (page, size, total, max pages) in alignment with the IPage specification."}}}}